import os
from collections import OrderedDict
from datetime import datetime
import matplotlib
matplotlib.use('Agg')
import matplotlib.lines as mlines
import matplotlib.patches as mpatches
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from cycler import cycler
from lifelines.estimation import KaplanMeierFitter
from matplotlib.pyplot import cm
from mpl_toolkits.mplot3d import Axes3D
from scipy import interp
from sklearn.decomposition import PCA
from sklearn.metrics import auc

import constants as const

almost_black = "#262626"
palette = sns.color_palette()


def visualise_data_set(x_arr, y_arr):
    """Apply principle component analysis to the X-array to 3 dimensions and visualise the resulting matrix"""
    # Instantiate a PCA object for the sake of easy visualisation
    pca = PCA(n_components=3)

    # Fit and transform x to visualise inside a 3D feature space
    x_visualisation = pca.fit_transform(x_arr)

    figure = plt.figure()
    axis = Axes3D(figure)

    axis.scatter(x_visualisation[y_arr == 0, 0], x_visualisation[y_arr == 0, 1], x_visualisation[y_arr == 0, 2],
                 label="Class #0",
                 edgecolor=almost_black, facecolor=palette[0], linewidth=0.3, marker="o")
    axis.scatter(x_visualisation[y_arr == 1, 0], x_visualisation[y_arr == 1, 1], x_visualisation[y_arr == 1, 2],
                 label="Class #1",
                 edgecolor=almost_black, facecolor=palette[2], linewidth=0.3, marker="^")
    axis.set_title("PCA to 3 components")

    plt.show()


def visualise_two_data_sets(x_arr, y_arr, x_arr_two, y_arr_two):
    """Apply principle component analysis to the two X-array"s to 3 dimensions and visualise the resulting matrices"""
    # Instantiate a PCA object for the sake of easy visualisation
    pca = PCA(n_components=3)

    # Fit and transform x to visualise inside a 3D feature space
    x_visualisation = pca.fit_transform(x_arr)

    figure = plt.figure()
    axis = Axes3D(figure)

    axis.scatter(x_visualisation[y_arr == 0, 0], x_visualisation[y_arr == 0, 1], x_visualisation[y_arr == 0, 2],
                 label="Class #0",
                 edgecolor=almost_black, facecolor=palette[0], linewidth=0.3, marker="o")
    axis.scatter(x_visualisation[y_arr == 1, 0], x_visualisation[y_arr == 1, 1], x_visualisation[y_arr == 1, 2],
                 label="Class #1",
                 edgecolor=almost_black, facecolor=palette[2], linewidth=0.3, marker="^")
    axis.set_title("PCA to 3 components - data-set 1")

    x_visualisation_two = pca.transform(x_arr_two)
    figure_two = plt.figure()
    axis_two = Axes3D(figure_two)
    axis_two.scatter(x_visualisation_two[y_arr_two == 0, 0], x_visualisation_two[y_arr_two == 0, 1],
                     x_visualisation_two[y_arr_two == 0, 2],
                     label="Class #0", edgecolor=almost_black,
                     facecolor=palette[0], linewidth=0.3, marker="o")
    axis_two.scatter(x_visualisation_two[y_arr_two == 1, 0], x_visualisation_two[y_arr_two == 1, 1],
                     x_visualisation_two[y_arr_two == 1, 2],
                     label="Class #1", edgecolor=almost_black,
                     facecolor=palette[2], linewidth=0.3, marker="^")
    axis_two.set_title("PCA to 3 components - data-set 2")

    plt.show()


def plot_roc_curve_of_classifier(roc_list, data_set_description, classifier_description="classifier"):
    if const.RECORD_RESULTS is True and not (None, None) in roc_list:
        mean_tpr = 0.0
        mean_fpr = np.linspace(0, 1, 100)
        fig = plt.figure(figsize=(12, 10))
        i = 1
        for (tpr, fpr) in roc_list:
            mean_tpr += interp(mean_fpr, fpr, tpr)
            mean_tpr[0] = 0.0
            roc_auc = auc(fpr, tpr)
            plt.plot(fpr, tpr, lw=1, label="ROC fold %d (area = %0.2f)" % (i, roc_auc))
            i += 1

        mean_tpr /= len(roc_list)
        mean_tpr[-1] = 1.0
        mean_auc = auc(mean_fpr, mean_tpr)
        plt.plot(mean_fpr, mean_tpr, "k--", dashes=[8, 4, 2, 4, 2, 4], label="Mean ROC (area = %0.2f)" % mean_auc, lw=2)
        plt.plot([0, 1], [0, 1], "k--", label="Random classification")
        plt.xlim([0.0, 1.0])
        plt.ylim([0.0, 1.05])
        plt.xlabel("False Positive Rate")
        plt.ylabel("True Positive Rate")
        plt.title("{0} ROC curve".format(classifier_description))
        plt.legend(loc="lower right")
        current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        plt.savefig(os.path.dirname(os.path.realpath(__file__)) + "/../results/{0}_{1}_roc_plot_{2}.png".format(data_set_description, classifier_description, current_time),
                    bbox_inches="tight")
        plt.close(fig)


def plot_mean_roc_curve_of_balancers(balancer_roc_list, data_set_description, classifier_description):
    if const.RECORD_RESULTS is True and not (None, None) in balancer_roc_list[0][0]:
        fig = plt.figure(figsize=(12, 10))
        monochrome = (cycler("color", ["k"]) * cycler("marker", [""]) *
                      cycler("linestyle", ["-", "--", "-."]))
        color = iter(cm.brg(np.linspace(0, 1, len(balancer_roc_list))))
        plt.rc("axes", prop_cycle=monochrome)

        for (test_run_roc_list, balancer) in balancer_roc_list:
            mean_tpr = 0.0
            mean_fpr = np.linspace(0, 1, 100)
            for test_result in test_run_roc_list:
                for (tpr, fpr) in test_result:
                    mean_tpr += interp(mean_fpr, fpr, tpr)
                    mean_tpr[0] = 0.0

            mean_tpr /= (len(test_result) * len(test_run_roc_list))
            mean_tpr[-1] = 1.0
            mean_auc = auc(mean_fpr, mean_tpr)
            c = next(color)
            plt.plot(mean_fpr, mean_tpr, c=c, lw=1, alpha=0.7, label="{0} (area = {1:.4f})".format(balancer, mean_auc))

        plt.plot([0, 1], [0, 1], "k--", label="Random classification")
        plt.xlim([0.0, 1.0])
        plt.ylim([0.0, 1.0])
        plt.xlabel("False Positive Rate")
        plt.ylabel("True Positive Rate")
        plt.title("{0} ROC curve for each balancer".format(classifier_description))
        plt.legend(loc="lower right")
        current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        plt.savefig(
            os.path.dirname(os.path.realpath(__file__)) + "/../results/{0}_{1}_roc_balancer_plot_{2}.png".format(data_set_description, classifier_description, current_time),
            bbox_inches="tight")
        plt.close(fig)


def plot_mean_roc_curve_of_classifiers(classifier_roc_list, data_set_description):
    if const.RECORD_RESULTS is True:
        fig = plt.figure(figsize=(8, 6.66))
        monochrome = (cycler("color", ["k"]) * cycler("marker", [""]) *
                      cycler("linestyle", ["-", "--", "-."]))
        color_arr = ["#64B3DE", "#1f78b4", "#6ABF20", "#FBAC44", "#bc1659", "#B9B914", "#33a02c", "#ff7f00", "#6a3d9a", "black", "#b15928", "#e31a1c"]
        plt.rc("axes", prop_cycle=monochrome)
        line_style_index = 0
        color_index = 0

        for (test_run_roc_list, classifier_description) in classifier_roc_list:
            if not (None, None) in test_run_roc_list[0]:
                mean_tpr = 0.0
                mean_fpr = np.linspace(0, 1, 100)
                count = 0
                for roc_list in test_run_roc_list:
                    for (tpr, fpr) in roc_list:
                        mean_tpr += interp(mean_fpr, fpr, tpr)
                        mean_tpr[0] = 0.0
                        count += 1

                mean_tpr /= float(count)
                mean_tpr[-1] = 1.0
                mean_auc = auc(mean_fpr, mean_tpr)
                line_width = 0.5
                if line_style_index == 1:
                    line_width = 0.8
                elif line_style_index == 2:
                    line_width = 1.5

                plt.plot(mean_fpr, mean_tpr, c=color_arr[color_index], lw=line_width, alpha=1, label="{0} ({1:.3f})".format(classifier_description, mean_auc))
                line_style_index = (line_style_index + 1) % 3
                color_index += 1

        plt.locator_params(axis='x', nbins=10)
        plt.locator_params(axis='y', nbins=10)
        plt.plot([0, 1], [0, 1], "k--", label="Random classification", lw=0.8)
        plt.xlim([0.0, 1.0])
        plt.ylim([0.0, 1.0])
        plt.xlabel("False Positive Rate")
        plt.ylabel("True Positive Rate")
        plt.title("ROC curve for each classifier")
        plt.legend(loc="lower right", fancybox=True, frameon=True)
        current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        plt.savefig(os.path.dirname(os.path.realpath(__file__)) + "/../results/{0}_roc_classifier_plot_{1}.png".format(data_set_description, current_time), bbox_inches="tight")
        plt.close(fig)


def plot_balancer_results_per_classifier(data_balancer_results_per_classifier, parameter=(2,"Balanced Accuracy")):
    classifier_arr = []
    color = iter(cm.Set1(np.linspace(0, 1, len(data_balancer_results_per_classifier) + 1)))
    mean_classifier_arr = [0] * len(data_balancer_results_per_classifier[0][1])
    for (classifier_name, data_balancer_results) in data_balancer_results_per_classifier:
        individual_data_balance_plot = []
        x = 0
        for (data_balancer_name, result_arr) in data_balancer_results:
            individual_data_balance_plot.append(result_arr[parameter[0]])  # Average True rate
            mean_classifier_arr[x] += result_arr[parameter[0]]
            x += 1
        classifier_arr.append(individual_data_balance_plot)

    classifier_arr.append([value / float(len(data_balancer_results_per_classifier)) for value in mean_classifier_arr])

    fig = plt.figure(figsize=(12, 10))

    classifiers = np.arange(len(classifier_arr))
    data_balancers = np.arange(len(classifier_arr[0])) * 3
    bar_width = 0.2
    opacity = 0.9

    for i in range(len(classifier_arr)):
        if i + 1 != len(classifier_arr):
            label = data_balancer_results_per_classifier[i][0]
        else:
            label = "Mean classification"

        plt.bar(data_balancers + (i * bar_width), classifier_arr[i], bar_width,
                alpha=opacity,
                color=color.next(),
                label=label)

    plt.locator_params(axis='y', nbins=10)
    plt.xlabel("Data balance algorithm")
    plt.ylabel(parameter[1])
    plt.legend(loc="lower right", fancybox=True, frameon=True)
    plt.title("{0} per data balance algorithm".format(parameter[1]))
    plt.ylim([0.0, 1.00])
    data_balance_labels = [filter(str.isupper, data_balance_name) if data_balance_name != "None" and len(filter(str.isupper, data_balance_name)) < 6 else data_balance_name for
                           (data_balance_name, _) in data_balancer_results_per_classifier[0][1]]
    plt.xticks(data_balancers + (bar_width / 2) * len(classifiers), data_balance_labels)

    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    plt.savefig(os.path.dirname(os.path.realpath(__file__)) + "/../results/data_balancer_results_per_classifier_plot_{0}_{1}.png".format(parameter[1], current_time))
    plt.close(fig)


def plot_kaplan_meier_graph_of_time_to_default(time_to_default, data_set_description=""):
    kmf = KaplanMeierFitter()
    kmf.fit(time_to_default, event_observed=[1] * len(time_to_default))
    ax = kmf.plot(title="{0} Kaplan Meier analysis of time to default".format(data_set_description).replace("_", " "))
    ax.get_figure().set_size_inches(12, 10)
    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    plt.ylim([0.0, 1.00])
    plt.ylabel("Percentage Remaining")
    plt.xlabel("Time to default (days)")
    plt.locator_params(axis='x', nbins=10)

    ax.get_figure().savefig(os.path.dirname(os.path.realpath(__file__)) + "/../results/kaplan_meier_time_to_default_{0}.png".format(current_time), bbox_inches="tight")
    plt.close(ax.get_figure())


def plot_percentage_difference_graph(results, datasets, name_suffix="", parameter="Balanced Accuracy", x_label="Feature selection approach", difference_from="no feature selection", figsize=(16, 5), legend_y=-0.31, label_rotation=0, y_label_pos=-0.4):
    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    file_name = "raw_dump_{0}.txt".format(current_time)
    with open(os.path.dirname(os.path.realpath(__file__)) + "/../results/" + file_name, "wb") as output_file:
        output_file.write(str(results))
    patterns = (None, "////")

    colors = ["#64B3DE", "#1f78b4", "#FBAC44", "#B9B914", "#bc1659", "#33a02c", "#6ABF20", "#ff7f00", "#6a3d9a", "#5a2add", "#b15928", "#e31a1c", "grey"]
    classifier_arr = []
    for i in range(len(results)):
        classifier_arr.append(list())
    index = 0
    for results_per_classifier in results:
        no_feature_selection = results[index][0][1]
        for i in range(len(no_feature_selection) + 1):
            classifier_arr[index].append(list())
        for i in range(1, len(results_per_classifier)):
            data_balancer_results = results_per_classifier[i][1]
            x = 0
            mean_classification = 0
            for result_tuple in data_balancer_results:
                value = result_tuple[0][2] - no_feature_selection[x][0][2]
                classifier_arr[index][x].append(value)
                mean_classification += value
                x += 1
            mean_classification /= float(len(data_balancer_results))
            classifier_arr[index][x].append(mean_classification)
        index += 1

    fig = plt.figure(figsize=figsize)

    classifiers = np.arange(len(classifier_arr[0]))

    bar_width = 0.2
    opacity = 0.9
    num_columns = 1 if len(results) == 1 else 2
    subplt_val = (100 * round(len(results) / 2.0)) + (10 * num_columns) + 1
    print(subplt_val)
    plt.subplots_adjust(hspace=0.4, wspace=0.1)
    ax1 = plt.subplot(subplt_val)

    for i in range(len(classifier_arr[0])):
        if i + 1 != len(classifier_arr[0]):
            label = results[0][0][1][i][1]
        else:
            label = "Mean classification"
        data_balancers = np.arange(len(classifier_arr[0][i])) * 3
        plt.bar(data_balancers + (i * bar_width), classifier_arr[0][i], bar_width,
                alpha=opacity,
                color=colors[i],
                hatch=patterns[i % len(patterns)],
                label=label)

        feature_selection_labels = [results[0][i][0] for i in range(1, len(results[0]))]
        plt.xticks(data_balancers + (bar_width / 2) * len(classifiers), feature_selection_labels, rotation=label_rotation)
        plt.title(datasets[0].replace("_", " "))
        plt.ylabel("Difference in {0} from {1}".format(parameter, difference_from), y=y_label_pos)

    vertical_plt = 0
    for z in range(1, len(results)):
        ax2 = plt.subplot(subplt_val + z, sharey=ax1)
        color = iter(cm.Set1(np.linspace(0, 1, len(no_feature_selection) + 1)))
        for i in range(len(classifier_arr[z])):
            if i + 1 != len(classifier_arr[z]):
                label = results[z][0][1][i][1]
            else:
                label = "Mean classification"
            print(classifier_arr[0])
            print(classifier_arr[z])
            data_balancers = np.arange(len(classifier_arr[z][i])) * 3
            plt.bar(data_balancers + (i * bar_width), classifier_arr[z][i], bar_width,
                    alpha=opacity,
                    color=colors[i],
                    hatch=patterns[i % len(patterns)],
                    label=label)

        feature_selection_labels = [results[z][i][0] for i in range(1, len(results[z]))]
        plt.xticks(data_balancers + (bar_width / 2) * len(classifiers), feature_selection_labels, rotation=label_rotation)
        plt.title(datasets[z].replace("_", " "))

    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

    legend = plt.legend(loc='lower center', bbox_to_anchor=(-0.08, legend_y), fancybox=True, frameon=True, ncol=7)
    legend.get_frame().set_facecolor('#ffffff')

    plt.xlabel(x_label, x=0, y=-2)
    feature_selection_labels = [results[0][i][0] for i in range(1, len(results[0]))]


    plt.locator_params(axis='y', nbins=15)
    name = "{3}_results_per_classifier_plot{0}_{4}_{1}_{2}".format(name_suffix, parameter, current_time, x_label, datasets)
    plt.savefig(os.path.dirname(os.path.realpath(__file__)) + "/../results/{0}".format(name.replace(" ", "_")), bbox_extra_artists=(legend,), bbox_inches='tight')
    plt.close(fig)


def plot_time_to_default_results(time_to_default_results_per_classifier, parameter="Difference in balanced accuracy from no feature selection"):
    color = iter(cm.Set1(np.linspace(0, 1, len(time_to_default_results_per_classifier[0][1]) + 1)))
    classifier_arr = []
    for i in range(len(time_to_default_results_per_classifier[0][1]) + 1):
        classifier_arr.append(list())

    for i in range(0, len(time_to_default_results_per_classifier)):
        data_balancer_results = time_to_default_results_per_classifier[i][1]
        x = 0
        mean_classification = 0
        for (result_arr, data_balancer_name, _) in data_balancer_results:
            result = result_arr[2]
            classifier_arr[x].append(result)
            mean_classification += result
            x += 1
        mean_classification /= float(len(data_balancer_results))
        classifier_arr[x].append(mean_classification)

    fig = plt.figure(figsize=(12, 10))

    classifiers = np.arange(len(classifier_arr))
    data_balancers = np.arange(len(classifier_arr[0])) * 3
    bar_width = 0.2
    opacity = 0.9

    for i in range(len(classifier_arr)):
        if i == len(classifier_arr) - 1:
            label = "Mean classification"
        else:
            label = time_to_default_results_per_classifier[0][1][i][1]
        plt.bar(data_balancers + (i * bar_width), classifier_arr[i], bar_width,
                alpha=opacity,
                color=color.next(),
                label=label)

    plt.locator_params(axis='y', nbins=10)
    plt.xlabel("Default range (days)")
    plt.ylabel(parameter)
    plt.ylim([0.0, 1.00])
    plt.legend(loc="lower right", fancybox=True, frameon=True)
    plt.title("{0} when trained on different default ranges".format(parameter))
    feature_selection_labels = [time_to_default_results_per_classifier[i][0] for i in range(0, len(time_to_default_results_per_classifier))]
    plt.xticks(data_balancers + (bar_width / 2) * len(classifiers), feature_selection_labels)

    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    plt.savefig(os.path.dirname(os.path.realpath(__file__)) + "/../results/time_to_default_results_per_classifier_plot_{0}_{1}.png".format(parameter, current_time))
    plt.close(fig)


def visualise_dataset_classifier_results(dataset_results):
    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    file_name = "raw_dump_{0}.txt".format(current_time)
    with open(os.path.dirname(os.path.realpath(__file__)) + "/../results/" + file_name, "wb") as output_file:
        output_file.write(str(dataset_results))
    sns.set(style='ticks')
    fig = plt.figure(figsize=(10, 10))
    ax = fig.add_subplot(1, 1, 1)
    markers = ["s", "o", "^", "*"]
    colors = ["#64B3DE", "#1f78b4", "#B9B914", "#FBAC44", "#bc1659", "#33a02c", "#6ABF20", "#ff7f00", "#6a3d9a", "grey", "#b15928", "#e31a1c", "black"]
    color_dict = {}
    index = 0
    for (_, classifier_description) in dataset_results[0][1]:
        color_dict[classifier_description] = colors[index]
        index += 1

    hatches = [None, "////", ".."]

    # Move left y-axis and bottom x-axis to centre, passing through (0,0)
    ax.spines['left'].set_position('center')
    ax.spines['bottom'].set_position('center')

    # Eliminate upper and right axes
    ax.spines['right'].set_color('none')
    ax.spines['top'].set_color('none')

    # Show ticks in the left and lower axes only
    ax.xaxis.set_ticks_position('bottom')
    ax.yaxis.set_ticks_position('left')
    ax.set_axis_on()
    ax.spines['left'].set_color('black')
    ax.spines['bottom'].set_color('black')
    plt.xlabel("Difference in TPR")
    plt.ylabel("Difference in TNR")

    ax.xaxis.set_label_coords(0.1, 0.52)
    ax.yaxis.set_label_coords(0.53, 0.9)

    plt.ylim(-0.2, 0.2)
    plt.xlim(-0.2, 0.2)
    data_set_labels = []
    classifier_labels = []
    data_set_index = 0
    for (data_set, dataset_result) in dataset_results:
        data_set_labels.append(mlines.Line2D(range(1), range(1), color="white", marker=markers[data_set_index], markeredgecolor="black", markeredgewidth=1.0, label=data_set.replace("_", " ")))
        median_true_pos = np.median(np.array([result_arr[3] for (result_arr, classifier_description) in dataset_result]))
        median_true_neg = np.median(np.array([result_arr[4] for (result_arr, classifier_description) in dataset_result]))

        i = 0
        for (result_arr, classifier_description) in dataset_result:
            if data_set_index == 0:
                classifier_labels.append(mpatches.Patch(facecolor=color_dict[classifier_description], hatch=hatches[i % len(hatches)], label=classifier_description, alpha=0.8, edgecolor="black"))
            ax.scatter(result_arr[3] - median_true_pos, result_arr[4] - median_true_neg, marker=markers[data_set_index], hatch=hatches[i % len(hatches)], s=200, alpha=0.8, color=colors[i], edgecolor="black", zorder=data_set_index, lw=0.8)
            i += 1
        data_set_index += 1

    plt.legend(handles=data_set_labels + classifier_labels)
    sns.despine()
    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    plt.savefig(os.path.dirname(os.path.realpath(__file__)) + "/../results/classifier_dataset_plt_{0}.png".format(current_time), bbox_inches='tight')
    plt.close(fig)


def visualise_dataset_balancer_results(results, range=(-0.5, 0.5), colors=("#64B3DE", "#1f78b4", "#B9B914", "#FBAC44", "#bc1659", "#33a02c", "grey" , "#b15928", "#6a3d9a", "#e31a1c", "#6ABF20", "#ff7f00", "#6a3d9a"), exclude=("SVM (linear)", "Logistic regression", "Random forest")):
    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    file_name = "raw_dump_{0}.txt".format(current_time)
    with open(os.path.dirname(os.path.realpath(__file__)) + "/../results/" + file_name, "wb") as output_file:
        output_file.write(str(results))
    sns.set(style='ticks')
    fig = plt.figure(figsize=(8, 8))
    ax = fig.add_subplot(1, 1, 1)
    markers = ["s", "d", "o", "^", "*"]
    size = [150, 200, 200, 200, 250]
    hatches = [None, "////", ".."]

    # Move left y-axis and bottom x-axis to centre, passing through (0,0)
    ax.spines['left'].set_position('center')
    ax.spines['bottom'].set_position(("axes", 0.5))

    # Eliminate upper and right axes
    ax.spines['right'].set_color('none')
    ax.spines['top'].set_color('none')

    # Show ticks in the left and lower axes only
    ax.xaxis.set_ticks_position('bottom')
    ax.yaxis.set_ticks_position('left')
    ax.set_axis_on()
    ax.spines['left'].set_color('black')
    ax.spines['bottom'].set_color('black')
    plt.xlabel("Difference in TPR")
    plt.ylabel("Difference in TNR")

    ax.xaxis.set_label_coords(0.1, 0.53)
    ax.yaxis.set_label_coords(0.53, 0.9)

    plt.ylim(range[0], range[1])
    plt.xlim(range[0], range[1])
    balancer_labels = ([], [])
    classifier_labels = ([], [])
    data_set_index = 0
    for (data_set, dataset_result) in results:

        none_true_pos_per_classifier = {}
        none_true_neg_per_classifier = {}

        for (classifier_description, result_arr) in dataset_result:
            for (balancer_description, results) in result_arr:
                if balancer_description == "None":
                    none_true_pos_per_classifier[classifier_description] = results[3]
                    none_true_neg_per_classifier[classifier_description] = results[4]
                    break

        i = 0
        for (classifier_description, result_arr) in dataset_result:
            if classifier_description in exclude:
                continue
            balancer_index = 0
            for (balancer_description, results) in result_arr:
                if balancer_description != "None":
                    if data_set_index == 0 and balancer_index == 0:
                        classifier_labels[0].append(mpatches.Patch(color=colors[i], label=classifier_description, alpha=0.8))
                        classifier_labels[1].append(classifier_description)
                    ax.scatter(results[3] -  none_true_pos_per_classifier[classifier_description], results[4] - none_true_neg_per_classifier[classifier_description], marker=markers[balancer_index % len(markers)], hatch=hatches[balancer_index % len(hatches)], s=size[balancer_index % len(markers)], alpha=0.8, color=colors[i], edgecolor="black" if colors[i] != "black" else "grey", zorder=balancer_index % len(markers), lw=0.8)
                    pt = ax.scatter(-99999999999, -9999999999, marker=markers[balancer_index % len(markers)], hatch=hatches[balancer_index % len(hatches)], s=200, alpha=0.8, color="white", edgecolor="black", zorder=data_set_index, lw=0.8)
                    if i == 0:
                        balancer_labels[0].append(pt)
                        balancer_labels[1].append(balancer_description)
                    balancer_index += 1
            i += 1
        data_set_index += 1
    legend = plt.legend(balancer_labels[0] + classifier_labels[0], balancer_labels[1] + classifier_labels[1], loc='lower center', bbox_to_anchor=(0.5, -0.2), fancybox=False, frameon=False, ncol=6)
    legend.get_frame().set_facecolor('#ffffff')

    sns.despine()
    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    plt.savefig(os.path.dirname(os.path.realpath(__file__)) + "/../results/classifier_dataset_plt_{0}.png".format(current_time), bbox_extra_artists=((legend,)), bbox_inches='tight')
    plt.close(fig)


def visualise_dataset_balancer_results_multi_dataset(dataset_results):
    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    file_name = "raw_dump_{0}.txt".format(current_time)
    with open(os.path.dirname(os.path.realpath(__file__)) + "/../results/" + file_name, "wb") as output_file:
        output_file.write(str(dataset_results))
    sns.set(style='ticks')
    fig = plt.figure(figsize=(10, 10))
    ax = fig.add_subplot(1, 1, 1)
    markers = ["s", "o", "^", "d", "*"]
    sizes = [150, 200, 200, 200, 250]
    colors = ["#64B3DE", "#1f78b4", "#B9B914", "#FBAC44", "#bc1659", "#33a02c", "#6ABF20", "#ff7f00", "#6a3d9a", "grey", "#b15928", "#e31a1c", "black"]
    hatches = [None, "////", ".."]
    color_dict = {}
    index = 0
    for (classifier_description, result_arr) in dataset_results[0][1]:
        color_dict[classifier_description] = colors[index]
        index += 1

    # Move left y-axis and bottom x-axis to centre, passing through (0,0)
    ax.spines['left'].set_position('center')
    ax.spines['bottom'].set_position(("axes", 0.5))

    # Eliminate upper and right axes
    ax.spines['right'].set_color('none')
    ax.spines['top'].set_color('none')

    # Show ticks in the left and lower axes only
    ax.xaxis.set_ticks_position('bottom')
    ax.yaxis.set_ticks_position('left')
    ax.set_axis_on()
    ax.spines['left'].set_color('black')
    ax.spines['bottom'].set_color('black')
    plt.xlabel("Difference in TPR")
    plt.ylabel("Difference in TNR")

    ax.xaxis.set_label_coords(0.1, 0.53)
    ax.yaxis.set_label_coords(0.53, 0.9)

    plt.ylim(-0.3, 0.3)
    plt.xlim(-0.3, 0.3)
    data_set_labels = ([], [])
    balancer_labels = ([], [])
    data_set_index = 0
    for (data_set, dataset_result) in dataset_results:
        balancer_result_pos = {}
        balancer_result_neg = {}

        for (classifier_description, result_arr) in dataset_result:
            for (balancer_description, results) in result_arr:
                if balancer_description in balancer_result_pos:
                    balancer_result_pos[balancer_description] = balancer_result_pos[balancer_description] + results[3]
                    balancer_result_neg[balancer_description] = balancer_result_neg[balancer_description] + results[4]
                else:
                    balancer_result_pos[balancer_description] = results[3]
                    balancer_result_neg[balancer_description] = results[4]

        for (balancer_description, _) in dataset_result[0][1]:
            balancer_result_pos[balancer_description] = balancer_result_pos[balancer_description] / float(len(dataset_result))
            balancer_result_neg[balancer_description] = balancer_result_neg[balancer_description] / float(len(dataset_result))

        true_pos_arr = [value for _, value in balancer_result_pos.iteritems()]
        true_neg_arr = [value for _, value in balancer_result_neg.iteritems()]

        i = 0
        hatch_index = 0
        for key, value in balancer_result_pos.iteritems():
            if key != "None":
                if i != 0 and hatch_index == 0 and i % len(colors) == 0:
                    hatch_index += 1

                if data_set_index == 0:
                    balancer_labels[0].append(mpatches.Patch(facecolor=colors[i % len(colors)], hatch=hatches[hatch_index], label=key, alpha=0.8, edgecolor="black"))
                    balancer_labels[1].append(key)

                ax.scatter(value - balancer_result_pos["None"], balancer_result_neg[key] - balancer_result_neg["None"], marker=markers[data_set_index % len(markers)], hatch=hatches[hatch_index], s=sizes[data_set_index % len(markers)], alpha=0.8, color=colors[i % len(colors)], edgecolor="black" if colors[i % len(colors)] != "black" else "grey", zorder=i % len(markers), lw=0.8)
                pt = ax.scatter(-99999999999, -9999999999, marker=markers[data_set_index % len(markers)], s=sizes[data_set_index % len(markers)], alpha=0.8, color="white", edgecolor="black", zorder=data_set_index, lw=0.8)
                if i == 0:
                    data_set_labels[0].append(pt)
                    data_set_labels[1].append(data_set)
                i += 1
                hatch_index = (hatch_index + 1) % len(hatches)
        data_set_index += 1
    legend = plt.legend(data_set_labels[0] + balancer_labels[0], data_set_labels[1] + balancer_labels[1], loc='upper right', bbox_to_anchor=(1, 1), fancybox=False, frameon=False, ncol=1)
    legend.get_frame().set_facecolor('#ffffff')

    sns.despine()
    current_time = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    plt.savefig(os.path.dirname(os.path.realpath(__file__)) + "/../results/classifier_dataset_plt_{0}.png".format(current_time), bbox_extra_artists=((legend,)), bbox_inches='tight')
    plt.close(fig)


if __name__ == "__main__":
    results = [[(None, [([0.26182234057913972, 0.2587804639070645, 0.6891357664883594, 0.6418803418803418, 0.736391191096377, 0.263608808903623, 0.35811965811965807, 0.0, 0.0, 0.0, 0.0, 0.0, 0.902103753539687, 0.043229189598224305], 'AdaBoost', None, OrderedDict([(u'Age_21 and younger', [5, 1, 1, 1, 1, 1]), (u'Age_22 to 26', [5, 2, 2, 2, 2, 2]), (u'Age_27 to 37', [5, 3, 3, 3, 3, 3]), (u'Age_38 and older', [5, 4, 4, 4, 4, 4]), (u'Sex_Female', [5, 5, 5, 5, 5, 5]), (u'Sex_Male', [5, 6, 6, 6, 6, 6]), (u'Marital Status_Divorced/separated', [5, 7, 7, 7, 7, 7]), (u'Marital Status_Married/cohabitating', [5, 8, 8, 8, 8, 8]), (u'Marital Status_Single', [5, 9, 9, 9, 9, 9]), (u'Marital Status_Widowed', [5, 10, 10, 10, 10, 10]), (u'Hx of Tobacco Use_Currently smokes', [5, 11, 11, 11, 11, 11]), (u'Hx of Tobacco Use_Never smoked', [5, 12, 12, 12, 12, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 13, 13, 13, 13, 13]), (u'Body Mass Index_Normal', [5, 14, 14, 14, 14, 14]), (u'Body Mass Index_Overweight/Obese', [5, 15, 15, 15, 15, 15]), (u'Body Mass Index_Underweight', [5, 16, 16, 16, 16, 16]), (u'HIV Status_Negative', [5, 17, 17, 17, 17, 17]), (u'HIV Status_Positive', [5, 18, 18, 18, 18, 18]), (u'HIV Status_Test not done', [5, 19, 19, 19, 19, 19]), (u'Prison Hx', [5, 20, 20, 20, 20, 20]), (u'Completed Secondary Education', [5, 21, 21, 21, 21, 21]), (u'Alcohol Use at Least Once Per Week', [5, 22, 22, 22, 22, 22]), (u'History of Drug Use', [5, 23, 23, 23, 23, 23]), (u'Hx of Rehab', [5, 24, 24, 24, 24, 24]), (u'MDR-TB', [5, 25, 25, 25, 25, 25]), (u'Hx Chronic Disease', [5, 26, 26, 26, 26, 26]), (u'Hx Diabetes Melitus', [5, 27, 27, 27, 27, 27])]), None), ([0.29613577918924927, 0.45668123501402197, 0.7071490272034908, 0.6418803418803419, 0.7724177125266397, 0.22758228747336012, 0.35811965811965807, 0.4256410256410256, 0.5019512195121951, 0.0865403741416055, 0.149002849002849, 0.149002849002849, 3.374656671877778, 0.04048531545666882], 'Artificial neural network', None, OrderedDict([(u'Age_21 and younger', [5, 1, 1, 1, 1, 1]), (u'Age_22 to 26', [5, 2, 2, 2, 2, 2]), (u'Age_27 to 37', [5, 3, 3, 3, 3, 3]), (u'Age_38 and older', [5, 4, 4, 4, 4, 4]), (u'Sex_Female', [5, 5, 5, 5, 5, 5]), (u'Sex_Male', [5, 6, 6, 6, 6, 6]), (u'Marital Status_Divorced/separated', [5, 7, 7, 7, 7, 7]), (u'Marital Status_Married/cohabitating', [5, 8, 8, 8, 8, 8]), (u'Marital Status_Single', [5, 9, 9, 9, 9, 9]), (u'Marital Status_Widowed', [5, 10, 10, 10, 10, 10]), (u'Hx of Tobacco Use_Currently smokes', [5, 11, 11, 11, 11, 11]), (u'Hx of Tobacco Use_Never smoked', [5, 12, 12, 12, 12, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 13, 13, 13, 13, 13]), (u'Body Mass Index_Normal', [5, 14, 14, 14, 14, 14]), (u'Body Mass Index_Overweight/Obese', [5, 15, 15, 15, 15, 15]), (u'Body Mass Index_Underweight', [5, 16, 16, 16, 16, 16]), (u'HIV Status_Negative', [5, 17, 17, 17, 17, 17]), (u'HIV Status_Positive', [5, 18, 18, 18, 18, 18]), (u'HIV Status_Test not done', [5, 19, 19, 19, 19, 19]), (u'Prison Hx', [5, 20, 20, 20, 20, 20]), (u'Completed Secondary Education', [5, 21, 21, 21, 21, 21]), (u'Alcohol Use at Least Once Per Week', [5, 22, 22, 22, 22, 22]), (u'History of Drug Use', [5, 23, 23, 23, 23, 23]), (u'Hx of Rehab', [5, 24, 24, 24, 24, 24]), (u'MDR-TB', [5, 25, 25, 25, 25, 25]), (u'Hx Chronic Disease', [5, 26, 26, 26, 26, 26]), (u'Hx Diabetes Melitus', [5, 27, 27, 27, 27, 27])]), None), ([0.26280257147196168, 0.59147064776337754, 0.6830123600713229, 0.5965811965811966, 0.7694435235614492, 0.23055647643855076, 0.40341880341880343, 0.5296296296296296, 0.6546530902202227, 0.1537058962822638, 0.3139601139601139, 0.3139601139601139, 0.004657399360599834, 0.03610705612115936], 'Bernoulli Naive Bayes', None, OrderedDict([(u'Age_21 and younger', [5, 1, 1, 1, 1, 1]), (u'Age_22 to 26', [5, 2, 2, 2, 2, 2]), (u'Age_27 to 37', [5, 3, 3, 3, 3, 3]), (u'Age_38 and older', [5, 4, 4, 4, 4, 4]), (u'Sex_Female', [5, 5, 5, 5, 5, 5]), (u'Sex_Male', [5, 6, 6, 6, 6, 6]), (u'Marital Status_Divorced/separated', [5, 7, 7, 7, 7, 7]), (u'Marital Status_Married/cohabitating', [5, 8, 8, 8, 8, 8]), (u'Marital Status_Single', [5, 9, 9, 9, 9, 9]), (u'Marital Status_Widowed', [5, 10, 10, 10, 10, 10]), (u'Hx of Tobacco Use_Currently smokes', [5, 11, 11, 11, 11, 11]), (u'Hx of Tobacco Use_Never smoked', [5, 12, 12, 12, 12, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 13, 13, 13, 13, 13]), (u'Body Mass Index_Normal', [5, 14, 14, 14, 14, 14]), (u'Body Mass Index_Overweight/Obese', [5, 15, 15, 15, 15, 15]), (u'Body Mass Index_Underweight', [5, 16, 16, 16, 16, 16]), (u'HIV Status_Negative', [5, 17, 17, 17, 17, 17]), (u'HIV Status_Positive', [5, 18, 18, 18, 18, 18]), (u'HIV Status_Test not done', [5, 19, 19, 19, 19, 19]), (u'Prison Hx', [5, 20, 20, 20, 20, 20]), (u'Completed Secondary Education', [5, 21, 21, 21, 21, 21]), (u'Alcohol Use at Least Once Per Week', [5, 22, 22, 22, 22, 22]), (u'History of Drug Use', [5, 23, 23, 23, 23, 23]), (u'Hx of Rehab', [5, 24, 24, 24, 24, 24]), (u'MDR-TB', [5, 25, 25, 25, 25, 25]), (u'Hx Chronic Disease', [5, 26, 26, 26, 26, 26]), (u'Hx Diabetes Melitus', [5, 27, 27, 27, 27, 27])]), None), ([0.20676603480490396, 0.4105813685120403, 0.6493380301739288, 0.5680911680911681, 0.7305848922566895, 0.26941510774331046, 0.4319088319088319, 0.4113960113960114, 0.4798531849396164, 0.08652616623253612, 0.1943019943019943, 0.1943019943019943, 0.004285205867073479, 0.053824499380128434], 'Decision Tree', None, OrderedDict([(u'Age_21 and younger', [5, 1, 1, 1, 1, 1]), (u'Age_22 to 26', [5, 2, 2, 2, 2, 2]), (u'Age_27 to 37', [5, 3, 3, 3, 3, 3]), (u'Age_38 and older', [5, 4, 4, 4, 4, 4]), (u'Sex_Female', [5, 5, 5, 5, 5, 5]), (u'Sex_Male', [5, 6, 6, 6, 6, 6]), (u'Marital Status_Divorced/separated', [5, 7, 7, 7, 7, 7]), (u'Marital Status_Married/cohabitating', [5, 8, 8, 8, 8, 8]), (u'Marital Status_Single', [5, 9, 9, 9, 9, 9]), (u'Marital Status_Widowed', [5, 10, 10, 10, 10, 10]), (u'Hx of Tobacco Use_Currently smokes', [5, 11, 11, 11, 11, 11]), (u'Hx of Tobacco Use_Never smoked', [5, 12, 12, 12, 12, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 13, 13, 13, 13, 13]), (u'Body Mass Index_Normal', [5, 14, 14, 14, 14, 14]), (u'Body Mass Index_Overweight/Obese', [5, 15, 15, 15, 15, 15]), (u'Body Mass Index_Underweight', [5, 16, 16, 16, 16, 16]), (u'HIV Status_Negative', [5, 17, 17, 17, 17, 17]), (u'HIV Status_Positive', [5, 18, 18, 18, 18, 18]), (u'HIV Status_Test not done', [5, 19, 19, 19, 19, 19]), (u'Prison Hx', [5, 20, 20, 20, 20, 20]), (u'Completed Secondary Education', [5, 21, 21, 21, 21, 21]), (u'Alcohol Use at Least Once Per Week', [5, 22, 22, 22, 22, 22]), (u'History of Drug Use', [5, 23, 23, 23, 23, 23]), (u'Hx of Rehab', [5, 24, 24, 24, 24, 24]), (u'MDR-TB', [5, 25, 25, 25, 25, 25]), (u'Hx Chronic Disease', [5, 26, 26, 26, 26, 26]), (u'Hx Diabetes Melitus', [5, 27, 27, 27, 27, 27])]), None), ([0.28885222247370379, 0.43532627700261323, 0.7000638613804611, 0.61994301994302, 0.7801847028179019, 0.21981529718209805, 0.3800569800569801, 0.30626780626780625, 0.410528060620412, 0.07585129055174047, 0.14188034188034188, 0.14188034188034188, 0.1880066155657779, 0.0501265164118462], 'Extreme Learning Machine', None, OrderedDict([(u'Age_21 and younger', [5, 1, 1, 1, 1, 1]), (u'Age_22 to 26', [5, 2, 2, 2, 2, 2]), (u'Age_27 to 37', [5, 3, 3, 3, 3, 3]), (u'Age_38 and older', [5, 4, 4, 4, 4, 4]), (u'Sex_Female', [5, 5, 5, 5, 5, 5]), (u'Sex_Male', [5, 6, 6, 6, 6, 6]), (u'Marital Status_Divorced/separated', [5, 7, 7, 7, 7, 7]), (u'Marital Status_Married/cohabitating', [5, 8, 8, 8, 8, 8]), (u'Marital Status_Single', [5, 9, 9, 9, 9, 9]), (u'Marital Status_Widowed', [5, 10, 10, 10, 10, 10]), (u'Hx of Tobacco Use_Currently smokes', [5, 11, 11, 11, 11, 11]), (u'Hx of Tobacco Use_Never smoked', [5, 12, 12, 12, 12, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 13, 13, 13, 13, 13]), (u'Body Mass Index_Normal', [5, 14, 14, 14, 14, 14]), (u'Body Mass Index_Overweight/Obese', [5, 15, 15, 15, 15, 15]), (u'Body Mass Index_Underweight', [5, 16, 16, 16, 16, 16]), (u'HIV Status_Negative', [5, 17, 17, 17, 17, 17]), (u'HIV Status_Positive', [5, 18, 18, 18, 18, 18]), (u'HIV Status_Test not done', [5, 19, 19, 19, 19, 19]), (u'Prison Hx', [5, 20, 20, 20, 20, 20]), (u'Completed Secondary Education', [5, 21, 21, 21, 21, 21]), (u'Alcohol Use at Least Once Per Week', [5, 22, 22, 22, 22, 22]), (u'History of Drug Use', [5, 23, 23, 23, 23, 23]), (u'Hx of Rehab', [5, 24, 24, 24, 24, 24]), (u'MDR-TB', [5, 25, 25, 25, 25, 25]), (u'Hx Chronic Disease', [5, 26, 26, 26, 26, 26]), (u'Hx Diabetes Melitus', [5, 27, 27, 27, 27, 27])]), None), ([0.31427343933824903, 0.71152494195777161, 0.7171705144733796, 0.6492877492877492, 0.7850532796590102, 0.21494672034098983, 0.35071225071225065, 0.6267806267806267, 0.7519914752545583, 0.1964527587023443, 0.33589743589743587, 0.33589743589743587, 0.008852047200051505, 0.05102668131116181], 'Gaussian Naive Bayes', None, OrderedDict([(u'Age_21 and younger', [5, 1, 1, 1, 1, 1]), (u'Age_22 to 26', [5, 2, 2, 2, 2, 2]), (u'Age_27 to 37', [5, 3, 3, 3, 3, 3]), (u'Age_38 and older', [5, 4, 4, 4, 4, 4]), (u'Sex_Female', [5, 5, 5, 5, 5, 5]), (u'Sex_Male', [5, 6, 6, 6, 6, 6]), (u'Marital Status_Divorced/separated', [5, 7, 7, 7, 7, 7]), (u'Marital Status_Married/cohabitating', [5, 8, 8, 8, 8, 8]), (u'Marital Status_Single', [5, 9, 9, 9, 9, 9]), (u'Marital Status_Widowed', [5, 10, 10, 10, 10, 10]), (u'Hx of Tobacco Use_Currently smokes', [5, 11, 11, 11, 11, 11]), (u'Hx of Tobacco Use_Never smoked', [5, 12, 12, 12, 12, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 13, 13, 13, 13, 13]), (u'Body Mass Index_Normal', [5, 14, 14, 14, 14, 14]), (u'Body Mass Index_Overweight/Obese', [5, 15, 15, 15, 15, 15]), (u'Body Mass Index_Underweight', [5, 16, 16, 16, 16, 16]), (u'HIV Status_Negative', [5, 17, 17, 17, 17, 17]), (u'HIV Status_Positive', [5, 18, 18, 18, 18, 18]), (u'HIV Status_Test not done', [5, 19, 19, 19, 19, 19]), (u'Prison Hx', [5, 20, 20, 20, 20, 20]), (u'Completed Secondary Education', [5, 21, 21, 21, 21, 21]), (u'Alcohol Use at Least Once Per Week', [5, 22, 22, 22, 22, 22]), (u'History of Drug Use', [5, 23, 23, 23, 23, 23]), (u'Hx of Rehab', [5, 24, 24, 24, 24, 24]), (u'MDR-TB', [5, 25, 25, 25, 25, 25]), (u'Hx Chronic Disease', [5, 26, 26, 26, 26, 26]), (u'Hx Diabetes Melitus', [5, 27, 27, 27, 27, 27])]), None), ([0.20596309940928745, 0.33736660929432011, 0.647489342381599, 0.5595441595441596, 0.7354345252190386, 0.26456547478096143, 0.4404558404558404, 0.3279202279202279, 0.0962917357328913, 0.052517167890125505, 0.045014245014245016, 0.045014245014245016, 0.0017839931441541168, 0.031713080992839274], 'K-nearest neighbours', None, OrderedDict([(u'Age_21 and younger', [5, 1, 1, 1, 1, 1]), (u'Age_22 to 26', [5, 2, 2, 2, 2, 2]), (u'Age_27 to 37', [5, 3, 3, 3, 3, 3]), (u'Age_38 and older', [5, 4, 4, 4, 4, 4]), (u'Sex_Female', [5, 5, 5, 5, 5, 5]), (u'Sex_Male', [5, 6, 6, 6, 6, 6]), (u'Marital Status_Divorced/separated', [5, 7, 7, 7, 7, 7]), (u'Marital Status_Married/cohabitating', [5, 8, 8, 8, 8, 8]), (u'Marital Status_Single', [5, 9, 9, 9, 9, 9]), (u'Marital Status_Widowed', [5, 10, 10, 10, 10, 10]), (u'Hx of Tobacco Use_Currently smokes', [5, 11, 11, 11, 11, 11]), (u'Hx of Tobacco Use_Never smoked', [5, 12, 12, 12, 12, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 13, 13, 13, 13, 13]), (u'Body Mass Index_Normal', [5, 14, 14, 14, 14, 14]), (u'Body Mass Index_Overweight/Obese', [5, 15, 15, 15, 15, 15]), (u'Body Mass Index_Underweight', [5, 16, 16, 16, 16, 16]), (u'HIV Status_Negative', [5, 17, 17, 17, 17, 17]), (u'HIV Status_Positive', [5, 18, 18, 18, 18, 18]), (u'HIV Status_Test not done', [5, 19, 19, 19, 19, 19]), (u'Prison Hx', [5, 20, 20, 20, 20, 20]), (u'Completed Secondary Education', [5, 21, 21, 21, 21, 21]), (u'Alcohol Use at Least Once Per Week', [5, 22, 22, 22, 22, 22]), (u'History of Drug Use', [5, 23, 23, 23, 23, 23]), (u'Hx of Rehab', [5, 24, 24, 24, 24, 24]), (u'MDR-TB', [5, 25, 25, 25, 25, 25]), (u'Hx Chronic Disease', [5, 26, 26, 26, 26, 26]), (u'Hx Diabetes Melitus', [5, 27, 27, 27, 27, 27])]), None), ([0.28699944069666899, 0.46109009969567527, 0.7002152167650629, 0.627065527065527, 0.7733649064645987, 0.22663509353540134, 0.37293447293447296, 0.433048433048433, 0.499010182334833, 0.0894577314705186, 0.1564102564102564, 0.1564102564102564, 0.044341738225116764, 0.04844249659192803], 'Logistic regression', None, OrderedDict([(u'Age_21 and younger', [5, 1, 1, 1, 1, 1]), (u'Age_22 to 26', [5, 2, 2, 2, 2, 2]), (u'Age_27 to 37', [5, 3, 3, 3, 3, 3]), (u'Age_38 and older', [5, 4, 4, 4, 4, 4]), (u'Sex_Female', [5, 5, 5, 5, 5, 5]), (u'Sex_Male', [5, 6, 6, 6, 6, 6]), (u'Marital Status_Divorced/separated', [5, 7, 7, 7, 7, 7]), (u'Marital Status_Married/cohabitating', [5, 8, 8, 8, 8, 8]), (u'Marital Status_Single', [5, 9, 9, 9, 9, 9]), (u'Marital Status_Widowed', [5, 10, 10, 10, 10, 10]), (u'Hx of Tobacco Use_Currently smokes', [5, 11, 11, 11, 11, 11]), (u'Hx of Tobacco Use_Never smoked', [5, 12, 12, 12, 12, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 13, 13, 13, 13, 13]), (u'Body Mass Index_Normal', [5, 14, 14, 14, 14, 14]), (u'Body Mass Index_Overweight/Obese', [5, 15, 15, 15, 15, 15]), (u'Body Mass Index_Underweight', [5, 16, 16, 16, 16, 16]), (u'HIV Status_Negative', [5, 17, 17, 17, 17, 17]), (u'HIV Status_Positive', [5, 18, 18, 18, 18, 18]), (u'HIV Status_Test not done', [5, 19, 19, 19, 19, 19]), (u'Prison Hx', [5, 20, 20, 20, 20, 20]), (u'Completed Secondary Education', [5, 21, 21, 21, 21, 21]), (u'Alcohol Use at Least Once Per Week', [5, 22, 22, 22, 22, 22]), (u'History of Drug Use', [5, 23, 23, 23, 23, 23]), (u'Hx of Rehab', [5, 24, 24, 24, 24, 24]), (u'MDR-TB', [5, 25, 25, 25, 25, 25]), (u'Hx Chronic Disease', [5, 26, 26, 26, 26, 26]), (u'Hx Diabetes Melitus', [5, 27, 27, 27, 27, 27])]), None), ([0.26074000054052937, 0.35879955900133192, 0.6863191395916945, 0.6264957264957264, 0.7461425526876628, 0.2538574473123372, 0.3735042735042735, 0.3364672364672364, 0.24136395927066062, 0.06907885389533507, 0.09658119658119657, 0.09658119658119657, 0.3983122398531995, 0.03430504141889355], 'Random forest', None, OrderedDict([(u'Age_21 and younger', [5, 1, 1, 1, 1, 1]), (u'Age_22 to 26', [5, 2, 2, 2, 2, 2]), (u'Age_27 to 37', [5, 3, 3, 3, 3, 3]), (u'Age_38 and older', [5, 4, 4, 4, 4, 4]), (u'Sex_Female', [5, 5, 5, 5, 5, 5]), (u'Sex_Male', [5, 6, 6, 6, 6, 6]), (u'Marital Status_Divorced/separated', [5, 7, 7, 7, 7, 7]), (u'Marital Status_Married/cohabitating', [5, 8, 8, 8, 8, 8]), (u'Marital Status_Single', [5, 9, 9, 9, 9, 9]), (u'Marital Status_Widowed', [5, 10, 10, 10, 10, 10]), (u'Hx of Tobacco Use_Currently smokes', [5, 11, 11, 11, 11, 11]), (u'Hx of Tobacco Use_Never smoked', [5, 12, 12, 12, 12, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 13, 13, 13, 13, 13]), (u'Body Mass Index_Normal', [5, 14, 14, 14, 14, 14]), (u'Body Mass Index_Overweight/Obese', [5, 15, 15, 15, 15, 15]), (u'Body Mass Index_Underweight', [5, 16, 16, 16, 16, 16]), (u'HIV Status_Negative', [5, 17, 17, 17, 17, 17]), (u'HIV Status_Positive', [5, 18, 18, 18, 18, 18]), (u'HIV Status_Test not done', [5, 19, 19, 19, 19, 19]), (u'Prison Hx', [5, 20, 20, 20, 20, 20]), (u'Completed Secondary Education', [5, 21, 21, 21, 21, 21]), (u'Alcohol Use at Least Once Per Week', [5, 22, 22, 22, 22, 22]), (u'History of Drug Use', [5, 23, 23, 23, 23, 23]), (u'Hx of Rehab', [5, 24, 24, 24, 24, 24]), (u'MDR-TB', [5, 25, 25, 25, 25, 25]), (u'Hx Chronic Disease', [5, 26, 26, 26, 26, 26]), (u'Hx Diabetes Melitus', [5, 27, 27, 27, 27, 27])]), None), ([0.25524749457645013, 0.37517102623778487, 0.6791643846983653, 0.5965811965811966, 0.761747572815534, 0.23825242718446607, 0.40341880341880343, 0.3282051282051282, 0.2597158418186124, 0.058328202699502715, 0.06666666666666667, 0.06666666666666667, 0.08127552793066153, 0.04208126388066402], 'SVM (RDF)', None, OrderedDict([(u'Age_21 and younger', [5, 1, 1, 1, 1, 1]), (u'Age_22 to 26', [5, 2, 2, 2, 2, 2]), (u'Age_27 to 37', [5, 3, 3, 3, 3, 3]), (u'Age_38 and older', [5, 4, 4, 4, 4, 4]), (u'Sex_Female', [5, 5, 5, 5, 5, 5]), (u'Sex_Male', [5, 6, 6, 6, 6, 6]), (u'Marital Status_Divorced/separated', [5, 7, 7, 7, 7, 7]), (u'Marital Status_Married/cohabitating', [5, 8, 8, 8, 8, 8]), (u'Marital Status_Single', [5, 9, 9, 9, 9, 9]), (u'Marital Status_Widowed', [5, 10, 10, 10, 10, 10]), (u'Hx of Tobacco Use_Currently smokes', [5, 11, 11, 11, 11, 11]), (u'Hx of Tobacco Use_Never smoked', [5, 12, 12, 12, 12, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 13, 13, 13, 13, 13]), (u'Body Mass Index_Normal', [5, 14, 14, 14, 14, 14]), (u'Body Mass Index_Overweight/Obese', [5, 15, 15, 15, 15, 15]), (u'Body Mass Index_Underweight', [5, 16, 16, 16, 16, 16]), (u'HIV Status_Negative', [5, 17, 17, 17, 17, 17]), (u'HIV Status_Positive', [5, 18, 18, 18, 18, 18]), (u'HIV Status_Test not done', [5, 19, 19, 19, 19, 19]), (u'Prison Hx', [5, 20, 20, 20, 20, 20]), (u'Completed Secondary Education', [5, 21, 21, 21, 21, 21]), (u'Alcohol Use at Least Once Per Week', [5, 22, 22, 22, 22, 22]), (u'History of Drug Use', [5, 23, 23, 23, 23, 23]), (u'Hx of Rehab', [5, 24, 24, 24, 24, 24]), (u'MDR-TB', [5, 25, 25, 25, 25, 25]), (u'Hx Chronic Disease', [5, 26, 26, 26, 26, 26]), (u'Hx Diabetes Melitus', [5, 27, 27, 27, 27, 27])]), None), ([0.29391338042482951, 0.4501653171494005, 0.7009225223693611, 0.611965811965812, 0.7898792327729103, 0.21012076722708972, 0.38803418803418804, 0.41054131054131043, 0.49510774331044277, 0.08265687899597443, 0.1561253561253561, 0.1561253561253561, 6.0764892343107455, 0.04106679936760687], 'SVM (linear)', None, OrderedDict([(u'Age_21 and younger', [5, 1, 1, 1, 1, 1]), (u'Age_22 to 26', [5, 2, 2, 2, 2, 2]), (u'Age_27 to 37', [5, 3, 3, 3, 3, 3]), (u'Age_38 and older', [5, 4, 4, 4, 4, 4]), (u'Sex_Female', [5, 5, 5, 5, 5, 5]), (u'Sex_Male', [5, 6, 6, 6, 6, 6]), (u'Marital Status_Divorced/separated', [5, 7, 7, 7, 7, 7]), (u'Marital Status_Married/cohabitating', [5, 8, 8, 8, 8, 8]), (u'Marital Status_Single', [5, 9, 9, 9, 9, 9]), (u'Marital Status_Widowed', [5, 10, 10, 10, 10, 10]), (u'Hx of Tobacco Use_Currently smokes', [5, 11, 11, 11, 11, 11]), (u'Hx of Tobacco Use_Never smoked', [5, 12, 12, 12, 12, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 13, 13, 13, 13, 13]), (u'Body Mass Index_Normal', [5, 14, 14, 14, 14, 14]), (u'Body Mass Index_Overweight/Obese', [5, 15, 15, 15, 15, 15]), (u'Body Mass Index_Underweight', [5, 16, 16, 16, 16, 16]), (u'HIV Status_Negative', [5, 17, 17, 17, 17, 17]), (u'HIV Status_Positive', [5, 18, 18, 18, 18, 18]), (u'HIV Status_Test not done', [5, 19, 19, 19, 19, 19]), (u'Prison Hx', [5, 20, 20, 20, 20, 20]), (u'Completed Secondary Education', [5, 21, 21, 21, 21, 21]), (u'Alcohol Use at Least Once Per Week', [5, 22, 22, 22, 22, 22]), (u'History of Drug Use', [5, 23, 23, 23, 23, 23]), (u'Hx of Rehab', [5, 24, 24, 24, 24, 24]), (u'MDR-TB', [5, 25, 25, 25, 25, 25]), (u'Hx Chronic Disease', [5, 26, 26, 26, 26, 26]), (u'Hx Diabetes Melitus', [5, 27, 27, 27, 27, 27])]), None), ([0.30095962692102057, 0.38004537923408838, 0.6922839652344743, 0.5518518518518519, 0.8327160786170967, 0.16728392138290313, 0.4481481481481481, 0.38062678062678057, 0.31809140421501303, 0.06612360880890361, 0.10398860398860399, 0.10398860398860399, 0.06215087993726142, 0.040774953387605006], 'SVM (polynomial)', None, OrderedDict([(u'Age_21 and younger', [5, 1, 1, 1, 1, 1]), (u'Age_22 to 26', [5, 2, 2, 2, 2, 2]), (u'Age_27 to 37', [5, 3, 3, 3, 3, 3]), (u'Age_38 and older', [5, 4, 4, 4, 4, 4]), (u'Sex_Female', [5, 5, 5, 5, 5, 5]), (u'Sex_Male', [5, 6, 6, 6, 6, 6]), (u'Marital Status_Divorced/separated', [5, 7, 7, 7, 7, 7]), (u'Marital Status_Married/cohabitating', [5, 8, 8, 8, 8, 8]), (u'Marital Status_Single', [5, 9, 9, 9, 9, 9]), (u'Marital Status_Widowed', [5, 10, 10, 10, 10, 10]), (u'Hx of Tobacco Use_Currently smokes', [5, 11, 11, 11, 11, 11]), (u'Hx of Tobacco Use_Never smoked', [5, 12, 12, 12, 12, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 13, 13, 13, 13, 13]), (u'Body Mass Index_Normal', [5, 14, 14, 14, 14, 14]), (u'Body Mass Index_Overweight/Obese', [5, 15, 15, 15, 15, 15]), (u'Body Mass Index_Underweight', [5, 16, 16, 16, 16, 16]), (u'HIV Status_Negative', [5, 17, 17, 17, 17, 17]), (u'HIV Status_Positive', [5, 18, 18, 18, 18, 18]), (u'HIV Status_Test not done', [5, 19, 19, 19, 19, 19]), (u'Prison Hx', [5, 20, 20, 20, 20, 20]), (u'Completed Secondary Education', [5, 21, 21, 21, 21, 21]), (u'Alcohol Use at Least Once Per Week', [5, 22, 22, 22, 22, 22]), (u'History of Drug Use', [5, 23, 23, 23, 23, 23]), (u'Hx of Rehab', [5, 24, 24, 24, 24, 24]), (u'MDR-TB', [5, 25, 25, 25, 25, 25]), (u'Hx Chronic Disease', [5, 26, 26, 26, 26, 26]), (u'Hx Diabetes Melitus', [5, 27, 27, 27, 27, 27])]), None)], None), ('Logistic regression', [([0.29102316598638056, 0.25553246241143945, 0.7102523354334862, 0.6792022792022792, 0.7413023916646934, 0.25869760833530664, 0.3207977207977208, 0.0, 0.0, 0.0, 0.0, 0.0, 0.927341672117757, 0.024092978282221456], 'AdaBoost', 'Logistic regression', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'MDR-TB', [5, 2, 2, 2, 2, 2]), (u'History of Drug Use', [5, 3, 3, 3, 3, 3]), (u'Marital Status_Divorced/separated', [1, 4]), (u'Prison Hx', [5, 5, 7, 4, 11, 4]), (u'Body Mass Index_Underweight', [5, 6, 8, 8, 7, 9]), (u'Hx Chronic Disease', [2, 7, 6]), (u'HIV Status_Test not done', [4, 8, 9, 13, 11]), (u'Completed Secondary Education', [5, 9, 5, 5, 6, 5]), (u'Alcohol Use at Least Once Per Week', [5, 10, 4, 6, 4, 7]), (u'HIV Status_Negative', [4, 11, 6, 8, 8]), (u'Marital Status_Widowed', [4, 12, 12, 10, 12]), (u'Hx of Tobacco Use_Currently smokes', [5, 13, 9, 7, 12, 10]), (u'Age_27 to 37', [3, 14, 14, 9]), (u'Body Mass Index_Overweight/Obese', [4, 15, 13, 14, 14]), (u'Hx of Rehab', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [1, 11]), (u'Body Mass Index_Normal', [1, 12]), (u'HIV Status_Positive', [1, 13]), (u'Age_38 and older', [4, 14, 10, 5, 15]), (u'Marital Status_Married/cohabitating', [2, 15, 15]), (u'Hx of Tobacco Use_Used to smoke', [1, 11]), (u'Age_21 and younger', [1, 15]), (u'Marital Status_Single', [1, 13])]), None), ([0.27934283582348429, 0.43118639559501643, 0.7018716862548262, 0.6643874643874644, 0.7393559081221881, 0.260644091877812, 0.33561253561253557, 0.4179487179487179, 0.43582287473360165, 0.0885010655931802, 0.11168091168091168, 0.11168091168091168, 3.3769323951119192, 0.03385883095766814], 'Artificial neural network', 'Logistic regression', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'MDR-TB', [5, 2, 2, 2, 2, 2]), (u'History of Drug Use', [5, 3, 3, 3, 3, 3]), (u'Marital Status_Divorced/separated', [1, 4]), (u'Prison Hx', [5, 5, 7, 4, 11, 4]), (u'Body Mass Index_Underweight', [5, 6, 8, 8, 7, 9]), (u'Hx Chronic Disease', [2, 7, 6]), (u'HIV Status_Test not done', [4, 8, 9, 13, 11]), (u'Completed Secondary Education', [5, 9, 5, 5, 6, 5]), (u'Alcohol Use at Least Once Per Week', [5, 10, 4, 6, 4, 7]), (u'HIV Status_Negative', [4, 11, 6, 8, 8]), (u'Marital Status_Widowed', [4, 12, 12, 10, 12]), (u'Hx of Tobacco Use_Currently smokes', [5, 13, 9, 7, 12, 10]), (u'Age_27 to 37', [3, 14, 14, 9]), (u'Body Mass Index_Overweight/Obese', [4, 15, 13, 14, 14]), (u'Hx of Rehab', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [1, 11]), (u'Body Mass Index_Normal', [1, 12]), (u'HIV Status_Positive', [1, 13]), (u'Age_38 and older', [4, 14, 10, 5, 15]), (u'Marital Status_Married/cohabitating', [2, 15, 15]), (u'Hx of Tobacco Use_Used to smoke', [1, 11]), (u'Age_21 and younger', [1, 15]), (u'Marital Status_Single', [1, 13])]), None), ([0.25110489721312157, 0.43711289631028033, 0.678068554173219, 0.6042735042735042, 0.7518636040729338, 0.24813639592706607, 0.39572649572649576, 0.4330484330484331, 0.40551740468861, 0.10211697845133791, 0.20142450142450144, 0.20142450142450144, 0.004592197580713053, 0.04228382697707073], 'Bernoulli Naive Bayes', 'Logistic regression', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'MDR-TB', [5, 2, 2, 2, 2, 2]), (u'History of Drug Use', [5, 3, 3, 3, 3, 3]), (u'Marital Status_Divorced/separated', [1, 4]), (u'Prison Hx', [5, 5, 7, 4, 11, 4]), (u'Body Mass Index_Underweight', [5, 6, 8, 8, 7, 9]), (u'Hx Chronic Disease', [2, 7, 6]), (u'HIV Status_Test not done', [4, 8, 9, 13, 11]), (u'Completed Secondary Education', [5, 9, 5, 5, 6, 5]), (u'Alcohol Use at Least Once Per Week', [5, 10, 4, 6, 4, 7]), (u'HIV Status_Negative', [4, 11, 6, 8, 8]), (u'Marital Status_Widowed', [4, 12, 12, 10, 12]), (u'Hx of Tobacco Use_Currently smokes', [5, 13, 9, 7, 12, 10]), (u'Age_27 to 37', [3, 14, 14, 9]), (u'Body Mass Index_Overweight/Obese', [4, 15, 13, 14, 14]), (u'Hx of Rehab', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [1, 11]), (u'Body Mass Index_Normal', [1, 12]), (u'HIV Status_Positive', [1, 13]), (u'Age_38 and older', [4, 14, 10, 5, 15]), (u'Marital Status_Married/cohabitating', [2, 15, 15]), (u'Hx of Tobacco Use_Used to smoke', [1, 11]), (u'Age_21 and younger', [1, 15]), (u'Marital Status_Single', [1, 13])]), None), ([0.25752136781274759, 0.38744171905933011, 0.6719400609739231, 0.5441595441595442, 0.7997205777883021, 0.20027942221169787, 0.45584045584045574, 0.32905982905982906, 0.2092209329860289, 0.08654511011129529, 0.0962962962962963, 0.0962962962962963, 0.004056697777373899, 0.06148150218413678], 'Decision Tree', 'Logistic regression', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'MDR-TB', [5, 2, 2, 2, 2, 2]), (u'History of Drug Use', [5, 3, 3, 3, 3, 3]), (u'Marital Status_Divorced/separated', [1, 4]), (u'Prison Hx', [5, 5, 7, 4, 11, 4]), (u'Body Mass Index_Underweight', [5, 6, 8, 8, 7, 9]), (u'Hx Chronic Disease', [2, 7, 6]), (u'HIV Status_Test not done', [4, 8, 9, 13, 11]), (u'Completed Secondary Education', [5, 9, 5, 5, 6, 5]), (u'Alcohol Use at Least Once Per Week', [5, 10, 4, 6, 4, 7]), (u'HIV Status_Negative', [4, 11, 6, 8, 8]), (u'Marital Status_Widowed', [4, 12, 12, 10, 12]), (u'Hx of Tobacco Use_Currently smokes', [5, 13, 9, 7, 12, 10]), (u'Age_27 to 37', [3, 14, 14, 9]), (u'Body Mass Index_Overweight/Obese', [4, 15, 13, 14, 14]), (u'Hx of Rehab', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [1, 11]), (u'Body Mass Index_Normal', [1, 12]), (u'HIV Status_Positive', [1, 13]), (u'Age_38 and older', [4, 14, 10, 5, 15]), (u'Marital Status_Married/cohabitating', [2, 15, 15]), (u'Hx of Tobacco Use_Used to smoke', [1, 11]), (u'Age_21 and younger', [1, 15]), (u'Marital Status_Single', [1, 13])]), None), ([0.28881231024258142, 0.45460379799332623, 0.6959588753218874, 0.5971509971509972, 0.7947667534927776, 0.20523324650722233, 0.4028490028490029, 0.35071225071225065, 0.4951551030073407, 0.07294340516220696, 0.16381766381766383, 0.16381766381766383, 0.15662252365300214, 0.04838787763792321], 'Extreme Learning Machine', 'Logistic regression', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'MDR-TB', [5, 2, 2, 2, 2, 2]), (u'History of Drug Use', [5, 3, 3, 3, 3, 3]), (u'Marital Status_Divorced/separated', [1, 4]), (u'Prison Hx', [5, 5, 7, 4, 11, 4]), (u'Body Mass Index_Underweight', [5, 6, 8, 8, 7, 9]), (u'Hx Chronic Disease', [2, 7, 6]), (u'HIV Status_Test not done', [4, 8, 9, 13, 11]), (u'Completed Secondary Education', [5, 9, 5, 5, 6, 5]), (u'Alcohol Use at Least Once Per Week', [5, 10, 4, 6, 4, 7]), (u'HIV Status_Negative', [4, 11, 6, 8, 8]), (u'Marital Status_Widowed', [4, 12, 12, 10, 12]), (u'Hx of Tobacco Use_Currently smokes', [5, 13, 9, 7, 12, 10]), (u'Age_27 to 37', [3, 14, 14, 9]), (u'Body Mass Index_Overweight/Obese', [4, 15, 13, 14, 14]), (u'Hx of Rehab', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [1, 11]), (u'Body Mass Index_Normal', [1, 12]), (u'HIV Status_Positive', [1, 13]), (u'Age_38 and older', [4, 14, 10, 5, 15]), (u'Marital Status_Married/cohabitating', [2, 15, 15]), (u'Hx of Tobacco Use_Used to smoke', [1, 11]), (u'Age_21 and younger', [1, 15]), (u'Marital Status_Single', [1, 13])]), None), ([0.062645718580790558, 0.16377498529839321, 0.5221280965112365, 0.9849002849002849, 0.059355908122188016, 0.9406440918778121, 0.0150997150997151, 0.9849002849002849, 0.057414160549372484, 0.9396732180914042, 0.0150997150997151, 0.0150997150997151, 0.007406137359020071, 0.00851648071800079], 'Gaussian Naive Bayes', 'Logistic regression', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'MDR-TB', [5, 2, 2, 2, 2, 2]), (u'History of Drug Use', [5, 3, 3, 3, 3, 3]), (u'Marital Status_Divorced/separated', [1, 4]), (u'Prison Hx', [5, 5, 7, 4, 11, 4]), (u'Body Mass Index_Underweight', [5, 6, 8, 8, 7, 9]), (u'Hx Chronic Disease', [2, 7, 6]), (u'HIV Status_Test not done', [4, 8, 9, 13, 11]), (u'Completed Secondary Education', [5, 9, 5, 5, 6, 5]), (u'Alcohol Use at Least Once Per Week', [5, 10, 4, 6, 4, 7]), (u'HIV Status_Negative', [4, 11, 6, 8, 8]), (u'Marital Status_Widowed', [4, 12, 12, 10, 12]), (u'Hx of Tobacco Use_Currently smokes', [5, 13, 9, 7, 12, 10]), (u'Age_27 to 37', [3, 14, 14, 9]), (u'Body Mass Index_Overweight/Obese', [4, 15, 13, 14, 14]), (u'Hx of Rehab', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [1, 11]), (u'Body Mass Index_Normal', [1, 12]), (u'HIV Status_Positive', [1, 13]), (u'Age_38 and older', [4, 14, 10, 5, 15]), (u'Marital Status_Married/cohabitating', [2, 15, 15]), (u'Hx of Tobacco Use_Used to smoke', [1, 11]), (u'Age_21 and younger', [1, 15]), (u'Marital Status_Single', [1, 13])]), None), ([0.078980843181645527, 0.22895008605851977, 0.5596790604699674, 0.739031339031339, 0.38032678190859576, 0.6196732180914042, 0.26096866096866095, 0.3356125356125356, 0.031120056831636277, 0.2695192990764859, 0.0, 0.0, 0.001703698359661887, 0.05114628404391943], 'K-nearest neighbours', 'Logistic regression', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'MDR-TB', [5, 2, 2, 2, 2, 2]), (u'History of Drug Use', [5, 3, 3, 3, 3, 3]), (u'Marital Status_Divorced/separated', [1, 4]), (u'Prison Hx', [5, 5, 7, 4, 11, 4]), (u'Body Mass Index_Underweight', [5, 6, 8, 8, 7, 9]), (u'Hx Chronic Disease', [2, 7, 6]), (u'HIV Status_Test not done', [4, 8, 9, 13, 11]), (u'Completed Secondary Education', [5, 9, 5, 5, 6, 5]), (u'Alcohol Use at Least Once Per Week', [5, 10, 4, 6, 4, 7]), (u'HIV Status_Negative', [4, 11, 6, 8, 8]), (u'Marital Status_Widowed', [4, 12, 12, 10, 12]), (u'Hx of Tobacco Use_Currently smokes', [5, 13, 9, 7, 12, 10]), (u'Age_27 to 37', [3, 14, 14, 9]), (u'Body Mass Index_Overweight/Obese', [4, 15, 13, 14, 14]), (u'Hx of Rehab', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [1, 11]), (u'Body Mass Index_Normal', [1, 12]), (u'HIV Status_Positive', [1, 13]), (u'Age_38 and older', [4, 14, 10, 5, 15]), (u'Marital Status_Married/cohabitating', [2, 15, 15]), (u'Hx of Tobacco Use_Used to smoke', [1, 11]), (u'Age_21 and younger', [1, 15]), (u'Marital Status_Single', [1, 13])]), None), ([0.27389885307365963, 0.43380416112625458, 0.6968796233892137, 0.6495726495726496, 0.7441865972057778, 0.25581340279422216, 0.3504273504273504, 0.44074074074074077, 0.4358181387639119, 0.0914184229220933, 0.1190883190883191, 0.1190883190883191, 0.027684192764232462, 0.03470689700154108], 'Logistic regression', 'Logistic regression', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'MDR-TB', [5, 2, 2, 2, 2, 2]), (u'History of Drug Use', [5, 3, 3, 3, 3, 3]), (u'Marital Status_Divorced/separated', [1, 4]), (u'Prison Hx', [5, 5, 7, 4, 11, 4]), (u'Body Mass Index_Underweight', [5, 6, 8, 8, 7, 9]), (u'Hx Chronic Disease', [2, 7, 6]), (u'HIV Status_Test not done', [4, 8, 9, 13, 11]), (u'Completed Secondary Education', [5, 9, 5, 5, 6, 5]), (u'Alcohol Use at Least Once Per Week', [5, 10, 4, 6, 4, 7]), (u'HIV Status_Negative', [4, 11, 6, 8, 8]), (u'Marital Status_Widowed', [4, 12, 12, 10, 12]), (u'Hx of Tobacco Use_Currently smokes', [5, 13, 9, 7, 12, 10]), (u'Age_27 to 37', [3, 14, 14, 9]), (u'Body Mass Index_Overweight/Obese', [4, 15, 13, 14, 14]), (u'Hx of Rehab', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [1, 11]), (u'Body Mass Index_Normal', [1, 12]), (u'HIV Status_Positive', [1, 13]), (u'Age_38 and older', [4, 14, 10, 5, 15]), (u'Marital Status_Married/cohabitating', [2, 15, 15]), (u'Hx of Tobacco Use_Used to smoke', [1, 11]), (u'Age_21 and younger', [1, 15]), (u'Marital Status_Single', [1, 13])]), None), ([0.24907361538581146, 0.37597742962725911, 0.6810726026852003, 0.6344729344729345, 0.7276722708974661, 0.2723277291025338, 0.36552706552706554, 0.34415954415954414, 0.2539048070092351, 0.07682216433814823, 0.08945868945868946, 0.08945868945868946, 0.4122454979831218, 0.04750985663219049], 'Random forest', 'Logistic regression', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'MDR-TB', [5, 2, 2, 2, 2, 2]), (u'History of Drug Use', [5, 3, 3, 3, 3, 3]), (u'Marital Status_Divorced/separated', [1, 4]), (u'Prison Hx', [5, 5, 7, 4, 11, 4]), (u'Body Mass Index_Underweight', [5, 6, 8, 8, 7, 9]), (u'Hx Chronic Disease', [2, 7, 6]), (u'HIV Status_Test not done', [4, 8, 9, 13, 11]), (u'Completed Secondary Education', [5, 9, 5, 5, 6, 5]), (u'Alcohol Use at Least Once Per Week', [5, 10, 4, 6, 4, 7]), (u'HIV Status_Negative', [4, 11, 6, 8, 8]), (u'Marital Status_Widowed', [4, 12, 12, 10, 12]), (u'Hx of Tobacco Use_Currently smokes', [5, 13, 9, 7, 12, 10]), (u'Age_27 to 37', [3, 14, 14, 9]), (u'Body Mass Index_Overweight/Obese', [4, 15, 13, 14, 14]), (u'Hx of Rehab', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [1, 11]), (u'Body Mass Index_Normal', [1, 12]), (u'HIV Status_Positive', [1, 13]), (u'Age_38 and older', [4, 14, 10, 5, 15]), (u'Marital Status_Married/cohabitating', [2, 15, 15]), (u'Hx of Tobacco Use_Used to smoke', [1, 11]), (u'Age_21 and younger', [1, 15]), (u'Marital Status_Single', [1, 13])]), None), ([0.28622366504026925, 0.39261361135209216, 0.7006049965154867, 0.6336182336182337, 0.7675917594127398, 0.23240824058726028, 0.3663817663817664, 0.3957264957264957, 0.4181434998816008, 0.08554582050674875, 0.1561253561253561, 0.1561253561253561, 0.06542213775506042, 0.04002158645166522], 'SVM (RDF)', 'Logistic regression', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'MDR-TB', [5, 2, 2, 2, 2, 2]), (u'History of Drug Use', [5, 3, 3, 3, 3, 3]), (u'Marital Status_Divorced/separated', [1, 4]), (u'Prison Hx', [5, 5, 7, 4, 11, 4]), (u'Body Mass Index_Underweight', [5, 6, 8, 8, 7, 9]), (u'Hx Chronic Disease', [2, 7, 6]), (u'HIV Status_Test not done', [4, 8, 9, 13, 11]), (u'Completed Secondary Education', [5, 9, 5, 5, 6, 5]), (u'Alcohol Use at Least Once Per Week', [5, 10, 4, 6, 4, 7]), (u'HIV Status_Negative', [4, 11, 6, 8, 8]), (u'Marital Status_Widowed', [4, 12, 12, 10, 12]), (u'Hx of Tobacco Use_Currently smokes', [5, 13, 9, 7, 12, 10]), (u'Age_27 to 37', [3, 14, 14, 9]), (u'Body Mass Index_Overweight/Obese', [4, 15, 13, 14, 14]), (u'Hx of Rehab', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [1, 11]), (u'Body Mass Index_Normal', [1, 12]), (u'HIV Status_Positive', [1, 13]), (u'Age_38 and older', [4, 14, 10, 5, 15]), (u'Marital Status_Married/cohabitating', [2, 15, 15]), (u'Hx of Tobacco Use_Used to smoke', [1, 11]), (u'Age_21 and younger', [1, 15]), (u'Marital Status_Single', [1, 13])]), None), ([0.29824057073007643, 0.40449872361780925, 0.7096884244670179, 0.6498575498575498, 0.7695192990764859, 0.23048070092351408, 0.3501424501424501, 0.4330484330484331, 0.3492351408950983, 0.09438313994790433, 0.08945868945868946, 0.08945868945868946, 4.2718008641047, 0.044513473180795876], 'SVM (linear)', 'Logistic regression', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'MDR-TB', [5, 2, 2, 2, 2, 2]), (u'History of Drug Use', [5, 3, 3, 3, 3, 3]), (u'Marital Status_Divorced/separated', [1, 4]), (u'Prison Hx', [5, 5, 7, 4, 11, 4]), (u'Body Mass Index_Underweight', [5, 6, 8, 8, 7, 9]), (u'Hx Chronic Disease', [2, 7, 6]), (u'HIV Status_Test not done', [4, 8, 9, 13, 11]), (u'Completed Secondary Education', [5, 9, 5, 5, 6, 5]), (u'Alcohol Use at Least Once Per Week', [5, 10, 4, 6, 4, 7]), (u'HIV Status_Negative', [4, 11, 6, 8, 8]), (u'Marital Status_Widowed', [4, 12, 12, 10, 12]), (u'Hx of Tobacco Use_Currently smokes', [5, 13, 9, 7, 12, 10]), (u'Age_27 to 37', [3, 14, 14, 9]), (u'Body Mass Index_Overweight/Obese', [4, 15, 13, 14, 14]), (u'Hx of Rehab', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [1, 11]), (u'Body Mass Index_Normal', [1, 12]), (u'HIV Status_Positive', [1, 13]), (u'Age_38 and older', [4, 14, 10, 5, 15]), (u'Marital Status_Married/cohabitating', [2, 15, 15]), (u'Hx of Tobacco Use_Used to smoke', [1, 11]), (u'Age_21 and younger', [1, 15]), (u'Marital Status_Single', [1, 13])]), None), ([0.27306900279474244, 0.37254504836444047, 0.6409194190273991, 0.3732193732193732, 0.9086194648354251, 0.09138053516457494, 0.6267806267806267, 0.25384615384615383, 0.20162917357328913, 0.053502249585602644, 0.029629629629629627, 0.029629629629629627, 0.049850081185271775, 0.025270649800613998], 'SVM (polynomial)', 'Logistic regression', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'MDR-TB', [5, 2, 2, 2, 2, 2]), (u'History of Drug Use', [5, 3, 3, 3, 3, 3]), (u'Marital Status_Divorced/separated', [1, 4]), (u'Prison Hx', [5, 5, 7, 4, 11, 4]), (u'Body Mass Index_Underweight', [5, 6, 8, 8, 7, 9]), (u'Hx Chronic Disease', [2, 7, 6]), (u'HIV Status_Test not done', [4, 8, 9, 13, 11]), (u'Completed Secondary Education', [5, 9, 5, 5, 6, 5]), (u'Alcohol Use at Least Once Per Week', [5, 10, 4, 6, 4, 7]), (u'HIV Status_Negative', [4, 11, 6, 8, 8]), (u'Marital Status_Widowed', [4, 12, 12, 10, 12]), (u'Hx of Tobacco Use_Currently smokes', [5, 13, 9, 7, 12, 10]), (u'Age_27 to 37', [3, 14, 14, 9]), (u'Body Mass Index_Overweight/Obese', [4, 15, 13, 14, 14]), (u'Hx of Rehab', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [1, 11]), (u'Body Mass Index_Normal', [1, 12]), (u'HIV Status_Positive', [1, 13]), (u'Age_38 and older', [4, 14, 10, 5, 15]), (u'Marital Status_Married/cohabitating', [2, 15, 15]), (u'Hx of Tobacco Use_Used to smoke', [1, 11]), (u'Age_21 and younger', [1, 15]), (u'Marital Status_Single', [1, 13])]), None)], 'Logistic regression'), ('Decision Tree', [([0.28744244211661119, 0.25915348551719819, 0.7082561242092381, 0.6792022792022792, 0.7373099692161971, 0.262690030783803, 0.3207977207977208, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6157058409625958, 0.04757919012684594], 'AdaBoost', 'Decision Tree', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Completed Secondary Education', [5, 2, 4, 7, 5, 8]), (u'Age_38 and older', [5, 3, 8, 11, 4, 5]), (u'Alcohol Use at Least Once Per Week', [5, 4, 9, 2, 3, 13]), (u'Sex_Male', [5, 5, 7, 5, 2, 7]), (u'Hx of Tobacco Use_Used to smoke', [3, 6, 15, 2]), (u'Marital Status_Single', [5, 7, 14, 6, 6, 4]), (u'Marital Status_Married/cohabitating', [4, 8, 13, 12, 3]), (u'Body Mass Index_Underweight', [2, 9, 14]), (u'HIV Status_Test not done', [3, 10, 11, 9]), (u'Age_22 to 26', [3, 11, 6, 13]), (u'MDR-TB', [5, 12, 2, 9, 7, 14]), (u'Age_21 and younger', [3, 13, 5, 14]), (u'Age_27 to 37', [5, 14, 15, 3, 13, 6]), (u'Hx of Tobacco Use_Never smoked', [5, 15, 3, 4, 12, 10]), (u'Body Mass Index_Overweight/Obese', [4, 10, 10, 9, 15]), (u'HIV Status_Negative', [1, 11]), (u'Body Mass Index_Normal', [2, 12, 11]), (u'Sex_Female', [2, 8, 8]), (u'Hx of Rehab', [3, 15, 10, 12])]), None), ([0.30309455770046989, 0.43232667950783804, 0.7106753276892988, 0.6421652421652422, 0.7791854132133554, 0.2208145867866446, 0.3578347578347578, 0.44843304843304843, 0.46206961875444, 0.09237982476912149, 0.13390313390313388, 0.13390313390313388, 4.538138664263055, 0.05432780251400836], 'Artificial neural network', 'Decision Tree', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Completed Secondary Education', [5, 2, 4, 7, 5, 8]), (u'Age_38 and older', [5, 3, 8, 11, 4, 5]), (u'Alcohol Use at Least Once Per Week', [5, 4, 9, 2, 3, 13]), (u'Sex_Male', [5, 5, 7, 5, 2, 7]), (u'Hx of Tobacco Use_Used to smoke', [3, 6, 15, 2]), (u'Marital Status_Single', [5, 7, 14, 6, 6, 4]), (u'Marital Status_Married/cohabitating', [4, 8, 13, 12, 3]), (u'Body Mass Index_Underweight', [2, 9, 14]), (u'HIV Status_Test not done', [3, 10, 11, 9]), (u'Age_22 to 26', [3, 11, 6, 13]), (u'MDR-TB', [5, 12, 2, 9, 7, 14]), (u'Age_21 and younger', [3, 13, 5, 14]), (u'Age_27 to 37', [5, 14, 15, 3, 13, 6]), (u'Hx of Tobacco Use_Never smoked', [5, 15, 3, 4, 12, 10]), (u'Body Mass Index_Overweight/Obese', [4, 10, 10, 9, 15]), (u'HIV Status_Negative', [1, 11]), (u'Body Mass Index_Normal', [2, 12, 11]), (u'Sex_Female', [2, 8, 8]), (u'Hx of Rehab', [3, 15, 10, 12])]), None), ([0.29821312705542935, 0.53818527021025186, 0.701283906540833, 0.603988603988604, 0.7985792090930618, 0.20142079090693818, 0.39601139601139596, 0.4854700854700854, 0.6371584181861236, 0.11773620648827847, 0.2766381766381766, 0.2766381766381766, 0.0042441528945518225, 0.05444151008723245], 'Bernoulli Naive Bayes', 'Decision Tree', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Completed Secondary Education', [5, 2, 4, 7, 5, 8]), (u'Age_38 and older', [5, 3, 8, 11, 4, 5]), (u'Alcohol Use at Least Once Per Week', [5, 4, 9, 2, 3, 13]), (u'Sex_Male', [5, 5, 7, 5, 2, 7]), (u'Hx of Tobacco Use_Used to smoke', [3, 6, 15, 2]), (u'Marital Status_Single', [5, 7, 14, 6, 6, 4]), (u'Marital Status_Married/cohabitating', [4, 8, 13, 12, 3]), (u'Body Mass Index_Underweight', [2, 9, 14]), (u'HIV Status_Test not done', [3, 10, 11, 9]), (u'Age_22 to 26', [3, 11, 6, 13]), (u'MDR-TB', [5, 12, 2, 9, 7, 14]), (u'Age_21 and younger', [3, 13, 5, 14]), (u'Age_27 to 37', [5, 14, 15, 3, 13, 6]), (u'Hx of Tobacco Use_Never smoked', [5, 15, 3, 4, 12, 10]), (u'Body Mass Index_Overweight/Obese', [4, 10, 10, 9, 15]), (u'HIV Status_Negative', [1, 11]), (u'Body Mass Index_Normal', [2, 12, 11]), (u'Sex_Female', [2, 8, 8]), (u'Hx of Rehab', [3, 15, 10, 12])]), None), ([0.27078466633380743, 0.40299355106713175, 0.6915875348198341, 0.6262108262108261, 0.756964243428842, 0.24303575657115792, 0.3737891737891738, 0.3735042735042735, 0.2733364906464599, 0.10595784986976083, 0.13390313390313388, 0.13390313390313388, 0.004044623373691009, 0.03538724350569091], 'Decision Tree', 'Decision Tree', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Completed Secondary Education', [5, 2, 4, 7, 5, 8]), (u'Age_38 and older', [5, 3, 8, 11, 4, 5]), (u'Alcohol Use at Least Once Per Week', [5, 4, 9, 2, 3, 13]), (u'Sex_Male', [5, 5, 7, 5, 2, 7]), (u'Hx of Tobacco Use_Used to smoke', [3, 6, 15, 2]), (u'Marital Status_Single', [5, 7, 14, 6, 6, 4]), (u'Marital Status_Married/cohabitating', [4, 8, 13, 12, 3]), (u'Body Mass Index_Underweight', [2, 9, 14]), (u'HIV Status_Test not done', [3, 10, 11, 9]), (u'Age_22 to 26', [3, 11, 6, 13]), (u'MDR-TB', [5, 12, 2, 9, 7, 14]), (u'Age_21 and younger', [3, 13, 5, 14]), (u'Age_27 to 37', [5, 14, 15, 3, 13, 6]), (u'Hx of Tobacco Use_Never smoked', [5, 15, 3, 4, 12, 10]), (u'Body Mass Index_Overweight/Obese', [4, 10, 10, 9, 15]), (u'HIV Status_Negative', [1, 11]), (u'Body Mass Index_Normal', [2, 12, 11]), (u'Sex_Female', [2, 8, 8]), (u'Hx of Rehab', [3, 15, 10, 12])]), None), ([0.28118302379876153, 0.43340910995254689, 0.7009126726318297, 0.6498575498575498, 0.7519677954061093, 0.2480322045938906, 0.3501424501424501, 0.3438746438746439, 0.3872981292919725, 0.07877811982003316, 0.15669515669515668, 0.15669515669515668, 0.14949892734016285, 0.04227479055613477], 'Extreme Learning Machine', 'Decision Tree', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Completed Secondary Education', [5, 2, 4, 7, 5, 8]), (u'Age_38 and older', [5, 3, 8, 11, 4, 5]), (u'Alcohol Use at Least Once Per Week', [5, 4, 9, 2, 3, 13]), (u'Sex_Male', [5, 5, 7, 5, 2, 7]), (u'Hx of Tobacco Use_Used to smoke', [3, 6, 15, 2]), (u'Marital Status_Single', [5, 7, 14, 6, 6, 4]), (u'Marital Status_Married/cohabitating', [4, 8, 13, 12, 3]), (u'Body Mass Index_Underweight', [2, 9, 14]), (u'HIV Status_Test not done', [3, 10, 11, 9]), (u'Age_22 to 26', [3, 11, 6, 13]), (u'MDR-TB', [5, 12, 2, 9, 7, 14]), (u'Age_21 and younger', [3, 13, 5, 14]), (u'Age_27 to 37', [5, 14, 15, 3, 13, 6]), (u'Hx of Tobacco Use_Never smoked', [5, 15, 3, 4, 12, 10]), (u'Body Mass Index_Overweight/Obese', [4, 10, 10, 9, 15]), (u'HIV Status_Negative', [1, 11]), (u'Body Mass Index_Normal', [2, 12, 11]), (u'Sex_Female', [2, 8, 8]), (u'Hx of Rehab', [3, 15, 10, 12])]), None), ([0.32354266762299455, 0.7078937968780985, 0.7172362918301824, 0.627065527065527, 0.8074070565948377, 0.1925929434051622, 0.3729344729344729, 0.5752136752136752, 0.7655789722945773, 0.15662325361117688, 0.3284900284900285, 0.3284900284900285, 0.008615690747957983, 0.04863679259994411], 'Gaussian Naive Bayes', 'Decision Tree', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Completed Secondary Education', [5, 2, 4, 7, 5, 8]), (u'Age_38 and older', [5, 3, 8, 11, 4, 5]), (u'Alcohol Use at Least Once Per Week', [5, 4, 9, 2, 3, 13]), (u'Sex_Male', [5, 5, 7, 5, 2, 7]), (u'Hx of Tobacco Use_Used to smoke', [3, 6, 15, 2]), (u'Marital Status_Single', [5, 7, 14, 6, 6, 4]), (u'Marital Status_Married/cohabitating', [4, 8, 13, 12, 3]), (u'Body Mass Index_Underweight', [2, 9, 14]), (u'HIV Status_Test not done', [3, 10, 11, 9]), (u'Age_22 to 26', [3, 11, 6, 13]), (u'MDR-TB', [5, 12, 2, 9, 7, 14]), (u'Age_21 and younger', [3, 13, 5, 14]), (u'Age_27 to 37', [5, 14, 15, 3, 13, 6]), (u'Hx of Tobacco Use_Never smoked', [5, 15, 3, 4, 12, 10]), (u'Body Mass Index_Overweight/Obese', [4, 10, 10, 9, 15]), (u'HIV Status_Negative', [1, 11]), (u'Body Mass Index_Normal', [2, 12, 11]), (u'Sex_Female', [2, 8, 8]), (u'Hx of Rehab', [3, 15, 10, 12])]), None), ([0.20007583380086491, 0.32617900172117037, 0.643490382675796, 0.5527065527065527, 0.7342742126450391, 0.2657257873549609, 0.4472934472934472, 0.260968660968661, 0.09734785697371537, 0.06715131423158892, 0.07492877492877492, 0.07492877492877492, 0.0017009816188329197, 0.032259642886887124], 'K-nearest neighbours', 'Decision Tree', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Completed Secondary Education', [5, 2, 4, 7, 5, 8]), (u'Age_38 and older', [5, 3, 8, 11, 4, 5]), (u'Alcohol Use at Least Once Per Week', [5, 4, 9, 2, 3, 13]), (u'Sex_Male', [5, 5, 7, 5, 2, 7]), (u'Hx of Tobacco Use_Used to smoke', [3, 6, 15, 2]), (u'Marital Status_Single', [5, 7, 14, 6, 6, 4]), (u'Marital Status_Married/cohabitating', [4, 8, 13, 12, 3]), (u'Body Mass Index_Underweight', [2, 9, 14]), (u'HIV Status_Test not done', [3, 10, 11, 9]), (u'Age_22 to 26', [3, 11, 6, 13]), (u'MDR-TB', [5, 12, 2, 9, 7, 14]), (u'Age_21 and younger', [3, 13, 5, 14]), (u'Age_27 to 37', [5, 14, 15, 3, 13, 6]), (u'Hx of Tobacco Use_Never smoked', [5, 15, 3, 4, 12, 10]), (u'Body Mass Index_Overweight/Obese', [4, 10, 10, 9, 15]), (u'HIV Status_Negative', [1, 11]), (u'Body Mass Index_Normal', [2, 12, 11]), (u'Sex_Female', [2, 8, 8]), (u'Hx of Rehab', [3, 15, 10, 12])]), None), ([0.30843213067422703, 0.43712506731246037, 0.718194381196986, 0.6717948717948717, 0.7645938905991001, 0.23540610940089982, 0.3282051282051282, 0.45555555555555555, 0.4707932749230405, 0.09141368695240351, 0.14131054131054127, 0.14131054131054127, 0.023811629643023115, 0.0393469885497319], 'Logistic regression', 'Decision Tree', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Completed Secondary Education', [5, 2, 4, 7, 5, 8]), (u'Age_38 and older', [5, 3, 8, 11, 4, 5]), (u'Alcohol Use at Least Once Per Week', [5, 4, 9, 2, 3, 13]), (u'Sex_Male', [5, 5, 7, 5, 2, 7]), (u'Hx of Tobacco Use_Used to smoke', [3, 6, 15, 2]), (u'Marital Status_Single', [5, 7, 14, 6, 6, 4]), (u'Marital Status_Married/cohabitating', [4, 8, 13, 12, 3]), (u'Body Mass Index_Underweight', [2, 9, 14]), (u'HIV Status_Test not done', [3, 10, 11, 9]), (u'Age_22 to 26', [3, 11, 6, 13]), (u'MDR-TB', [5, 12, 2, 9, 7, 14]), (u'Age_21 and younger', [3, 13, 5, 14]), (u'Age_27 to 37', [5, 14, 15, 3, 13, 6]), (u'Hx of Tobacco Use_Never smoked', [5, 15, 3, 4, 12, 10]), (u'Body Mass Index_Overweight/Obese', [4, 10, 10, 9, 15]), (u'HIV Status_Negative', [1, 11]), (u'Body Mass Index_Normal', [2, 12, 11]), (u'Sex_Female', [2, 8, 8]), (u'Hx of Rehab', [3, 15, 10, 12])]), None), ([0.20511490450942085, 0.36425662657156421, 0.6471463556308453, 0.5598290598290598, 0.7344636514326307, 0.2655363485673692, 0.4401709401709401, 0.3367521367521368, 0.24129765569500355, 0.07100639355908121, 0.06695156695156694, 0.06695156695156694, 0.39578506716236117, 0.03932100624578671], 'Random forest', 'Decision Tree', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Completed Secondary Education', [5, 2, 4, 7, 5, 8]), (u'Age_38 and older', [5, 3, 8, 11, 4, 5]), (u'Alcohol Use at Least Once Per Week', [5, 4, 9, 2, 3, 13]), (u'Sex_Male', [5, 5, 7, 5, 2, 7]), (u'Hx of Tobacco Use_Used to smoke', [3, 6, 15, 2]), (u'Marital Status_Single', [5, 7, 14, 6, 6, 4]), (u'Marital Status_Married/cohabitating', [4, 8, 13, 12, 3]), (u'Body Mass Index_Underweight', [2, 9, 14]), (u'HIV Status_Test not done', [3, 10, 11, 9]), (u'Age_22 to 26', [3, 11, 6, 13]), (u'MDR-TB', [5, 12, 2, 9, 7, 14]), (u'Age_21 and younger', [3, 13, 5, 14]), (u'Age_27 to 37', [5, 14, 15, 3, 13, 6]), (u'Hx of Tobacco Use_Never smoked', [5, 15, 3, 4, 12, 10]), (u'Body Mass Index_Overweight/Obese', [4, 10, 10, 9, 15]), (u'HIV Status_Negative', [1, 11]), (u'Body Mass Index_Normal', [2, 12, 11]), (u'Sex_Female', [2, 8, 8]), (u'Hx of Rehab', [3, 15, 10, 12])]), None), ([0.27953846116831077, 0.37257397201550813, 0.6911933766586856, 0.5962962962962963, 0.7860904570210752, 0.21390954297892498, 0.4037037037037036, 0.3575498575498576, 0.2624390243902439, 0.0699976320151551, 0.08148148148148147, 0.08148148148148147, 0.06939854074794291, 0.019044530865351125], 'SVM (RDF)', 'Decision Tree', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Completed Secondary Education', [5, 2, 4, 7, 5, 8]), (u'Age_38 and older', [5, 3, 8, 11, 4, 5]), (u'Alcohol Use at Least Once Per Week', [5, 4, 9, 2, 3, 13]), (u'Sex_Male', [5, 5, 7, 5, 2, 7]), (u'Hx of Tobacco Use_Used to smoke', [3, 6, 15, 2]), (u'Marital Status_Single', [5, 7, 14, 6, 6, 4]), (u'Marital Status_Married/cohabitating', [4, 8, 13, 12, 3]), (u'Body Mass Index_Underweight', [2, 9, 14]), (u'HIV Status_Test not done', [3, 10, 11, 9]), (u'Age_22 to 26', [3, 11, 6, 13]), (u'MDR-TB', [5, 12, 2, 9, 7, 14]), (u'Age_21 and younger', [3, 13, 5, 14]), (u'Age_27 to 37', [5, 14, 15, 3, 13, 6]), (u'Hx of Tobacco Use_Never smoked', [5, 15, 3, 4, 12, 10]), (u'Body Mass Index_Overweight/Obese', [4, 10, 10, 9, 15]), (u'HIV Status_Negative', [1, 11]), (u'Body Mass Index_Normal', [2, 12, 11]), (u'Sex_Female', [2, 8, 8]), (u'Hx of Rehab', [3, 15, 10, 12])]), None), ([0.30987580882088261, 0.41687539403273643, 0.7083465259098696, 0.6122507122507123, 0.8044423395690267, 0.19555766043097322, 0.38774928774928774, 0.4182336182336182, 0.39024863840871415, 0.09530665403741415, 0.13390313390313388, 0.13390313390313388, 5.443091977071914, 0.049915673792692], 'SVM (linear)', 'Decision Tree', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Completed Secondary Education', [5, 2, 4, 7, 5, 8]), (u'Age_38 and older', [5, 3, 8, 11, 4, 5]), (u'Alcohol Use at Least Once Per Week', [5, 4, 9, 2, 3, 13]), (u'Sex_Male', [5, 5, 7, 5, 2, 7]), (u'Hx of Tobacco Use_Used to smoke', [3, 6, 15, 2]), (u'Marital Status_Single', [5, 7, 14, 6, 6, 4]), (u'Marital Status_Married/cohabitating', [4, 8, 13, 12, 3]), (u'Body Mass Index_Underweight', [2, 9, 14]), (u'HIV Status_Test not done', [3, 10, 11, 9]), (u'Age_22 to 26', [3, 11, 6, 13]), (u'MDR-TB', [5, 12, 2, 9, 7, 14]), (u'Age_21 and younger', [3, 13, 5, 14]), (u'Age_27 to 37', [5, 14, 15, 3, 13, 6]), (u'Hx of Tobacco Use_Never smoked', [5, 15, 3, 4, 12, 10]), (u'Body Mass Index_Overweight/Obese', [4, 10, 10, 9, 15]), (u'HIV Status_Negative', [1, 11]), (u'Body Mass Index_Normal', [2, 12, 11]), (u'Sex_Female', [2, 8, 8]), (u'Hx of Rehab', [3, 15, 10, 12])]), None), ([0.32399033682976358, 0.3791217679789976, 0.6770622753028626, 0.45527065527065524, 0.8988538953350698, 0.10114610466493015, 0.5447293447293446, 0.34985754985754985, 0.18467440208382668, 0.06808430026047832, 0.04444444444444444, 0.04444444444444444, 0.04730268386826459, 0.04083439784098113], 'SVM (polynomial)', 'Decision Tree', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Completed Secondary Education', [5, 2, 4, 7, 5, 8]), (u'Age_38 and older', [5, 3, 8, 11, 4, 5]), (u'Alcohol Use at Least Once Per Week', [5, 4, 9, 2, 3, 13]), (u'Sex_Male', [5, 5, 7, 5, 2, 7]), (u'Hx of Tobacco Use_Used to smoke', [3, 6, 15, 2]), (u'Marital Status_Single', [5, 7, 14, 6, 6, 4]), (u'Marital Status_Married/cohabitating', [4, 8, 13, 12, 3]), (u'Body Mass Index_Underweight', [2, 9, 14]), (u'HIV Status_Test not done', [3, 10, 11, 9]), (u'Age_22 to 26', [3, 11, 6, 13]), (u'MDR-TB', [5, 12, 2, 9, 7, 14]), (u'Age_21 and younger', [3, 13, 5, 14]), (u'Age_27 to 37', [5, 14, 15, 3, 13, 6]), (u'Hx of Tobacco Use_Never smoked', [5, 15, 3, 4, 12, 10]), (u'Body Mass Index_Overweight/Obese', [4, 10, 10, 9, 15]), (u'HIV Status_Negative', [1, 11]), (u'Body Mass Index_Normal', [2, 12, 11]), (u'Sex_Female', [2, 8, 8]), (u'Hx of Rehab', [3, 15, 10, 12])]), None)], 'Decision Tree'), ('Bernoulli Naive Bayes', [([0.17167626611953996, 0.25217407338837156, 0.6300982882370522, 0.6045584045584046, 0.6556381719156998, 0.34436182808430027, 0.3954415954415954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8764175727248873, 0.03002625378247995], 'AdaBoost', 'Bernoulli Naive Bayes', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'Hx Chronic Disease', [5, 2, 2, 3, 3, 2]), (u'Marital Status_Widowed', [5, 3, 3, 2, 2, 3]), (u'HIV Status_Positive', [5, 4, 4, 4, 4, 4]), (u'Marital Status_Divorced/separated', [5, 5, 6, 5, 8, 6]), (u'Hx of Tobacco Use_Currently smokes', [5, 6, 5, 6, 5, 5]), (u'Body Mass Index_Overweight/Obese', [5, 7, 7, 7, 6, 7]), (u'MDR-TB', [5, 8, 9, 8, 10, 8]), (u'Age_38 and older', [5, 9, 8, 9, 7, 9]), (u'Prison Hx', [5, 10, 10, 10, 9, 10]), (u'Sex_Female', [5, 11, 11, 13, 11, 12]), (u'Body Mass Index_Underweight', [5, 12, 12, 11, 12, 11]), (u'Hx of Rehab', [5, 13, 13, 12, 13, 13]), (u'Age_22 to 26', [3, 14, 15, 15]), (u'Age_21 and younger', [5, 15, 14, 14, 15, 14]), (u'Age_27 to 37', [2, 15, 14])]), None), ([0.21720360903192756, 0.35594857482333547, 0.6539401041508549, 0.5598290598290598, 0.7480511484726498, 0.2519488515273502, 0.4401709401709401, 0.28347578347578345, 0.17018707080274684, 0.07390007103954535, 0.08148148148148147, 0.08148148148148147, 3.645867701362566, 0.03971543320435327], 'Artificial neural network', 'Bernoulli Naive Bayes', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'Hx Chronic Disease', [5, 2, 2, 3, 3, 2]), (u'Marital Status_Widowed', [5, 3, 3, 2, 2, 3]), (u'HIV Status_Positive', [5, 4, 4, 4, 4, 4]), (u'Marital Status_Divorced/separated', [5, 5, 6, 5, 8, 6]), (u'Hx of Tobacco Use_Currently smokes', [5, 6, 5, 6, 5, 5]), (u'Body Mass Index_Overweight/Obese', [5, 7, 7, 7, 6, 7]), (u'MDR-TB', [5, 8, 9, 8, 10, 8]), (u'Age_38 and older', [5, 9, 8, 9, 7, 9]), (u'Prison Hx', [5, 10, 10, 10, 9, 10]), (u'Sex_Female', [5, 11, 11, 13, 11, 12]), (u'Body Mass Index_Underweight', [5, 12, 12, 11, 12, 11]), (u'Hx of Rehab', [5, 13, 13, 12, 13, 13]), (u'Age_22 to 26', [3, 14, 15, 15]), (u'Age_21 and younger', [5, 15, 14, 14, 15, 14]), (u'Age_27 to 37', [2, 15, 14])]), None), ([0.093161077610315932, 0.30356806328655661, 0.5703278680782825, 0.7535612535612536, 0.38709448259531143, 0.6129055174046887, 0.24643874643874644, 0.49971509971509975, 0.22272791854132135, 0.30161496566421975, 0.10427350427350426, 0.10427350427350426, 0.005285570212205215, 0.0480355942826085], 'Bernoulli Naive Bayes', 'Bernoulli Naive Bayes', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'Hx Chronic Disease', [5, 2, 2, 3, 3, 2]), (u'Marital Status_Widowed', [5, 3, 3, 2, 2, 3]), (u'HIV Status_Positive', [5, 4, 4, 4, 4, 4]), (u'Marital Status_Divorced/separated', [5, 5, 6, 5, 8, 6]), (u'Hx of Tobacco Use_Currently smokes', [5, 6, 5, 6, 5, 5]), (u'Body Mass Index_Overweight/Obese', [5, 7, 7, 7, 6, 7]), (u'MDR-TB', [5, 8, 9, 8, 10, 8]), (u'Age_38 and older', [5, 9, 8, 9, 7, 9]), (u'Prison Hx', [5, 10, 10, 10, 9, 10]), (u'Sex_Female', [5, 11, 11, 13, 11, 12]), (u'Body Mass Index_Underweight', [5, 12, 12, 11, 12, 11]), (u'Hx of Rehab', [5, 13, 13, 12, 13, 13]), (u'Age_22 to 26', [3, 14, 15, 15]), (u'Age_21 and younger', [5, 15, 14, 14, 15, 14]), (u'Age_27 to 37', [2, 15, 14])]), None), ([0.13976883254442918, 0.32165685642467046, 0.5896115492895033, 0.37264957264957266, 0.8065735259294341, 0.19342647407056593, 0.6273504273504272, 0.22991452991452993, 0.09729102533743784, 0.06514799905280606, 0.08917378917378918, 0.08917378917378918, 0.003961611848370844, 0.03441495300133449], 'Decision Tree', 'Bernoulli Naive Bayes', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'Hx Chronic Disease', [5, 2, 2, 3, 3, 2]), (u'Marital Status_Widowed', [5, 3, 3, 2, 2, 3]), (u'HIV Status_Positive', [5, 4, 4, 4, 4, 4]), (u'Marital Status_Divorced/separated', [5, 5, 6, 5, 8, 6]), (u'Hx of Tobacco Use_Currently smokes', [5, 6, 5, 6, 5, 5]), (u'Body Mass Index_Overweight/Obese', [5, 7, 7, 7, 6, 7]), (u'MDR-TB', [5, 8, 9, 8, 10, 8]), (u'Age_38 and older', [5, 9, 8, 9, 7, 9]), (u'Prison Hx', [5, 10, 10, 10, 9, 10]), (u'Sex_Female', [5, 11, 11, 13, 11, 12]), (u'Body Mass Index_Underweight', [5, 12, 12, 11, 12, 11]), (u'Hx of Rehab', [5, 13, 13, 12, 13, 13]), (u'Age_22 to 26', [3, 14, 15, 15]), (u'Age_21 and younger', [5, 15, 14, 14, 15, 14]), (u'Age_27 to 37', [2, 15, 14])]), None), ([0.26488196814276116, 0.37849012591964254, 0.6771773350793004, 0.5527065527065527, 0.8016481174520482, 0.19835188254795172, 0.4472934472934472, 0.32022792022792024, 0.2812218801799668, 0.0855837082642671, 0.1561253561253561, 0.1561253561253561, 0.09990965327444247, 0.052038715246815664], 'Extreme Learning Machine', 'Bernoulli Naive Bayes', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'Hx Chronic Disease', [5, 2, 2, 3, 3, 2]), (u'Marital Status_Widowed', [5, 3, 3, 2, 2, 3]), (u'HIV Status_Positive', [5, 4, 4, 4, 4, 4]), (u'Marital Status_Divorced/separated', [5, 5, 6, 5, 8, 6]), (u'Hx of Tobacco Use_Currently smokes', [5, 6, 5, 6, 5, 5]), (u'Body Mass Index_Overweight/Obese', [5, 7, 7, 7, 6, 7]), (u'MDR-TB', [5, 8, 9, 8, 10, 8]), (u'Age_38 and older', [5, 9, 8, 9, 7, 9]), (u'Prison Hx', [5, 10, 10, 10, 9, 10]), (u'Sex_Female', [5, 11, 11, 13, 11, 12]), (u'Body Mass Index_Underweight', [5, 12, 12, 11, 12, 11]), (u'Hx of Rehab', [5, 13, 13, 12, 13, 13]), (u'Age_22 to 26', [3, 14, 15, 15]), (u'Age_21 and younger', [5, 15, 14, 14, 15, 14]), (u'Age_27 to 37', [2, 15, 14])]), None), ([0.054630743500707506, 0.16739787963200514, 0.5198807034871444, 0.9774928774928775, 0.06226852948141132, 0.9377314705185886, 0.022507122507122508, 0.97008547008547, 0.06226852948141132, 0.9338290314941984, 0.022507122507122508, 0.022507122507122508, 0.0073656881066824775, 0.007828058917752703], 'Gaussian Naive Bayes', 'Bernoulli Naive Bayes', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'Hx Chronic Disease', [5, 2, 2, 3, 3, 2]), (u'Marital Status_Widowed', [5, 3, 3, 2, 2, 3]), (u'HIV Status_Positive', [5, 4, 4, 4, 4, 4]), (u'Marital Status_Divorced/separated', [5, 5, 6, 5, 8, 6]), (u'Hx of Tobacco Use_Currently smokes', [5, 6, 5, 6, 5, 5]), (u'Body Mass Index_Overweight/Obese', [5, 7, 7, 7, 6, 7]), (u'MDR-TB', [5, 8, 9, 8, 10, 8]), (u'Age_38 and older', [5, 9, 8, 9, 7, 9]), (u'Prison Hx', [5, 10, 10, 10, 9, 10]), (u'Sex_Female', [5, 11, 11, 13, 11, 12]), (u'Body Mass Index_Underweight', [5, 12, 12, 11, 12, 11]), (u'Hx of Rehab', [5, 13, 13, 12, 13, 13]), (u'Age_22 to 26', [3, 14, 15, 15]), (u'Age_21 and younger', [5, 15, 14, 14, 15, 14]), (u'Age_27 to 37', [2, 15, 14])]), None), ([0.059937772992535554, 0.16657487091222031, 0.5341121642234595, 0.9028490028490028, 0.16537532559791618, 0.8346246744020839, 0.09715099715099715, 0.4931623931623932, 0.027246033625384795, 0.5506938195595549, 0.014814814814814814, 0.014814814814814814, 0.0016729086302695872, 0.030468236589200906], 'K-nearest neighbours', 'Bernoulli Naive Bayes', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'Hx Chronic Disease', [5, 2, 2, 3, 3, 2]), (u'Marital Status_Widowed', [5, 3, 3, 2, 2, 3]), (u'HIV Status_Positive', [5, 4, 4, 4, 4, 4]), (u'Marital Status_Divorced/separated', [5, 5, 6, 5, 8, 6]), (u'Hx of Tobacco Use_Currently smokes', [5, 6, 5, 6, 5, 5]), (u'Body Mass Index_Overweight/Obese', [5, 7, 7, 7, 6, 7]), (u'MDR-TB', [5, 8, 9, 8, 10, 8]), (u'Age_38 and older', [5, 9, 8, 9, 7, 9]), (u'Prison Hx', [5, 10, 10, 10, 9, 10]), (u'Sex_Female', [5, 11, 11, 13, 11, 12]), (u'Body Mass Index_Underweight', [5, 12, 12, 11, 12, 11]), (u'Hx of Rehab', [5, 13, 13, 12, 13, 13]), (u'Age_22 to 26', [3, 14, 15, 15]), (u'Age_21 and younger', [5, 15, 14, 14, 15, 14]), (u'Age_27 to 37', [2, 15, 14])]), None), ([0.20926085484610629, 0.35570281121952985, 0.6512555312010676, 0.574928774928775, 0.7275822874733603, 0.2724177125266398, 0.4250712250712251, 0.24558404558404553, 0.17901018233483307, 0.07195358749704002, 0.08148148148148147, 0.08148148148148147, 0.022499443822780366, 0.0400249307879172], 'Logistic regression', 'Bernoulli Naive Bayes', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'Hx Chronic Disease', [5, 2, 2, 3, 3, 2]), (u'Marital Status_Widowed', [5, 3, 3, 2, 2, 3]), (u'HIV Status_Positive', [5, 4, 4, 4, 4, 4]), (u'Marital Status_Divorced/separated', [5, 5, 6, 5, 8, 6]), (u'Hx of Tobacco Use_Currently smokes', [5, 6, 5, 6, 5, 5]), (u'Body Mass Index_Overweight/Obese', [5, 7, 7, 7, 6, 7]), (u'MDR-TB', [5, 8, 9, 8, 10, 8]), (u'Age_38 and older', [5, 9, 8, 9, 7, 9]), (u'Prison Hx', [5, 10, 10, 10, 9, 10]), (u'Sex_Female', [5, 11, 11, 13, 11, 12]), (u'Body Mass Index_Underweight', [5, 12, 12, 11, 12, 11]), (u'Hx of Rehab', [5, 13, 13, 12, 13, 13]), (u'Age_22 to 26', [3, 14, 15, 15]), (u'Age_21 and younger', [5, 15, 14, 14, 15, 14]), (u'Age_27 to 37', [2, 15, 14])]), None), ([0.21099731526612028, 0.31546118725198857, 0.6517439027763442, 0.5680911680911681, 0.7353966374615203, 0.2646033625384797, 0.4319088319088319, 0.19344729344729344, 0.08463651432630832, 0.06513379114373667, 0.029914529914529912, 0.029914529914529912, 0.45352758231498325, 0.038495898106173196], 'Random forest', 'Bernoulli Naive Bayes', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'Hx Chronic Disease', [5, 2, 2, 3, 3, 2]), (u'Marital Status_Widowed', [5, 3, 3, 2, 2, 3]), (u'HIV Status_Positive', [5, 4, 4, 4, 4, 4]), (u'Marital Status_Divorced/separated', [5, 5, 6, 5, 8, 6]), (u'Hx of Tobacco Use_Currently smokes', [5, 6, 5, 6, 5, 5]), (u'Body Mass Index_Overweight/Obese', [5, 7, 7, 7, 6, 7]), (u'MDR-TB', [5, 8, 9, 8, 10, 8]), (u'Age_38 and older', [5, 9, 8, 9, 7, 9]), (u'Prison Hx', [5, 10, 10, 10, 9, 10]), (u'Sex_Female', [5, 11, 11, 13, 11, 12]), (u'Body Mass Index_Underweight', [5, 12, 12, 11, 12, 11]), (u'Hx of Rehab', [5, 13, 13, 12, 13, 13]), (u'Age_22 to 26', [3, 14, 15, 15]), (u'Age_21 and younger', [5, 15, 14, 14, 15, 14]), (u'Age_27 to 37', [2, 15, 14])]), None), ([0.23415256438427015, 0.32570512503962634, 0.6604056607655944, 0.5387464387464387, 0.7820648827847501, 0.2179351172152498, 0.46125356125356126, 0.20056980056980053, 0.018484489699265923, 0.06019891072697135, 0.0, 0.0, 0.07384765664501233, 0.04710606183033216], 'SVM (RDF)', 'Bernoulli Naive Bayes', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'Hx Chronic Disease', [5, 2, 2, 3, 3, 2]), (u'Marital Status_Widowed', [5, 3, 3, 2, 2, 3]), (u'HIV Status_Positive', [5, 4, 4, 4, 4, 4]), (u'Marital Status_Divorced/separated', [5, 5, 6, 5, 8, 6]), (u'Hx of Tobacco Use_Currently smokes', [5, 6, 5, 6, 5, 5]), (u'Body Mass Index_Overweight/Obese', [5, 7, 7, 7, 6, 7]), (u'MDR-TB', [5, 8, 9, 8, 10, 8]), (u'Age_38 and older', [5, 9, 8, 9, 7, 9]), (u'Prison Hx', [5, 10, 10, 10, 9, 10]), (u'Sex_Female', [5, 11, 11, 13, 11, 12]), (u'Body Mass Index_Underweight', [5, 12, 12, 11, 12, 11]), (u'Hx of Rehab', [5, 13, 13, 12, 13, 13]), (u'Age_22 to 26', [3, 14, 15, 15]), (u'Age_21 and younger', [5, 15, 14, 14, 15, 14]), (u'Age_27 to 37', [2, 15, 14])]), None), ([0.19671735090997264, 0.33709982107666847, 0.6403894019522719, 0.5444444444444444, 0.7363343594600995, 0.2636656405399006, 0.45555555555555555, 0.23048433048433048, 0.09727681742836844, 0.06323940326781909, 0.037037037037037035, 0.037037037037037035, 3.6795498541562965, 0.03610470457558864], 'SVM (linear)', 'Bernoulli Naive Bayes', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'Hx Chronic Disease', [5, 2, 2, 3, 3, 2]), (u'Marital Status_Widowed', [5, 3, 3, 2, 2, 3]), (u'HIV Status_Positive', [5, 4, 4, 4, 4, 4]), (u'Marital Status_Divorced/separated', [5, 5, 6, 5, 8, 6]), (u'Hx of Tobacco Use_Currently smokes', [5, 6, 5, 6, 5, 5]), (u'Body Mass Index_Overweight/Obese', [5, 7, 7, 7, 6, 7]), (u'MDR-TB', [5, 8, 9, 8, 10, 8]), (u'Age_38 and older', [5, 9, 8, 9, 7, 9]), (u'Prison Hx', [5, 10, 10, 10, 9, 10]), (u'Sex_Female', [5, 11, 11, 13, 11, 12]), (u'Body Mass Index_Underweight', [5, 12, 12, 11, 12, 11]), (u'Hx of Rehab', [5, 13, 13, 12, 13, 13]), (u'Age_22 to 26', [3, 14, 15, 15]), (u'Age_21 and younger', [5, 15, 14, 14, 15, 14]), (u'Age_27 to 37', [2, 15, 14])]), None), ([0.11516509126127893, 0.25255513662243018, 0.5889972967192953, 0.6173789173789174, 0.5606156760596732, 0.4393843239403267, 0.3826210826210826, 0.0, 0.0, 0.0, 0.0, 0.0, 0.05272227996134981, 0.03517926158965611], 'SVM (polynomial)', 'Bernoulli Naive Bayes', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 1, 1]), (u'Hx Chronic Disease', [5, 2, 2, 3, 3, 2]), (u'Marital Status_Widowed', [5, 3, 3, 2, 2, 3]), (u'HIV Status_Positive', [5, 4, 4, 4, 4, 4]), (u'Marital Status_Divorced/separated', [5, 5, 6, 5, 8, 6]), (u'Hx of Tobacco Use_Currently smokes', [5, 6, 5, 6, 5, 5]), (u'Body Mass Index_Overweight/Obese', [5, 7, 7, 7, 6, 7]), (u'MDR-TB', [5, 8, 9, 8, 10, 8]), (u'Age_38 and older', [5, 9, 8, 9, 7, 9]), (u'Prison Hx', [5, 10, 10, 10, 9, 10]), (u'Sex_Female', [5, 11, 11, 13, 11, 12]), (u'Body Mass Index_Underweight', [5, 12, 12, 11, 12, 11]), (u'Hx of Rehab', [5, 13, 13, 12, 13, 13]), (u'Age_22 to 26', [3, 14, 15, 15]), (u'Age_21 and younger', [5, 15, 14, 14, 15, 14]), (u'Age_27 to 37', [2, 15, 14])]), None)], 'Bernoulli Naive Bayes'), ('SVM (linear)', [([0.27977165204165594, 0.25627735229726722, 0.7009428897375855, 0.6566951566951567, 0.7451906227800142, 0.2548093772199858, 0.3433048433048433, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8208523744163909, 0.03265461641344091], 'AdaBoost', 'SVM (linear)', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 2, 1]), (u'MDR-TB', [5, 2, 2, 2, 1, 2]), (u'Prison Hx', [5, 3, 5, 3, 7, 4]), (u'Marital Status_Divorced/separated', [2, 4, 14]), (u'History of Drug Use', [5, 5, 3, 4, 3, 3]), (u'HIV Status_Test not done', [4, 6, 10, 9, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 6, 4, 6]), (u'Completed Secondary Education', [5, 8, 6, 5, 6, 5]), (u'Body Mass Index_Underweight', [5, 9, 14, 12, 13, 12]), (u'Hx of Rehab', [3, 10, 15, 7]), (u'Marital Status_Widowed', [4, 11, 9, 12, 15]), (u'Hx of Tobacco Use_Currently smokes', [4, 12, 9, 11, 11]), (u'HIV Status_Negative', [4, 13, 7, 8, 9]), (u'Age_27 to 37', [2, 14, 10]), (u'Age_38 and older', [5, 15, 12, 8, 5, 10]), (u'Hx of Tobacco Use_Never smoked', [2, 8, 14]), (u'HIV Status_Positive', [2, 10, 13]), (u'Age_21 and younger', [2, 11, 11]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Body Mass Index_Overweight/Obese', [2, 15, 15]), (u'Hx Chronic Disease', [1, 8]), (u'Marital Status_Single', [1, 13])]), None), ([0.27886832605601319, 0.42675810915172618, 0.700595167017142, 0.656980056980057, 0.7442102770542268, 0.2557897229457732, 0.343019943019943, 0.4478632478632479, 0.45037177362064884, 0.09045228510537533, 0.11168091168091168, 0.11168091168091168, 2.8025026012793437, 0.03152123407142761], 'Artificial neural network', 'SVM (linear)', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 2, 1]), (u'MDR-TB', [5, 2, 2, 2, 1, 2]), (u'Prison Hx', [5, 3, 5, 3, 7, 4]), (u'Marital Status_Divorced/separated', [2, 4, 14]), (u'History of Drug Use', [5, 5, 3, 4, 3, 3]), (u'HIV Status_Test not done', [4, 6, 10, 9, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 6, 4, 6]), (u'Completed Secondary Education', [5, 8, 6, 5, 6, 5]), (u'Body Mass Index_Underweight', [5, 9, 14, 12, 13, 12]), (u'Hx of Rehab', [3, 10, 15, 7]), (u'Marital Status_Widowed', [4, 11, 9, 12, 15]), (u'Hx of Tobacco Use_Currently smokes', [4, 12, 9, 11, 11]), (u'HIV Status_Negative', [4, 13, 7, 8, 9]), (u'Age_27 to 37', [2, 14, 10]), (u'Age_38 and older', [5, 15, 12, 8, 5, 10]), (u'Hx of Tobacco Use_Never smoked', [2, 8, 14]), (u'HIV Status_Positive', [2, 10, 13]), (u'Age_21 and younger', [2, 11, 11]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Body Mass Index_Overweight/Obese', [2, 15, 15]), (u'Hx Chronic Disease', [1, 8]), (u'Marital Status_Single', [1, 13])]), None), ([0.22096867546071355, 0.41373638166427051, 0.6627910378182698, 0.6193732193732193, 0.7062088562633199, 0.29379114373668014, 0.38062678062678057, 0.3811965811965812, 0.3530475964953824, 0.10023206251479991, 0.20940170940170938, 0.20940170940170938, 0.004360670890091673, 0.021938316266424868], 'Bernoulli Naive Bayes', 'SVM (linear)', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 2, 1]), (u'MDR-TB', [5, 2, 2, 2, 1, 2]), (u'Prison Hx', [5, 3, 5, 3, 7, 4]), (u'Marital Status_Divorced/separated', [2, 4, 14]), (u'History of Drug Use', [5, 5, 3, 4, 3, 3]), (u'HIV Status_Test not done', [4, 6, 10, 9, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 6, 4, 6]), (u'Completed Secondary Education', [5, 8, 6, 5, 6, 5]), (u'Body Mass Index_Underweight', [5, 9, 14, 12, 13, 12]), (u'Hx of Rehab', [3, 10, 15, 7]), (u'Marital Status_Widowed', [4, 11, 9, 12, 15]), (u'Hx of Tobacco Use_Currently smokes', [4, 12, 9, 11, 11]), (u'HIV Status_Negative', [4, 13, 7, 8, 9]), (u'Age_27 to 37', [2, 14, 10]), (u'Age_38 and older', [5, 15, 12, 8, 5, 10]), (u'Hx of Tobacco Use_Never smoked', [2, 8, 14]), (u'HIV Status_Positive', [2, 10, 13]), (u'Age_21 and younger', [2, 11, 11]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Body Mass Index_Overweight/Obese', [2, 15, 15]), (u'Hx Chronic Disease', [1, 8]), (u'Marital Status_Single', [1, 13])]), None), ([0.20835961571637004, 0.37570300906368626, 0.6452864148507057, 0.5299145299145298, 0.7606582997868813, 0.23934170021311862, 0.4700854700854701, 0.335042735042735, 0.03405162206961876, 0.08074354724129766, 0.014814814814814814, 0.014814814814814814, 0.008187653137398, 0.024238780886567866], 'Decision Tree', 'SVM (linear)', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 2, 1]), (u'MDR-TB', [5, 2, 2, 2, 1, 2]), (u'Prison Hx', [5, 3, 5, 3, 7, 4]), (u'Marital Status_Divorced/separated', [2, 4, 14]), (u'History of Drug Use', [5, 5, 3, 4, 3, 3]), (u'HIV Status_Test not done', [4, 6, 10, 9, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 6, 4, 6]), (u'Completed Secondary Education', [5, 8, 6, 5, 6, 5]), (u'Body Mass Index_Underweight', [5, 9, 14, 12, 13, 12]), (u'Hx of Rehab', [3, 10, 15, 7]), (u'Marital Status_Widowed', [4, 11, 9, 12, 15]), (u'Hx of Tobacco Use_Currently smokes', [4, 12, 9, 11, 11]), (u'HIV Status_Negative', [4, 13, 7, 8, 9]), (u'Age_27 to 37', [2, 14, 10]), (u'Age_38 and older', [5, 15, 12, 8, 5, 10]), (u'Hx of Tobacco Use_Never smoked', [2, 8, 14]), (u'HIV Status_Positive', [2, 10, 13]), (u'Age_21 and younger', [2, 11, 11]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Body Mass Index_Overweight/Obese', [2, 15, 15]), (u'Hx Chronic Disease', [1, 8]), (u'Marital Status_Single', [1, 13])]), None), ([0.30815752784069705, 0.4513262259103632, 0.7142271093111727, 0.6492877492877492, 0.7791664693345963, 0.22083353066540373, 0.35071225071225076, 0.35840455840455837, 0.4980203646696661, 0.07882074354724129, 0.14188034188034188, 0.14188034188034188, 0.12178062438552603, 0.058733789189378924], 'Extreme Learning Machine', 'SVM (linear)', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 2, 1]), (u'MDR-TB', [5, 2, 2, 2, 1, 2]), (u'Prison Hx', [5, 3, 5, 3, 7, 4]), (u'Marital Status_Divorced/separated', [2, 4, 14]), (u'History of Drug Use', [5, 5, 3, 4, 3, 3]), (u'HIV Status_Test not done', [4, 6, 10, 9, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 6, 4, 6]), (u'Completed Secondary Education', [5, 8, 6, 5, 6, 5]), (u'Body Mass Index_Underweight', [5, 9, 14, 12, 13, 12]), (u'Hx of Rehab', [3, 10, 15, 7]), (u'Marital Status_Widowed', [4, 11, 9, 12, 15]), (u'Hx of Tobacco Use_Currently smokes', [4, 12, 9, 11, 11]), (u'HIV Status_Negative', [4, 13, 7, 8, 9]), (u'Age_27 to 37', [2, 14, 10]), (u'Age_38 and older', [5, 15, 12, 8, 5, 10]), (u'Hx of Tobacco Use_Never smoked', [2, 8, 14]), (u'HIV Status_Positive', [2, 10, 13]), (u'Age_21 and younger', [2, 11, 11]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Body Mass Index_Overweight/Obese', [2, 15, 15]), (u'Hx Chronic Disease', [1, 8]), (u'Marital Status_Single', [1, 13])]), None), ([0.058955878287896835, 0.16196841545560217, 0.520186348938421, 0.9849002849002849, 0.05547241297655695, 0.9445275870234431, 0.0150997150997151, 0.9849002849002849, 0.05547241297655695, 0.9445275870234431, 0.0150997150997151, 0.0150997150997151, 0.007496997246734027, 0.007773983834149093], 'Gaussian Naive Bayes', 'SVM (linear)', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 2, 1]), (u'MDR-TB', [5, 2, 2, 2, 1, 2]), (u'Prison Hx', [5, 3, 5, 3, 7, 4]), (u'Marital Status_Divorced/separated', [2, 4, 14]), (u'History of Drug Use', [5, 5, 3, 4, 3, 3]), (u'HIV Status_Test not done', [4, 6, 10, 9, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 6, 4, 6]), (u'Completed Secondary Education', [5, 8, 6, 5, 6, 5]), (u'Body Mass Index_Underweight', [5, 9, 14, 12, 13, 12]), (u'Hx of Rehab', [3, 10, 15, 7]), (u'Marital Status_Widowed', [4, 11, 9, 12, 15]), (u'Hx of Tobacco Use_Currently smokes', [4, 12, 9, 11, 11]), (u'HIV Status_Negative', [4, 13, 7, 8, 9]), (u'Age_27 to 37', [2, 14, 10]), (u'Age_38 and older', [5, 15, 12, 8, 5, 10]), (u'Hx of Tobacco Use_Never smoked', [2, 8, 14]), (u'HIV Status_Positive', [2, 10, 13]), (u'Age_21 and younger', [2, 11, 11]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Body Mass Index_Overweight/Obese', [2, 15, 15]), (u'Hx Chronic Disease', [1, 8]), (u'Marital Status_Single', [1, 13])]), None), ([0.022675873125352037, 0.20579173838209983, 0.517194362981718, 0.6948717948717948, 0.339516931091641, 0.660483068908359, 0.3051282051282051, 0.2686609686609686, 0.03308548425290078, 0.2849869760833531, 0.02222222222222222, 0.02222222222222222, 0.0017012834789258413, 0.05032848146222159], 'K-nearest neighbours', 'SVM (linear)', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 2, 1]), (u'MDR-TB', [5, 2, 2, 2, 1, 2]), (u'Prison Hx', [5, 3, 5, 3, 7, 4]), (u'Marital Status_Divorced/separated', [2, 4, 14]), (u'History of Drug Use', [5, 5, 3, 4, 3, 3]), (u'HIV Status_Test not done', [4, 6, 10, 9, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 6, 4, 6]), (u'Completed Secondary Education', [5, 8, 6, 5, 6, 5]), (u'Body Mass Index_Underweight', [5, 9, 14, 12, 13, 12]), (u'Hx of Rehab', [3, 10, 15, 7]), (u'Marital Status_Widowed', [4, 11, 9, 12, 15]), (u'Hx of Tobacco Use_Currently smokes', [4, 12, 9, 11, 11]), (u'HIV Status_Negative', [4, 13, 7, 8, 9]), (u'Age_27 to 37', [2, 14, 10]), (u'Age_38 and older', [5, 15, 12, 8, 5, 10]), (u'Hx of Tobacco Use_Never smoked', [2, 8, 14]), (u'HIV Status_Positive', [2, 10, 13]), (u'Age_21 and younger', [2, 11, 11]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Body Mass Index_Overweight/Obese', [2, 15, 15]), (u'Hx Chronic Disease', [1, 8]), (u'Marital Status_Single', [1, 13])]), None), ([0.26483575549351257, 0.42860324903195302, 0.6899600208598551, 0.6347578347578346, 0.7451622069618754, 0.2548377930381246, 0.36524216524216524, 0.4700854700854701, 0.4552403504617571, 0.09432157234193703, 0.1190883190883191, 0.1190883190883191, 0.035339062839120944, 0.04052293894092048], 'Logistic regression', 'SVM (linear)', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 2, 1]), (u'MDR-TB', [5, 2, 2, 2, 1, 2]), (u'Prison Hx', [5, 3, 5, 3, 7, 4]), (u'Marital Status_Divorced/separated', [2, 4, 14]), (u'History of Drug Use', [5, 5, 3, 4, 3, 3]), (u'HIV Status_Test not done', [4, 6, 10, 9, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 6, 4, 6]), (u'Completed Secondary Education', [5, 8, 6, 5, 6, 5]), (u'Body Mass Index_Underweight', [5, 9, 14, 12, 13, 12]), (u'Hx of Rehab', [3, 10, 15, 7]), (u'Marital Status_Widowed', [4, 11, 9, 12, 15]), (u'Hx of Tobacco Use_Currently smokes', [4, 12, 9, 11, 11]), (u'HIV Status_Negative', [4, 13, 7, 8, 9]), (u'Age_27 to 37', [2, 14, 10]), (u'Age_38 and older', [5, 15, 12, 8, 5, 10]), (u'Hx of Tobacco Use_Never smoked', [2, 8, 14]), (u'HIV Status_Positive', [2, 10, 13]), (u'Age_21 and younger', [2, 11, 11]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Body Mass Index_Overweight/Obese', [2, 15, 15]), (u'Hx Chronic Disease', [1, 8]), (u'Marital Status_Single', [1, 13])]), None), ([0.29502815422322703, 0.37650049548479697, 0.7051163786967717, 0.6339031339031338, 0.7763296234904097, 0.22367037650959035, 0.3660968660968661, 0.36581196581196573, 0.22867156050201273, 0.07095903386218329, 0.08176638176638176, 0.08176638176638176, 0.410884410827963, 0.037667463063262414], 'Random forest', 'SVM (linear)', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 2, 1]), (u'MDR-TB', [5, 2, 2, 2, 1, 2]), (u'Prison Hx', [5, 3, 5, 3, 7, 4]), (u'Marital Status_Divorced/separated', [2, 4, 14]), (u'History of Drug Use', [5, 5, 3, 4, 3, 3]), (u'HIV Status_Test not done', [4, 6, 10, 9, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 6, 4, 6]), (u'Completed Secondary Education', [5, 8, 6, 5, 6, 5]), (u'Body Mass Index_Underweight', [5, 9, 14, 12, 13, 12]), (u'Hx of Rehab', [3, 10, 15, 7]), (u'Marital Status_Widowed', [4, 11, 9, 12, 15]), (u'Hx of Tobacco Use_Currently smokes', [4, 12, 9, 11, 11]), (u'HIV Status_Negative', [4, 13, 7, 8, 9]), (u'Age_27 to 37', [2, 14, 10]), (u'Age_38 and older', [5, 15, 12, 8, 5, 10]), (u'Hx of Tobacco Use_Never smoked', [2, 8, 14]), (u'HIV Status_Positive', [2, 10, 13]), (u'Age_21 and younger', [2, 11, 11]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Body Mass Index_Overweight/Obese', [2, 15, 15]), (u'Hx Chronic Disease', [1, 8]), (u'Marital Status_Single', [1, 13])]), None), ([0.25753487313439927, 0.38997053503564605, 0.6834864832591567, 0.6188034188034188, 0.7481695477148946, 0.25183045228510537, 0.3811965811965812, 0.37293447293447296, 0.43356855316125975, 0.07777409424579683, 0.14074074074074075, 0.14074074074074075, 0.06427446568499758, 0.0326568631467393], 'SVM (RDF)', 'SVM (linear)', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 2, 1]), (u'MDR-TB', [5, 2, 2, 2, 1, 2]), (u'Prison Hx', [5, 3, 5, 3, 7, 4]), (u'Marital Status_Divorced/separated', [2, 4, 14]), (u'History of Drug Use', [5, 5, 3, 4, 3, 3]), (u'HIV Status_Test not done', [4, 6, 10, 9, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 6, 4, 6]), (u'Completed Secondary Education', [5, 8, 6, 5, 6, 5]), (u'Body Mass Index_Underweight', [5, 9, 14, 12, 13, 12]), (u'Hx of Rehab', [3, 10, 15, 7]), (u'Marital Status_Widowed', [4, 11, 9, 12, 15]), (u'Hx of Tobacco Use_Currently smokes', [4, 12, 9, 11, 11]), (u'HIV Status_Negative', [4, 13, 7, 8, 9]), (u'Age_27 to 37', [2, 14, 10]), (u'Age_38 and older', [5, 15, 12, 8, 5, 10]), (u'Hx of Tobacco Use_Never smoked', [2, 8, 14]), (u'HIV Status_Positive', [2, 10, 13]), (u'Age_21 and younger', [2, 11, 11]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Body Mass Index_Overweight/Obese', [2, 15, 15]), (u'Hx Chronic Disease', [1, 8]), (u'Marital Status_Single', [1, 13])]), None), ([0.27618872310410575, 0.39818258257093619, 0.6972468566856443, 0.6424501424501424, 0.752043570921146, 0.2479564290788539, 0.3575498575498575, 0.4330484330484331, 0.3403267819085958, 0.09628699976320153, 0.059829059829059825, 0.059829059829059825, 4.829696573254049, 0.03633832328389238], 'SVM (linear)', 'SVM (linear)', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 2, 1]), (u'MDR-TB', [5, 2, 2, 2, 1, 2]), (u'Prison Hx', [5, 3, 5, 3, 7, 4]), (u'Marital Status_Divorced/separated', [2, 4, 14]), (u'History of Drug Use', [5, 5, 3, 4, 3, 3]), (u'HIV Status_Test not done', [4, 6, 10, 9, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 6, 4, 6]), (u'Completed Secondary Education', [5, 8, 6, 5, 6, 5]), (u'Body Mass Index_Underweight', [5, 9, 14, 12, 13, 12]), (u'Hx of Rehab', [3, 10, 15, 7]), (u'Marital Status_Widowed', [4, 11, 9, 12, 15]), (u'Hx of Tobacco Use_Currently smokes', [4, 12, 9, 11, 11]), (u'HIV Status_Negative', [4, 13, 7, 8, 9]), (u'Age_27 to 37', [2, 14, 10]), (u'Age_38 and older', [5, 15, 12, 8, 5, 10]), (u'Hx of Tobacco Use_Never smoked', [2, 8, 14]), (u'HIV Status_Positive', [2, 10, 13]), (u'Age_21 and younger', [2, 11, 11]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Body Mass Index_Overweight/Obese', [2, 15, 15]), (u'Hx Chronic Disease', [1, 8]), (u'Marital Status_Single', [1, 13])]), None), ([0.30838945278115948, 0.36727607675266544, 0.6603946034232561, 0.41025641025641024, 0.9105327965901019, 0.08946720340989817, 0.5897435897435896, 0.2615384615384615, 0.16449917120530427, 0.05061804404451812, 0.06666666666666667, 0.06666666666666667, 0.05189125912787185, 0.016781597252287703], 'SVM (polynomial)', 'SVM (linear)', OrderedDict([(u'Hx Diabetes Melitus', [5, 1, 1, 1, 2, 1]), (u'MDR-TB', [5, 2, 2, 2, 1, 2]), (u'Prison Hx', [5, 3, 5, 3, 7, 4]), (u'Marital Status_Divorced/separated', [2, 4, 14]), (u'History of Drug Use', [5, 5, 3, 4, 3, 3]), (u'HIV Status_Test not done', [4, 6, 10, 9, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 6, 4, 6]), (u'Completed Secondary Education', [5, 8, 6, 5, 6, 5]), (u'Body Mass Index_Underweight', [5, 9, 14, 12, 13, 12]), (u'Hx of Rehab', [3, 10, 15, 7]), (u'Marital Status_Widowed', [4, 11, 9, 12, 15]), (u'Hx of Tobacco Use_Currently smokes', [4, 12, 9, 11, 11]), (u'HIV Status_Negative', [4, 13, 7, 8, 9]), (u'Age_27 to 37', [2, 14, 10]), (u'Age_38 and older', [5, 15, 12, 8, 5, 10]), (u'Hx of Tobacco Use_Never smoked', [2, 8, 14]), (u'HIV Status_Positive', [2, 10, 13]), (u'Age_21 and younger', [2, 11, 11]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Body Mass Index_Overweight/Obese', [2, 15, 15]), (u'Hx Chronic Disease', [1, 8]), (u'Marital Status_Single', [1, 13])]), None)], 'SVM (linear)'), ('Random forest', [([0.27085386023385022, 0.25805525831245019, 0.6961954511753233, 0.656980056980057, 0.7354108453705896, 0.26458915462941035, 0.343019943019943, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5810058159383941, 0.049041083923316305], 'AdaBoost', 'Random forest', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Hx of Rehab', [5, 2, 2, 7, 4, 6]), (u'HIV Status_Negative', [5, 3, 3, 4, 5, 2]), (u'Sex_Male', [5, 4, 6, 9, 7, 15]), (u'Prison Hx', [4, 5, 14, 6, 5]), (u'Age_38 and older', [5, 6, 11, 3, 3, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 2, 2, 4]), (u'Hx Diabetes Melitus', [1, 8]), (u'Body Mass Index_Underweight', [4, 9, 8, 11, 9]), (u'HIV Status_Test not done', [3, 10, 8, 9]), (u'Marital Status_Divorced/separated', [1, 11]), (u'Completed Secondary Education', [5, 12, 5, 5, 6, 3]), (u'MDR-TB', [5, 13, 7, 14, 8, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 14, 9, 12, 10, 8]), (u'Age_27 to 37', [1, 15]), (u'Age_22 to 26', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [3, 12, 10, 12]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Sex_Female', [3, 15, 15, 11]), (u'Marital Status_Married/cohabitating', [2, 13, 13]), (u'Age_21 and younger', [2, 15, 13]), (u'Body Mass Index_Overweight/Obese', [2, 11, 10]), (u'Marital Status_Single', [1, 14])]), None), ([0.30979808967822187, 0.42922796681574787, 0.7213824106625432, 0.6868945868945868, 0.7558702344304995, 0.24412976556950036, 0.31310541310541307, 0.41082621082621085, 0.45818612360880895, 0.08849632962349041, 0.13390313390313388, 0.13390313390313388, 4.68440436815702, 0.03735655736451598], 'Artificial neural network', 'Random forest', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Hx of Rehab', [5, 2, 2, 7, 4, 6]), (u'HIV Status_Negative', [5, 3, 3, 4, 5, 2]), (u'Sex_Male', [5, 4, 6, 9, 7, 15]), (u'Prison Hx', [4, 5, 14, 6, 5]), (u'Age_38 and older', [5, 6, 11, 3, 3, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 2, 2, 4]), (u'Hx Diabetes Melitus', [1, 8]), (u'Body Mass Index_Underweight', [4, 9, 8, 11, 9]), (u'HIV Status_Test not done', [3, 10, 8, 9]), (u'Marital Status_Divorced/separated', [1, 11]), (u'Completed Secondary Education', [5, 12, 5, 5, 6, 3]), (u'MDR-TB', [5, 13, 7, 14, 8, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 14, 9, 12, 10, 8]), (u'Age_27 to 37', [1, 15]), (u'Age_22 to 26', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [3, 12, 10, 12]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Sex_Female', [3, 15, 15, 11]), (u'Marital Status_Married/cohabitating', [2, 13, 13]), (u'Age_21 and younger', [2, 15, 13]), (u'Body Mass Index_Overweight/Obese', [2, 11, 10]), (u'Marital Status_Single', [1, 14])]), None), ([0.27644462852512625, 0.53742626079286704, 0.6847213435041993, 0.5669515669515669, 0.8024911200568315, 0.19750887994316835, 0.433048433048433, 0.4478632478632479, 0.6225479516931092, 0.10412502959981056, 0.2985754985754986, 0.2985754985754986, 0.004588877119700463, 0.03460491290843271], 'Bernoulli Naive Bayes', 'Random forest', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Hx of Rehab', [5, 2, 2, 7, 4, 6]), (u'HIV Status_Negative', [5, 3, 3, 4, 5, 2]), (u'Sex_Male', [5, 4, 6, 9, 7, 15]), (u'Prison Hx', [4, 5, 14, 6, 5]), (u'Age_38 and older', [5, 6, 11, 3, 3, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 2, 2, 4]), (u'Hx Diabetes Melitus', [1, 8]), (u'Body Mass Index_Underweight', [4, 9, 8, 11, 9]), (u'HIV Status_Test not done', [3, 10, 8, 9]), (u'Marital Status_Divorced/separated', [1, 11]), (u'Completed Secondary Education', [5, 12, 5, 5, 6, 3]), (u'MDR-TB', [5, 13, 7, 14, 8, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 14, 9, 12, 10, 8]), (u'Age_27 to 37', [1, 15]), (u'Age_22 to 26', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [3, 12, 10, 12]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Sex_Female', [3, 15, 15, 11]), (u'Marital Status_Married/cohabitating', [2, 13, 13]), (u'Age_21 and younger', [2, 15, 13]), (u'Body Mass Index_Overweight/Obese', [2, 11, 10]), (u'Marital Status_Single', [1, 14])]), None), ([0.19368108490272889, 0.36930933053699311, 0.6253806552504161, 0.4404558404558404, 0.8103054700449916, 0.18969452995500827, 0.5595441595441596, 0.2760683760683761, 0.2257305233246507, 0.09526403031020601, 0.1492877492877493, 0.1492877492877493, 0.0040968451696196985, 0.052047675711882124], 'Decision Tree', 'Random forest', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Hx of Rehab', [5, 2, 2, 7, 4, 6]), (u'HIV Status_Negative', [5, 3, 3, 4, 5, 2]), (u'Sex_Male', [5, 4, 6, 9, 7, 15]), (u'Prison Hx', [4, 5, 14, 6, 5]), (u'Age_38 and older', [5, 6, 11, 3, 3, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 2, 2, 4]), (u'Hx Diabetes Melitus', [1, 8]), (u'Body Mass Index_Underweight', [4, 9, 8, 11, 9]), (u'HIV Status_Test not done', [3, 10, 8, 9]), (u'Marital Status_Divorced/separated', [1, 11]), (u'Completed Secondary Education', [5, 12, 5, 5, 6, 3]), (u'MDR-TB', [5, 13, 7, 14, 8, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 14, 9, 12, 10, 8]), (u'Age_27 to 37', [1, 15]), (u'Age_22 to 26', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [3, 12, 10, 12]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Sex_Female', [3, 15, 15, 11]), (u'Marital Status_Married/cohabitating', [2, 13, 13]), (u'Age_21 and younger', [2, 15, 13]), (u'Body Mass Index_Overweight/Obese', [2, 11, 10]), (u'Marital Status_Single', [1, 14])]), None), ([0.23038218261041959, 0.43099970880678218, 0.6647479175563475, 0.5891737891737892, 0.7403220459389059, 0.259677954061094, 0.41082621082621074, 0.3515669515669516, 0.3931044281316599, 0.08266161496566422, 0.11965811965811965, 0.11965811965811965, 0.14427976634821438, 0.01212666088572656], 'Extreme Learning Machine', 'Random forest', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Hx of Rehab', [5, 2, 2, 7, 4, 6]), (u'HIV Status_Negative', [5, 3, 3, 4, 5, 2]), (u'Sex_Male', [5, 4, 6, 9, 7, 15]), (u'Prison Hx', [4, 5, 14, 6, 5]), (u'Age_38 and older', [5, 6, 11, 3, 3, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 2, 2, 4]), (u'Hx Diabetes Melitus', [1, 8]), (u'Body Mass Index_Underweight', [4, 9, 8, 11, 9]), (u'HIV Status_Test not done', [3, 10, 8, 9]), (u'Marital Status_Divorced/separated', [1, 11]), (u'Completed Secondary Education', [5, 12, 5, 5, 6, 3]), (u'MDR-TB', [5, 13, 7, 14, 8, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 14, 9, 12, 10, 8]), (u'Age_27 to 37', [1, 15]), (u'Age_22 to 26', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [3, 12, 10, 12]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Sex_Female', [3, 15, 15, 11]), (u'Marital Status_Married/cohabitating', [2, 13, 13]), (u'Age_21 and younger', [2, 15, 13]), (u'Body Mass Index_Overweight/Obese', [2, 11, 10]), (u'Marital Status_Single', [1, 14])]), None), ([0.21547361232568615, 0.61646086373884668, 0.6634318172158571, 0.6641025641025642, 0.6627610703291499, 0.33723892967085006, 0.33589743589743587, 0.649002849002849, 0.636481174520483, 0.323608808903623, 0.3136752136752137, 0.3136752136752137, 0.007536540918795964, 0.08588567692449249], 'Gaussian Naive Bayes', 'Random forest', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Hx of Rehab', [5, 2, 2, 7, 4, 6]), (u'HIV Status_Negative', [5, 3, 3, 4, 5, 2]), (u'Sex_Male', [5, 4, 6, 9, 7, 15]), (u'Prison Hx', [4, 5, 14, 6, 5]), (u'Age_38 and older', [5, 6, 11, 3, 3, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 2, 2, 4]), (u'Hx Diabetes Melitus', [1, 8]), (u'Body Mass Index_Underweight', [4, 9, 8, 11, 9]), (u'HIV Status_Test not done', [3, 10, 8, 9]), (u'Marital Status_Divorced/separated', [1, 11]), (u'Completed Secondary Education', [5, 12, 5, 5, 6, 3]), (u'MDR-TB', [5, 13, 7, 14, 8, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 14, 9, 12, 10, 8]), (u'Age_27 to 37', [1, 15]), (u'Age_22 to 26', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [3, 12, 10, 12]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Sex_Female', [3, 15, 15, 11]), (u'Marital Status_Married/cohabitating', [2, 13, 13]), (u'Age_21 and younger', [2, 15, 13]), (u'Body Mass Index_Overweight/Obese', [2, 11, 10]), (u'Marital Status_Single', [1, 14])]), None), ([0.17521258014681221, 0.31037005163511183, 0.627451670508739, 0.5378917378917378, 0.7170116031257399, 0.28298839687426003, 0.4621082621082621, 0.2393162393162393, 0.06131186360407294, 0.07003551977267344, 0.037321937321937323, 0.037321937321937323, 0.0017504866739344038, 0.04423891802650163], 'K-nearest neighbours', 'Random forest', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Hx of Rehab', [5, 2, 2, 7, 4, 6]), (u'HIV Status_Negative', [5, 3, 3, 4, 5, 2]), (u'Sex_Male', [5, 4, 6, 9, 7, 15]), (u'Prison Hx', [4, 5, 14, 6, 5]), (u'Age_38 and older', [5, 6, 11, 3, 3, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 2, 2, 4]), (u'Hx Diabetes Melitus', [1, 8]), (u'Body Mass Index_Underweight', [4, 9, 8, 11, 9]), (u'HIV Status_Test not done', [3, 10, 8, 9]), (u'Marital Status_Divorced/separated', [1, 11]), (u'Completed Secondary Education', [5, 12, 5, 5, 6, 3]), (u'MDR-TB', [5, 13, 7, 14, 8, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 14, 9, 12, 10, 8]), (u'Age_27 to 37', [1, 15]), (u'Age_22 to 26', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [3, 12, 10, 12]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Sex_Female', [3, 15, 15, 11]), (u'Marital Status_Married/cohabitating', [2, 13, 13]), (u'Age_21 and younger', [2, 15, 13]), (u'Body Mass Index_Overweight/Obese', [2, 11, 10]), (u'Marital Status_Single', [1, 14])]), None), ([0.30035125244743638, 0.43318974408122585, 0.711912137642661, 0.6572649572649574, 0.7665593180203647, 0.23344068197963536, 0.34273504273504274, 0.44074074074074066, 0.4649869760833531, 0.08849159365380063, 0.1341880341880342, 0.1341880341880342, 0.029324500504559203, 0.04265072584043628], 'Logistic regression', 'Random forest', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Hx of Rehab', [5, 2, 2, 7, 4, 6]), (u'HIV Status_Negative', [5, 3, 3, 4, 5, 2]), (u'Sex_Male', [5, 4, 6, 9, 7, 15]), (u'Prison Hx', [4, 5, 14, 6, 5]), (u'Age_38 and older', [5, 6, 11, 3, 3, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 2, 2, 4]), (u'Hx Diabetes Melitus', [1, 8]), (u'Body Mass Index_Underweight', [4, 9, 8, 11, 9]), (u'HIV Status_Test not done', [3, 10, 8, 9]), (u'Marital Status_Divorced/separated', [1, 11]), (u'Completed Secondary Education', [5, 12, 5, 5, 6, 3]), (u'MDR-TB', [5, 13, 7, 14, 8, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 14, 9, 12, 10, 8]), (u'Age_27 to 37', [1, 15]), (u'Age_22 to 26', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [3, 12, 10, 12]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Sex_Female', [3, 15, 15, 11]), (u'Marital Status_Married/cohabitating', [2, 13, 13]), (u'Age_21 and younger', [2, 15, 13]), (u'Body Mass Index_Overweight/Obese', [2, 11, 10]), (u'Marital Status_Single', [1, 14])]), None), ([0.28049631836537275, 0.37434962212303641, 0.6976426474745205, 0.6336182336182337, 0.7616670613308074, 0.23833293866919253, 0.3663817663817664, 0.4111111111111111, 0.2626000473596969, 0.08073881127160785, 0.09658119658119657, 0.09658119658119657, 0.3517476039100542, 0.05779485590864549], 'Random forest', 'Random forest', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Hx of Rehab', [5, 2, 2, 7, 4, 6]), (u'HIV Status_Negative', [5, 3, 3, 4, 5, 2]), (u'Sex_Male', [5, 4, 6, 9, 7, 15]), (u'Prison Hx', [4, 5, 14, 6, 5]), (u'Age_38 and older', [5, 6, 11, 3, 3, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 2, 2, 4]), (u'Hx Diabetes Melitus', [1, 8]), (u'Body Mass Index_Underweight', [4, 9, 8, 11, 9]), (u'HIV Status_Test not done', [3, 10, 8, 9]), (u'Marital Status_Divorced/separated', [1, 11]), (u'Completed Secondary Education', [5, 12, 5, 5, 6, 3]), (u'MDR-TB', [5, 13, 7, 14, 8, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 14, 9, 12, 10, 8]), (u'Age_27 to 37', [1, 15]), (u'Age_22 to 26', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [3, 12, 10, 12]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Sex_Female', [3, 15, 15, 11]), (u'Marital Status_Married/cohabitating', [2, 13, 13]), (u'Age_21 and younger', [2, 15, 13]), (u'Body Mass Index_Overweight/Obese', [2, 11, 10]), (u'Marital Status_Single', [1, 14])]), None), ([0.26693296032153324, 0.37629148556081327, 0.6862992984423247, 0.6039886039886039, 0.7686099928960454, 0.23139000710395452, 0.39601139601139607, 0.3578347578347578, 0.33926118872839217, 0.07191096376983189, 0.1188034188034188, 0.1188034188034188, 0.06869671603387235, 0.04063099733480454], 'SVM (RDF)', 'Random forest', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Hx of Rehab', [5, 2, 2, 7, 4, 6]), (u'HIV Status_Negative', [5, 3, 3, 4, 5, 2]), (u'Sex_Male', [5, 4, 6, 9, 7, 15]), (u'Prison Hx', [4, 5, 14, 6, 5]), (u'Age_38 and older', [5, 6, 11, 3, 3, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 2, 2, 4]), (u'Hx Diabetes Melitus', [1, 8]), (u'Body Mass Index_Underweight', [4, 9, 8, 11, 9]), (u'HIV Status_Test not done', [3, 10, 8, 9]), (u'Marital Status_Divorced/separated', [1, 11]), (u'Completed Secondary Education', [5, 12, 5, 5, 6, 3]), (u'MDR-TB', [5, 13, 7, 14, 8, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 14, 9, 12, 10, 8]), (u'Age_27 to 37', [1, 15]), (u'Age_22 to 26', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [3, 12, 10, 12]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Sex_Female', [3, 15, 15, 11]), (u'Marital Status_Married/cohabitating', [2, 13, 13]), (u'Age_21 and younger', [2, 15, 13]), (u'Body Mass Index_Overweight/Obese', [2, 11, 10]), (u'Marital Status_Single', [1, 14])]), None), ([0.28164236978288709, 0.41082219177371065, 0.6942528468102704, 0.6054131054131053, 0.7830925882074353, 0.21690741179256454, 0.39458689458689455, 0.3883190883190883, 0.46789959744257636, 0.09044754913568552, 0.1264957264957265, 0.1264957264957265, 5.074209285035317, 0.05190874166551526], 'SVM (linear)', 'Random forest', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Hx of Rehab', [5, 2, 2, 7, 4, 6]), (u'HIV Status_Negative', [5, 3, 3, 4, 5, 2]), (u'Sex_Male', [5, 4, 6, 9, 7, 15]), (u'Prison Hx', [4, 5, 14, 6, 5]), (u'Age_38 and older', [5, 6, 11, 3, 3, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 2, 2, 4]), (u'Hx Diabetes Melitus', [1, 8]), (u'Body Mass Index_Underweight', [4, 9, 8, 11, 9]), (u'HIV Status_Test not done', [3, 10, 8, 9]), (u'Marital Status_Divorced/separated', [1, 11]), (u'Completed Secondary Education', [5, 12, 5, 5, 6, 3]), (u'MDR-TB', [5, 13, 7, 14, 8, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 14, 9, 12, 10, 8]), (u'Age_27 to 37', [1, 15]), (u'Age_22 to 26', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [3, 12, 10, 12]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Sex_Female', [3, 15, 15, 11]), (u'Marital Status_Married/cohabitating', [2, 13, 13]), (u'Age_21 and younger', [2, 15, 13]), (u'Body Mass Index_Overweight/Obese', [2, 11, 10]), (u'Marital Status_Single', [1, 14])]), None), ([0.30797384275178347, 0.37942240034813696, 0.6702916601732609, 0.4475783475783476, 0.8930049727681743, 0.10699502723182572, 0.5524216524216523, 0.39458689458689455, 0.2159744257636751, 0.07487568079564291, 0.07435897435897436, 0.07435897435897436, 0.04766370853838427, 0.04862680361121895], 'SVM (polynomial)', 'Random forest', OrderedDict([(u'History of Drug Use', [5, 1, 1, 1, 1, 1]), (u'Hx of Rehab', [5, 2, 2, 7, 4, 6]), (u'HIV Status_Negative', [5, 3, 3, 4, 5, 2]), (u'Sex_Male', [5, 4, 6, 9, 7, 15]), (u'Prison Hx', [4, 5, 14, 6, 5]), (u'Age_38 and older', [5, 6, 11, 3, 3, 7]), (u'Alcohol Use at Least Once Per Week', [5, 7, 4, 2, 2, 4]), (u'Hx Diabetes Melitus', [1, 8]), (u'Body Mass Index_Underweight', [4, 9, 8, 11, 9]), (u'HIV Status_Test not done', [3, 10, 8, 9]), (u'Marital Status_Divorced/separated', [1, 11]), (u'Completed Secondary Education', [5, 12, 5, 5, 6, 3]), (u'MDR-TB', [5, 13, 7, 14, 8, 12]), (u'Hx of Tobacco Use_Used to smoke', [5, 14, 9, 12, 10, 8]), (u'Age_27 to 37', [1, 15]), (u'Age_22 to 26', [1, 10]), (u'Hx of Tobacco Use_Never smoked', [3, 12, 10, 12]), (u'Body Mass Index_Normal', [2, 13, 14]), (u'Sex_Female', [3, 15, 15, 11]), (u'Marital Status_Married/cohabitating', [2, 13, 13]), (u'Age_21 and younger', [2, 15, 13]), (u'Body Mass Index_Overweight/Obese', [2, 11, 10]), (u'Marital Status_Single', [1, 14])]), None)], 'Random forest')], [(None, [([0.581740930938076, 0.39351889841601956, 0.794119487067772, 0.7470145564405384, 0.8412244176950059, 0.15877558230499406, 0.2529854435594617, 0.46432115719124784, 0.38106694930224344, 0.03588714765185354, 0.08050169367389912, 0.08050169367389912, 137.67591787352848, 0.017357900148337983], 'AdaBoost', None, OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'X2', [5, 2, 2, 2, 2, 2]), (u'X3', [5, 3, 3, 3, 3, 3]), (u'X4', [5, 4, 4, 4, 4, 4]), (u'X5', [5, 5, 5, 5, 5, 5]), (u'X6', [5, 6, 6, 6, 6, 6]), (u'X7', [5, 7, 7, 7, 7, 7]), (u'X8', [5, 8, 8, 8, 8, 8]), (u'X9', [5, 9, 9, 9, 9, 9]), (u'X10', [5, 10, 10, 10, 10, 10]), (u'X11', [5, 11, 11, 11, 11, 11]), (u'X12', [5, 12, 12, 12, 12, 12]), (u'X13', [5, 13, 13, 13, 13, 13]), (u'X14', [5, 14, 14, 14, 14, 14]), (u'X15', [5, 15, 15, 15, 15, 15]), (u'X16', [5, 16, 16, 16, 16, 16]), (u'X17', [5, 17, 17, 17, 17, 17]), (u'X18', [5, 18, 18, 18, 18, 18]), (u'X19', [5, 19, 19, 19, 19, 19]), (u'X20', [5, 20, 20, 20, 20, 20]), (u'X21', [5, 21, 21, 21, 21, 21]), (u'X22', [5, 22, 22, 22, 22, 22]), (u'X23', [5, 23, 23, 23, 23, 23]), (u'X24', [5, 24, 24, 24, 24, 24]), (u'X25', [5, 25, 25, 25, 25, 25]), (u'X26', [5, 26, 26, 26, 26, 26]), (u'X27', [5, 27, 27, 27, 27, 27]), (u'X28', [5, 28, 28, 28, 28, 28]), (u'X29', [5, 29, 29, 29, 29, 29]), (u'X30', [5, 30, 30, 30, 30, 30]), (u'X31', [5, 31, 31, 31, 31, 31]), (u'X32', [5, 32, 32, 32, 32, 32]), (u'X33', [5, 33, 33, 33, 33, 33]), (u'X34', [5, 34, 34, 34, 34, 34]), (u'X35', [5, 35, 35, 35, 35, 35]), (u'X36', [5, 36, 36, 36, 36, 36]), (u'X37', [5, 37, 37, 37, 37, 37]), (u'X38', [5, 38, 38, 38, 38, 38]), (u'X39', [5, 39, 39, 39, 39, 39]), (u'X40', [5, 40, 40, 40, 40, 40]), (u'X41', [5, 41, 41, 41, 41, 41]), (u'X42', [5, 42, 42, 42, 42, 42]), (u'X43', [5, 43, 43, 43, 43, 43]), (u'X44', [5, 44, 44, 44, 44, 44]), (u'X45', [5, 45, 45, 45, 45, 45]), (u'X46', [5, 46, 46, 46, 46, 46]), (u'X47', [5, 47, 47, 47, 47, 47]), (u'X48', [5, 48, 48, 48, 48, 48]), (u'X49', [5, 49, 49, 49, 49, 49]), (u'X50', [5, 50, 50, 50, 50, 50]), (u'X51', [5, 51, 51, 51, 51, 51]), (u'X52', [5, 52, 52, 52, 52, 52]), (u'X53', [5, 53, 53, 53, 53, 53]), (u'X54', [5, 54, 54, 54, 54, 54]), (u'X55', [5, 55, 55, 55, 55, 55]), (u'X56', [5, 56, 56, 56, 56, 56]), (u'X57', [5, 57, 57, 57, 57, 57]), (u'X58', [5, 58, 58, 58, 58, 58]), (u'X59', [5, 59, 59, 59, 59, 59]), (u'X60', [5, 60, 60, 60, 60, 60]), (u'X61', [5, 61, 61, 61, 61, 61]), (u'X62', [5, 62, 62, 62, 62, 62]), (u'X63', [5, 63, 63, 63, 63, 63]), (u'X64', [5, 64, 64, 64, 64, 64]), (u'X65', [5, 65, 65, 65, 65, 65]), (u'X66', [5, 66, 66, 66, 66, 66]), (u'X67', [5, 67, 67, 67, 67, 67]), (u'X68', [5, 68, 68, 68, 68, 68]), (u'X69', [5, 69, 69, 69, 69, 69]), (u'X70', [5, 70, 70, 70, 70, 70]), (u'X71', [5, 71, 71, 71, 71, 71]), (u'X72', [5, 72, 72, 72, 72, 72]), (u'X73', [5, 73, 73, 73, 73, 73]), (u'X74', [5, 74, 74, 74, 74, 74]), (u'X75', [5, 75, 75, 75, 75, 75]), (u'X76', [5, 76, 76, 76, 76, 76]), (u'X77', [5, 77, 77, 77, 77, 77]), (u'X78', [5, 78, 78, 78, 78, 78]), (u'X79', [5, 79, 79, 79, 79, 79]), (u'X80', [5, 80, 80, 80, 80, 80]), (u'X81', [5, 81, 81, 81, 81, 81]), (u'X82', [5, 82, 82, 82, 82, 82]), (u'X83', [5, 83, 83, 83, 83, 83]), (u'X84', [5, 84, 84, 84, 84, 84]), (u'X85', [5, 85, 85, 85, 85, 85]), (u'X86', [5, 86, 86, 86, 86, 86]), (u'X87', [5, 87, 87, 87, 87, 87]), (u'X88', [5, 88, 88, 88, 88, 88]), (u'X89', [5, 89, 89, 89, 89, 89]), (u'X90', [5, 90, 90, 90, 90, 90]), (u'projectCode_13', [5, 91, 91, 91, 91, 91]), (u'projectCode_25', [5, 92, 92, 92, 92, 92]), (u'projectCode_27', [5, 93, 93, 93, 93, 93]), (u'projectCode_29', [5, 94, 94, 94, 94, 94]), (u'projectCode_31', [5, 95, 95, 95, 95, 95]), (u'projectCode_40', [5, 96, 96, 96, 96, 96]), (u'projectCode_58', [5, 97, 97, 97, 97, 97]), (u'projectCode_97', [5, 98, 98, 98, 98, 98]), (u'projectCode_99', [5, 99, 99, 99, 99, 99]), (u'projectCode_161', [5, 100, 100, 100, 100, 100]), (u'projectCode_213', [5, 101, 101, 101, 101, 101]), (u'projectCode_221', [5, 102, 102, 102, 102, 102]), (u'projectCode_249', [5, 103, 103, 103, 103, 103]), (u'projectCode_258', [5, 104, 104, 104, 104, 104]), (u'projectCode_300', [5, 105, 105, 105, 105, 105]), (u'projectCode_320', [5, 106, 106, 106, 106, 106]), (u'projectCode_321', [5, 107, 107, 107, 107, 107]), (u'projectCode_363', [5, 108, 108, 108, 108, 108]), (u'projectCode_371', [5, 109, 109, 109, 109, 109]), (u'projectCode_421', [5, 110, 110, 110, 110, 110]), (u'projectCode_422', [5, 111, 111, 111, 111, 111]), (u'projectCode_473', [5, 112, 112, 112, 112, 112]), (u'projectCode_516', [5, 113, 113, 113, 113, 113]), (u'projectCode_517', [5, 114, 114, 114, 114, 114]), (u'projectCode_541', [5, 115, 115, 115, 115, 115]), (u'projectCode_549', [5, 116, 116, 116, 116, 116]), (u'projectCode_571', [5, 117, 117, 117, 117, 117]), (u'projectCode_609', [5, 118, 118, 118, 118, 118]), (u'projectCode_614', [5, 119, 119, 119, 119, 119]), (u'projectCode_710', [5, 120, 120, 120, 120, 120]), (u'projectCode_723', [5, 121, 121, 121, 121, 121]), (u'projectCode_727', [5, 122, 122, 122, 122, 122]), (u'projectCode_732', [5, 123, 123, 123, 123, 123]), (u'projectCode_735', [5, 124, 124, 124, 124, 124]), (u'projectCode_737', [5, 125, 125, 125, 125, 125]), (u'projectCode_743', [5, 126, 126, 126, 126, 126]), (u'projectCode_748', [5, 127, 127, 127, 127, 127]), (u'projectCode_959', [5, 128, 128, 128, 128, 128]), (u'projectCode_967', [5, 129, 129, 129, 129, 129]), (u'projectCode_1014', [5, 130, 130, 130, 130, 130]), (u'projectCode_1037', [5, 131, 131, 131, 131, 131]), (u'projectCode_1039', [5, 132, 132, 132, 132, 132]), (u'projectCode_1049', [5, 133, 133, 133, 133, 133]), (u'projectCode_1123', [5, 134, 134, 134, 134, 134]), (u'projectCode_1210', [5, 135, 135, 135, 135, 135]), (u'projectCode_1217', [5, 136, 136, 136, 136, 136]), (u'projectCode_1271', [5, 137, 137, 137, 137, 137]), (u'projectCode_1336', [5, 138, 138, 138, 138, 138]), (u'projectCode_1365', [5, 139, 139, 139, 139, 139]), (u'projectCode_1388', [5, 140, 140, 140, 140, 140]), (u'projectCode_1456', [5, 141, 141, 141, 141, 141]), (u'projectCode_1484', [5, 142, 142, 142, 142, 142]), (u'projectCode_1515', [5, 143, 143, 143, 143, 143]), (u'projectCode_1534', [5, 144, 144, 144, 144, 144]), (u'projectCode_1539', [5, 145, 145, 145, 145, 145]), (u'projectCode_1552', [5, 146, 146, 146, 146, 146]), (u'projectCode_1553', [5, 147, 147, 147, 147, 147]), (u'projectCode_1555', [5, 148, 148, 148, 148, 148]), (u'projectCode_1556', [5, 149, 149, 149, 149, 149]), (u'projectCode_1559', [5, 150, 150, 150, 150, 150]), (u'projectCode_1594', [5, 151, 151, 151, 151, 151]), (u'projectCode_1606', [5, 152, 152, 152, 152, 152]), (u'projectCode_1614', [5, 153, 153, 153, 153, 153]), (u'projectCode_1615', [5, 154, 154, 154, 154, 154]), (u'projectCode_1616', [5, 155, 155, 155, 155, 155]), (u'projectCode_1627', [5, 156, 156, 156, 156, 156]), (u'projectCode_1628', [5, 157, 157, 157, 157, 157]), (u'projectCode_1631', [5, 158, 158, 158, 158, 158]), (u'projectCode_1638', [5, 159, 159, 159, 159, 159]), (u'projectCode_1643', [5, 160, 160, 160, 160, 160]), (u'projectCode_1644', [5, 161, 161, 161, 161, 161]), (u'projectCode_1648', [5, 162, 162, 162, 162, 162]), (u'projectCode_1658', [5, 163, 163, 163, 163, 163]), (u'projectCode_1674', [5, 164, 164, 164, 164, 164]), (u'projectCode_1779', [5, 165, 165, 165, 165, 165]), (u'projectCode_1794', [5, 166, 166, 166, 166, 166]), (u'projectCode_1833', [5, 167, 167, 167, 167, 167]), (u'projectCode_1836', [5, 168, 168, 168, 168, 168]), (u'projectCode_1866', [5, 169, 169, 169, 169, 169]), (u'projectCode_1878', [5, 170, 170, 170, 170, 170]), (u'projectCode_1954', [5, 171, 171, 171, 171, 171]), (u'projectCode_2058', [5, 172, 172, 172, 172, 172]), (u'projectCode_2093', [5, 173, 173, 173, 173, 173]), (u'projectCode_2112', [5, 174, 174, 174, 174, 174]), (u'projectCode_2175', [5, 175, 175, 175, 175, 175]), (u'projectCode_2180', [5, 176, 176, 176, 176, 176]), (u'projectCode_2242', [5, 177, 177, 177, 177, 177]), (u'projectCode_2243', [5, 178, 178, 178, 178, 178]), (u'projectCode_2244', [5, 179, 179, 179, 179, 179]), (u'projectCode_2264', [5, 180, 180, 180, 180, 180]), (u'projectCode_2268', [5, 181, 181, 181, 181, 181]), (u'projectCode_2273', [5, 182, 182, 182, 182, 182]), (u'projectCode_2335', [5, 183, 183, 183, 183, 183]), (u'projectCode_2348', [5, 184, 184, 184, 184, 184]), (u'projectCode_2370', [5, 185, 185, 185, 185, 185]), (u'projectCode_2376', [5, 186, 186, 186, 186, 186]), (u'projectCode_2406', [5, 187, 187, 187, 187, 187]), (u'projectCode_2508', [5, 188, 188, 188, 188, 188]), (u'projectCode_2562', [5, 189, 189, 189, 189, 189]), (u'projectCode_2620', [5, 190, 190, 190, 190, 190]), (u'projectCode_2630', [5, 191, 191, 191, 191, 191]), (u'projectCode_2635', [5, 192, 192, 192, 192, 192]), (u'projectCode_2694', [5, 193, 193, 193, 193, 193]), (u'projectCode_2696', [5, 194, 194, 194, 194, 194]), (u'projectCode_2745', [5, 195, 195, 195, 195, 195]), (u'projectCode_2756', [5, 196, 196, 196, 196, 196]), (u'projectCode_2759', [5, 197, 197, 197, 197, 197]), (u'projectCode_2766', [5, 198, 198, 198, 198, 198]), (u'projectCode_2767', [5, 199, 199, 199, 199, 199]), (u'projectCode_2770', [5, 200, 200, 200, 200, 200]), (u'projectCode_2784', [5, 201, 201, 201, 201, 201]), (u'projectCode_2866', [5, 202, 202, 202, 202, 202]), (u'projectCode_2877', [5, 203, 203, 203, 203, 203]), (u'projectCode_2914', [5, 204, 204, 204, 204, 204]), (u'projectCode_2923', [5, 205, 205, 205, 205, 205]), (u'projectCode_2932', [5, 206, 206, 206, 206, 206]), (u'projectCode_2945', [5, 207, 207, 207, 207, 207]), (u'projectCode_3010', [5, 208, 208, 208, 208, 208]), (u'projectCode_3064', [5, 209, 209, 209, 209, 209]), (u'projectCode_3077', [5, 210, 210, 210, 210, 210]), (u'projectCode_3080', [5, 211, 211, 211, 211, 211]), (u'projectCode_3082', [5, 212, 212, 212, 212, 212]), (u'projectCode_3104', [5, 213, 213, 213, 213, 213]), (u'projectCode_3105', [5, 214, 214, 214, 214, 214]), (u'projectCode_3135', [5, 215, 215, 215, 215, 215]), (u'projectCode_3145', [5, 216, 216, 216, 216, 216]), (u'projectCode_3181', [5, 217, 217, 217, 217, 217]), (u'projectCode_3193', [5, 218, 218, 218, 218, 218]), (u'projectCode_3211', [5, 219, 219, 219, 219, 219]), (u'projectCode_3262', [5, 220, 220, 220, 220, 220]), (u'projectCode_3279', [5, 221, 221, 221, 221, 221]), (u'projectCode_3291', [5, 222, 222, 222, 222, 222]), (u'projectCode_3313', [5, 223, 223, 223, 223, 223]), (u'projectCode_3417', [5, 224, 224, 224, 224, 224]), (u'projectCode_3430', [5, 225, 225, 225, 225, 225]), (u'projectCode_3432', [5, 226, 226, 226, 226, 226]), (u'projectCode_3444', [5, 227, 227, 227, 227, 227]), (u'projectCode_3450', [5, 228, 228, 228, 228, 228]), (u'projectCode_3454', [5, 229, 229, 229, 229, 229]), (u'projectCode_3461', [5, 230, 230, 230, 230, 230]), (u'projectCode_3462', [5, 231, 231, 231, 231, 231]), (u'projectCode_3466', [5, 232, 232, 232, 232, 232]), (u'projectCode_3507', [5, 233, 233, 233, 233, 233]), (u'projectCode_3514', [5, 234, 234, 234, 234, 234]), (u'projectCode_3565', [5, 235, 235, 235, 235, 235]), (u'projectCode_3566', [5, 236, 236, 236, 236, 236]), (u'projectCode_3571', [5, 237, 237, 237, 237, 237]), (u'projectCode_3640', [5, 238, 238, 238, 238, 238]), (u'projectCode_3776', [5, 239, 239, 239, 239, 239]), (u'projectCode_3911', [5, 240, 240, 240, 240, 240]), (u'projectCode_3957', [5, 241, 241, 241, 241, 241]), (u'projectCode_3988', [5, 242, 242, 242, 242, 242]), (u'projectCode_4077', [5, 243, 243, 243, 243, 243]), (u'projectCode_4086', [5, 244, 244, 244, 244, 244]), (u'projectCode_4106', [5, 245, 245, 245, 245, 245]), (u'projectCode_4108', [5, 246, 246, 246, 246, 246]), (u'projectCode_4115', [5, 247, 247, 247, 247, 247]), (u'projectCode_4116', [5, 248, 248, 248, 248, 248]), (u'projectCode_4120', [5, 249, 249, 249, 249, 249]), (u'projectCode_4121', [5, 250, 250, 250, 250, 250]), (u'projectCode_4124', [5, 251, 251, 251, 251, 251]), (u'projectCode_4145', [5, 252, 252, 252, 252, 252]), (u'projectCode_4149', [5, 253, 253, 253, 253, 253]), (u'projectCode_4203', [5, 254, 254, 254, 254, 254]), (u'projectCode_4214', [5, 255, 255, 255, 255, 255]), (u'projectCode_4239', [5, 256, 256, 256, 256, 256]), (u'projectCode_4272', [5, 257, 257, 257, 257, 257]), (u'projectCode_4302', [5, 258, 258, 258, 258, 258]), (u'projectCode_4303', [5, 259, 259, 259, 259, 259]), (u'projectCode_4304', [5, 260, 260, 260, 260, 260]), (u'projectCode_4316', [5, 261, 261, 261, 261, 261]), (u'projectCode_4332', [5, 262, 262, 262, 262, 262]), (u'sector_Agriculture and Food Security', [5, 263, 263, 263, 263, 263]), (u'sector_Economic Development', [5, 264, 264, 264, 264, 264]), (u'sector_Education and Training', [5, 265, 265, 265, 265, 265]), (u'sector_Emergency Response', [5, 266, 266, 266, 266, 266]), (u'sector_Financial Services for the Poor', [5, 267, 267, 267, 267, 267]), (u"sector_Gender Equality and Women's Empowerment", [5, 268, 268, 268, 268, 268]), (u'sector_Health', [5, 269, 269, 269, 269, 269]), (u'sector_No info', [5, 270, 270, 270, 270, 270]), (u'sector_Other', [5, 271, 271, 271, 271, 271]), (u'sector_Water, Sanitation, & Hygiene', [5, 272, 272, 272, 272, 272])]), None), ([0.56803473037059349, 0.64394112637090506, 0.7945317632930926, 0.8008953584180171, 0.7881681681681683, 0.21183183183183188, 0.199104641581983, 0.6659086331593884, 0.6519408484114366, 0.10448128801069978, 0.12105099331685434, 0.12105099331685434, 164.56113919583868, 0.009127236814418132], 'Artificial neural network', None, OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'X2', [5, 2, 2, 2, 2, 2]), (u'X3', [5, 3, 3, 3, 3, 3]), (u'X4', [5, 4, 4, 4, 4, 4]), (u'X5', [5, 5, 5, 5, 5, 5]), (u'X6', [5, 6, 6, 6, 6, 6]), (u'X7', [5, 7, 7, 7, 7, 7]), (u'X8', [5, 8, 8, 8, 8, 8]), (u'X9', [5, 9, 9, 9, 9, 9]), (u'X10', [5, 10, 10, 10, 10, 10]), (u'X11', [5, 11, 11, 11, 11, 11]), (u'X12', [5, 12, 12, 12, 12, 12]), (u'X13', [5, 13, 13, 13, 13, 13]), (u'X14', [5, 14, 14, 14, 14, 14]), (u'X15', [5, 15, 15, 15, 15, 15]), (u'X16', [5, 16, 16, 16, 16, 16]), (u'X17', [5, 17, 17, 17, 17, 17]), (u'X18', [5, 18, 18, 18, 18, 18]), (u'X19', [5, 19, 19, 19, 19, 19]), (u'X20', [5, 20, 20, 20, 20, 20]), (u'X21', [5, 21, 21, 21, 21, 21]), (u'X22', [5, 22, 22, 22, 22, 22]), (u'X23', [5, 23, 23, 23, 23, 23]), (u'X24', [5, 24, 24, 24, 24, 24]), (u'X25', [5, 25, 25, 25, 25, 25]), (u'X26', [5, 26, 26, 26, 26, 26]), (u'X27', [5, 27, 27, 27, 27, 27]), (u'X28', [5, 28, 28, 28, 28, 28]), (u'X29', [5, 29, 29, 29, 29, 29]), (u'X30', [5, 30, 30, 30, 30, 30]), (u'X31', [5, 31, 31, 31, 31, 31]), (u'X32', [5, 32, 32, 32, 32, 32]), (u'X33', [5, 33, 33, 33, 33, 33]), (u'X34', [5, 34, 34, 34, 34, 34]), (u'X35', [5, 35, 35, 35, 35, 35]), (u'X36', [5, 36, 36, 36, 36, 36]), (u'X37', [5, 37, 37, 37, 37, 37]), (u'X38', [5, 38, 38, 38, 38, 38]), (u'X39', [5, 39, 39, 39, 39, 39]), (u'X40', [5, 40, 40, 40, 40, 40]), (u'X41', [5, 41, 41, 41, 41, 41]), (u'X42', [5, 42, 42, 42, 42, 42]), (u'X43', [5, 43, 43, 43, 43, 43]), (u'X44', [5, 44, 44, 44, 44, 44]), (u'X45', [5, 45, 45, 45, 45, 45]), (u'X46', [5, 46, 46, 46, 46, 46]), (u'X47', [5, 47, 47, 47, 47, 47]), (u'X48', [5, 48, 48, 48, 48, 48]), (u'X49', [5, 49, 49, 49, 49, 49]), (u'X50', [5, 50, 50, 50, 50, 50]), (u'X51', [5, 51, 51, 51, 51, 51]), (u'X52', [5, 52, 52, 52, 52, 52]), (u'X53', [5, 53, 53, 53, 53, 53]), (u'X54', [5, 54, 54, 54, 54, 54]), (u'X55', [5, 55, 55, 55, 55, 55]), (u'X56', [5, 56, 56, 56, 56, 56]), (u'X57', [5, 57, 57, 57, 57, 57]), (u'X58', [5, 58, 58, 58, 58, 58]), (u'X59', [5, 59, 59, 59, 59, 59]), (u'X60', [5, 60, 60, 60, 60, 60]), (u'X61', [5, 61, 61, 61, 61, 61]), (u'X62', [5, 62, 62, 62, 62, 62]), (u'X63', [5, 63, 63, 63, 63, 63]), (u'X64', [5, 64, 64, 64, 64, 64]), (u'X65', [5, 65, 65, 65, 65, 65]), (u'X66', [5, 66, 66, 66, 66, 66]), (u'X67', [5, 67, 67, 67, 67, 67]), (u'X68', [5, 68, 68, 68, 68, 68]), (u'X69', [5, 69, 69, 69, 69, 69]), (u'X70', [5, 70, 70, 70, 70, 70]), (u'X71', [5, 71, 71, 71, 71, 71]), (u'X72', [5, 72, 72, 72, 72, 72]), (u'X73', [5, 73, 73, 73, 73, 73]), (u'X74', [5, 74, 74, 74, 74, 74]), (u'X75', [5, 75, 75, 75, 75, 75]), (u'X76', [5, 76, 76, 76, 76, 76]), (u'X77', [5, 77, 77, 77, 77, 77]), (u'X78', [5, 78, 78, 78, 78, 78]), (u'X79', [5, 79, 79, 79, 79, 79]), (u'X80', [5, 80, 80, 80, 80, 80]), (u'X81', [5, 81, 81, 81, 81, 81]), (u'X82', [5, 82, 82, 82, 82, 82]), (u'X83', [5, 83, 83, 83, 83, 83]), (u'X84', [5, 84, 84, 84, 84, 84]), (u'X85', [5, 85, 85, 85, 85, 85]), (u'X86', [5, 86, 86, 86, 86, 86]), (u'X87', [5, 87, 87, 87, 87, 87]), (u'X88', [5, 88, 88, 88, 88, 88]), (u'X89', [5, 89, 89, 89, 89, 89]), (u'X90', [5, 90, 90, 90, 90, 90]), (u'projectCode_13', [5, 91, 91, 91, 91, 91]), (u'projectCode_25', [5, 92, 92, 92, 92, 92]), (u'projectCode_27', [5, 93, 93, 93, 93, 93]), (u'projectCode_29', [5, 94, 94, 94, 94, 94]), (u'projectCode_31', [5, 95, 95, 95, 95, 95]), (u'projectCode_40', [5, 96, 96, 96, 96, 96]), (u'projectCode_58', [5, 97, 97, 97, 97, 97]), (u'projectCode_97', [5, 98, 98, 98, 98, 98]), (u'projectCode_99', [5, 99, 99, 99, 99, 99]), (u'projectCode_161', [5, 100, 100, 100, 100, 100]), (u'projectCode_213', [5, 101, 101, 101, 101, 101]), (u'projectCode_221', [5, 102, 102, 102, 102, 102]), (u'projectCode_249', [5, 103, 103, 103, 103, 103]), (u'projectCode_258', [5, 104, 104, 104, 104, 104]), (u'projectCode_300', [5, 105, 105, 105, 105, 105]), (u'projectCode_320', [5, 106, 106, 106, 106, 106]), (u'projectCode_321', [5, 107, 107, 107, 107, 107]), (u'projectCode_363', [5, 108, 108, 108, 108, 108]), (u'projectCode_371', [5, 109, 109, 109, 109, 109]), (u'projectCode_421', [5, 110, 110, 110, 110, 110]), (u'projectCode_422', [5, 111, 111, 111, 111, 111]), (u'projectCode_473', [5, 112, 112, 112, 112, 112]), (u'projectCode_516', [5, 113, 113, 113, 113, 113]), (u'projectCode_517', [5, 114, 114, 114, 114, 114]), (u'projectCode_541', [5, 115, 115, 115, 115, 115]), (u'projectCode_549', [5, 116, 116, 116, 116, 116]), (u'projectCode_571', [5, 117, 117, 117, 117, 117]), (u'projectCode_609', [5, 118, 118, 118, 118, 118]), (u'projectCode_614', [5, 119, 119, 119, 119, 119]), (u'projectCode_710', [5, 120, 120, 120, 120, 120]), (u'projectCode_723', [5, 121, 121, 121, 121, 121]), (u'projectCode_727', [5, 122, 122, 122, 122, 122]), (u'projectCode_732', [5, 123, 123, 123, 123, 123]), (u'projectCode_735', [5, 124, 124, 124, 124, 124]), (u'projectCode_737', [5, 125, 125, 125, 125, 125]), (u'projectCode_743', [5, 126, 126, 126, 126, 126]), (u'projectCode_748', [5, 127, 127, 127, 127, 127]), (u'projectCode_959', [5, 128, 128, 128, 128, 128]), (u'projectCode_967', [5, 129, 129, 129, 129, 129]), (u'projectCode_1014', [5, 130, 130, 130, 130, 130]), (u'projectCode_1037', [5, 131, 131, 131, 131, 131]), (u'projectCode_1039', [5, 132, 132, 132, 132, 132]), (u'projectCode_1049', [5, 133, 133, 133, 133, 133]), (u'projectCode_1123', [5, 134, 134, 134, 134, 134]), (u'projectCode_1210', [5, 135, 135, 135, 135, 135]), (u'projectCode_1217', [5, 136, 136, 136, 136, 136]), (u'projectCode_1271', [5, 137, 137, 137, 137, 137]), (u'projectCode_1336', [5, 138, 138, 138, 138, 138]), (u'projectCode_1365', [5, 139, 139, 139, 139, 139]), (u'projectCode_1388', [5, 140, 140, 140, 140, 140]), (u'projectCode_1456', [5, 141, 141, 141, 141, 141]), (u'projectCode_1484', [5, 142, 142, 142, 142, 142]), (u'projectCode_1515', [5, 143, 143, 143, 143, 143]), (u'projectCode_1534', [5, 144, 144, 144, 144, 144]), (u'projectCode_1539', [5, 145, 145, 145, 145, 145]), (u'projectCode_1552', [5, 146, 146, 146, 146, 146]), (u'projectCode_1553', [5, 147, 147, 147, 147, 147]), (u'projectCode_1555', [5, 148, 148, 148, 148, 148]), (u'projectCode_1556', [5, 149, 149, 149, 149, 149]), (u'projectCode_1559', [5, 150, 150, 150, 150, 150]), (u'projectCode_1594', [5, 151, 151, 151, 151, 151]), (u'projectCode_1606', [5, 152, 152, 152, 152, 152]), (u'projectCode_1614', [5, 153, 153, 153, 153, 153]), (u'projectCode_1615', [5, 154, 154, 154, 154, 154]), (u'projectCode_1616', [5, 155, 155, 155, 155, 155]), (u'projectCode_1627', [5, 156, 156, 156, 156, 156]), (u'projectCode_1628', [5, 157, 157, 157, 157, 157]), (u'projectCode_1631', [5, 158, 158, 158, 158, 158]), (u'projectCode_1638', [5, 159, 159, 159, 159, 159]), (u'projectCode_1643', [5, 160, 160, 160, 160, 160]), (u'projectCode_1644', [5, 161, 161, 161, 161, 161]), (u'projectCode_1648', [5, 162, 162, 162, 162, 162]), (u'projectCode_1658', [5, 163, 163, 163, 163, 163]), (u'projectCode_1674', [5, 164, 164, 164, 164, 164]), (u'projectCode_1779', [5, 165, 165, 165, 165, 165]), (u'projectCode_1794', [5, 166, 166, 166, 166, 166]), (u'projectCode_1833', [5, 167, 167, 167, 167, 167]), (u'projectCode_1836', [5, 168, 168, 168, 168, 168]), (u'projectCode_1866', [5, 169, 169, 169, 169, 169]), (u'projectCode_1878', [5, 170, 170, 170, 170, 170]), (u'projectCode_1954', [5, 171, 171, 171, 171, 171]), (u'projectCode_2058', [5, 172, 172, 172, 172, 172]), (u'projectCode_2093', [5, 173, 173, 173, 173, 173]), (u'projectCode_2112', [5, 174, 174, 174, 174, 174]), (u'projectCode_2175', [5, 175, 175, 175, 175, 175]), (u'projectCode_2180', [5, 176, 176, 176, 176, 176]), (u'projectCode_2242', [5, 177, 177, 177, 177, 177]), (u'projectCode_2243', [5, 178, 178, 178, 178, 178]), (u'projectCode_2244', [5, 179, 179, 179, 179, 179]), (u'projectCode_2264', [5, 180, 180, 180, 180, 180]), (u'projectCode_2268', [5, 181, 181, 181, 181, 181]), (u'projectCode_2273', [5, 182, 182, 182, 182, 182]), (u'projectCode_2335', [5, 183, 183, 183, 183, 183]), (u'projectCode_2348', [5, 184, 184, 184, 184, 184]), (u'projectCode_2370', [5, 185, 185, 185, 185, 185]), (u'projectCode_2376', [5, 186, 186, 186, 186, 186]), (u'projectCode_2406', [5, 187, 187, 187, 187, 187]), (u'projectCode_2508', [5, 188, 188, 188, 188, 188]), (u'projectCode_2562', [5, 189, 189, 189, 189, 189]), (u'projectCode_2620', [5, 190, 190, 190, 190, 190]), (u'projectCode_2630', [5, 191, 191, 191, 191, 191]), (u'projectCode_2635', [5, 192, 192, 192, 192, 192]), (u'projectCode_2694', [5, 193, 193, 193, 193, 193]), (u'projectCode_2696', [5, 194, 194, 194, 194, 194]), (u'projectCode_2745', [5, 195, 195, 195, 195, 195]), (u'projectCode_2756', [5, 196, 196, 196, 196, 196]), (u'projectCode_2759', [5, 197, 197, 197, 197, 197]), (u'projectCode_2766', [5, 198, 198, 198, 198, 198]), (u'projectCode_2767', [5, 199, 199, 199, 199, 199]), (u'projectCode_2770', [5, 200, 200, 200, 200, 200]), (u'projectCode_2784', [5, 201, 201, 201, 201, 201]), (u'projectCode_2866', [5, 202, 202, 202, 202, 202]), (u'projectCode_2877', [5, 203, 203, 203, 203, 203]), (u'projectCode_2914', [5, 204, 204, 204, 204, 204]), (u'projectCode_2923', [5, 205, 205, 205, 205, 205]), (u'projectCode_2932', [5, 206, 206, 206, 206, 206]), (u'projectCode_2945', [5, 207, 207, 207, 207, 207]), (u'projectCode_3010', [5, 208, 208, 208, 208, 208]), (u'projectCode_3064', [5, 209, 209, 209, 209, 209]), (u'projectCode_3077', [5, 210, 210, 210, 210, 210]), (u'projectCode_3080', [5, 211, 211, 211, 211, 211]), (u'projectCode_3082', [5, 212, 212, 212, 212, 212]), (u'projectCode_3104', [5, 213, 213, 213, 213, 213]), (u'projectCode_3105', [5, 214, 214, 214, 214, 214]), (u'projectCode_3135', [5, 215, 215, 215, 215, 215]), (u'projectCode_3145', [5, 216, 216, 216, 216, 216]), (u'projectCode_3181', [5, 217, 217, 217, 217, 217]), (u'projectCode_3193', [5, 218, 218, 218, 218, 218]), (u'projectCode_3211', [5, 219, 219, 219, 219, 219]), (u'projectCode_3262', [5, 220, 220, 220, 220, 220]), (u'projectCode_3279', [5, 221, 221, 221, 221, 221]), (u'projectCode_3291', [5, 222, 222, 222, 222, 222]), (u'projectCode_3313', [5, 223, 223, 223, 223, 223]), (u'projectCode_3417', [5, 224, 224, 224, 224, 224]), (u'projectCode_3430', [5, 225, 225, 225, 225, 225]), (u'projectCode_3432', [5, 226, 226, 226, 226, 226]), (u'projectCode_3444', [5, 227, 227, 227, 227, 227]), (u'projectCode_3450', [5, 228, 228, 228, 228, 228]), (u'projectCode_3454', [5, 229, 229, 229, 229, 229]), (u'projectCode_3461', [5, 230, 230, 230, 230, 230]), (u'projectCode_3462', [5, 231, 231, 231, 231, 231]), (u'projectCode_3466', [5, 232, 232, 232, 232, 232]), (u'projectCode_3507', [5, 233, 233, 233, 233, 233]), (u'projectCode_3514', [5, 234, 234, 234, 234, 234]), (u'projectCode_3565', [5, 235, 235, 235, 235, 235]), (u'projectCode_3566', [5, 236, 236, 236, 236, 236]), (u'projectCode_3571', [5, 237, 237, 237, 237, 237]), (u'projectCode_3640', [5, 238, 238, 238, 238, 238]), (u'projectCode_3776', [5, 239, 239, 239, 239, 239]), (u'projectCode_3911', [5, 240, 240, 240, 240, 240]), (u'projectCode_3957', [5, 241, 241, 241, 241, 241]), (u'projectCode_3988', [5, 242, 242, 242, 242, 242]), (u'projectCode_4077', [5, 243, 243, 243, 243, 243]), (u'projectCode_4086', [5, 244, 244, 244, 244, 244]), (u'projectCode_4106', [5, 245, 245, 245, 245, 245]), (u'projectCode_4108', [5, 246, 246, 246, 246, 246]), (u'projectCode_4115', [5, 247, 247, 247, 247, 247]), (u'projectCode_4116', [5, 248, 248, 248, 248, 248]), (u'projectCode_4120', [5, 249, 249, 249, 249, 249]), (u'projectCode_4121', [5, 250, 250, 250, 250, 250]), (u'projectCode_4124', [5, 251, 251, 251, 251, 251]), (u'projectCode_4145', [5, 252, 252, 252, 252, 252]), (u'projectCode_4149', [5, 253, 253, 253, 253, 253]), (u'projectCode_4203', [5, 254, 254, 254, 254, 254]), (u'projectCode_4214', [5, 255, 255, 255, 255, 255]), (u'projectCode_4239', [5, 256, 256, 256, 256, 256]), (u'projectCode_4272', [5, 257, 257, 257, 257, 257]), (u'projectCode_4302', [5, 258, 258, 258, 258, 258]), (u'projectCode_4303', [5, 259, 259, 259, 259, 259]), (u'projectCode_4304', [5, 260, 260, 260, 260, 260]), (u'projectCode_4316', [5, 261, 261, 261, 261, 261]), (u'projectCode_4332', [5, 262, 262, 262, 262, 262]), (u'sector_Agriculture and Food Security', [5, 263, 263, 263, 263, 263]), (u'sector_Economic Development', [5, 264, 264, 264, 264, 264]), (u'sector_Education and Training', [5, 265, 265, 265, 265, 265]), (u'sector_Emergency Response', [5, 266, 266, 266, 266, 266]), (u'sector_Financial Services for the Poor', [5, 267, 267, 267, 267, 267]), (u"sector_Gender Equality and Women's Empowerment", [5, 268, 268, 268, 268, 268]), (u'sector_Health', [5, 269, 269, 269, 269, 269]), (u'sector_No info', [5, 270, 270, 270, 270, 270]), (u'sector_Other', [5, 271, 271, 271, 271, 271]), (u'sector_Water, Sanitation, & Hygiene', [5, 272, 272, 272, 272, 272])]), None), ([0.55389615187192309, 0.63017452871191804, 0.7913459115840491, 0.8977149134853063, 0.6849769096827919, 0.315023090317208, 0.10228508651469377, 0.7790973175867435, 0.5770086052438993, 0.2022696646226058, 0.06354664469468094, 0.06354664469468094, 0.862156796395027, 0.010168868464873646], 'Bernoulli Naive Bayes', None, OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'X2', [5, 2, 2, 2, 2, 2]), (u'X3', [5, 3, 3, 3, 3, 3]), (u'X4', [5, 4, 4, 4, 4, 4]), (u'X5', [5, 5, 5, 5, 5, 5]), (u'X6', [5, 6, 6, 6, 6, 6]), (u'X7', [5, 7, 7, 7, 7, 7]), (u'X8', [5, 8, 8, 8, 8, 8]), (u'X9', [5, 9, 9, 9, 9, 9]), (u'X10', [5, 10, 10, 10, 10, 10]), (u'X11', [5, 11, 11, 11, 11, 11]), (u'X12', [5, 12, 12, 12, 12, 12]), (u'X13', [5, 13, 13, 13, 13, 13]), (u'X14', [5, 14, 14, 14, 14, 14]), (u'X15', [5, 15, 15, 15, 15, 15]), (u'X16', [5, 16, 16, 16, 16, 16]), (u'X17', [5, 17, 17, 17, 17, 17]), (u'X18', [5, 18, 18, 18, 18, 18]), (u'X19', [5, 19, 19, 19, 19, 19]), (u'X20', [5, 20, 20, 20, 20, 20]), (u'X21', [5, 21, 21, 21, 21, 21]), (u'X22', [5, 22, 22, 22, 22, 22]), (u'X23', [5, 23, 23, 23, 23, 23]), (u'X24', [5, 24, 24, 24, 24, 24]), (u'X25', [5, 25, 25, 25, 25, 25]), (u'X26', [5, 26, 26, 26, 26, 26]), (u'X27', [5, 27, 27, 27, 27, 27]), (u'X28', [5, 28, 28, 28, 28, 28]), (u'X29', [5, 29, 29, 29, 29, 29]), (u'X30', [5, 30, 30, 30, 30, 30]), (u'X31', [5, 31, 31, 31, 31, 31]), (u'X32', [5, 32, 32, 32, 32, 32]), (u'X33', [5, 33, 33, 33, 33, 33]), (u'X34', [5, 34, 34, 34, 34, 34]), (u'X35', [5, 35, 35, 35, 35, 35]), (u'X36', [5, 36, 36, 36, 36, 36]), (u'X37', [5, 37, 37, 37, 37, 37]), (u'X38', [5, 38, 38, 38, 38, 38]), (u'X39', [5, 39, 39, 39, 39, 39]), (u'X40', [5, 40, 40, 40, 40, 40]), (u'X41', [5, 41, 41, 41, 41, 41]), (u'X42', [5, 42, 42, 42, 42, 42]), (u'X43', [5, 43, 43, 43, 43, 43]), (u'X44', [5, 44, 44, 44, 44, 44]), (u'X45', [5, 45, 45, 45, 45, 45]), (u'X46', [5, 46, 46, 46, 46, 46]), (u'X47', [5, 47, 47, 47, 47, 47]), (u'X48', [5, 48, 48, 48, 48, 48]), (u'X49', [5, 49, 49, 49, 49, 49]), (u'X50', [5, 50, 50, 50, 50, 50]), (u'X51', [5, 51, 51, 51, 51, 51]), (u'X52', [5, 52, 52, 52, 52, 52]), (u'X53', [5, 53, 53, 53, 53, 53]), (u'X54', [5, 54, 54, 54, 54, 54]), (u'X55', [5, 55, 55, 55, 55, 55]), (u'X56', [5, 56, 56, 56, 56, 56]), (u'X57', [5, 57, 57, 57, 57, 57]), (u'X58', [5, 58, 58, 58, 58, 58]), (u'X59', [5, 59, 59, 59, 59, 59]), (u'X60', [5, 60, 60, 60, 60, 60]), (u'X61', [5, 61, 61, 61, 61, 61]), (u'X62', [5, 62, 62, 62, 62, 62]), (u'X63', [5, 63, 63, 63, 63, 63]), (u'X64', [5, 64, 64, 64, 64, 64]), (u'X65', [5, 65, 65, 65, 65, 65]), (u'X66', [5, 66, 66, 66, 66, 66]), (u'X67', [5, 67, 67, 67, 67, 67]), (u'X68', [5, 68, 68, 68, 68, 68]), (u'X69', [5, 69, 69, 69, 69, 69]), (u'X70', [5, 70, 70, 70, 70, 70]), (u'X71', [5, 71, 71, 71, 71, 71]), (u'X72', [5, 72, 72, 72, 72, 72]), (u'X73', [5, 73, 73, 73, 73, 73]), (u'X74', [5, 74, 74, 74, 74, 74]), (u'X75', [5, 75, 75, 75, 75, 75]), (u'X76', [5, 76, 76, 76, 76, 76]), (u'X77', [5, 77, 77, 77, 77, 77]), (u'X78', [5, 78, 78, 78, 78, 78]), (u'X79', [5, 79, 79, 79, 79, 79]), (u'X80', [5, 80, 80, 80, 80, 80]), (u'X81', [5, 81, 81, 81, 81, 81]), (u'X82', [5, 82, 82, 82, 82, 82]), (u'X83', [5, 83, 83, 83, 83, 83]), (u'X84', [5, 84, 84, 84, 84, 84]), (u'X85', [5, 85, 85, 85, 85, 85]), (u'X86', [5, 86, 86, 86, 86, 86]), (u'X87', [5, 87, 87, 87, 87, 87]), (u'X88', [5, 88, 88, 88, 88, 88]), (u'X89', [5, 89, 89, 89, 89, 89]), (u'X90', [5, 90, 90, 90, 90, 90]), (u'projectCode_13', [5, 91, 91, 91, 91, 91]), (u'projectCode_25', [5, 92, 92, 92, 92, 92]), (u'projectCode_27', [5, 93, 93, 93, 93, 93]), (u'projectCode_29', [5, 94, 94, 94, 94, 94]), (u'projectCode_31', [5, 95, 95, 95, 95, 95]), (u'projectCode_40', [5, 96, 96, 96, 96, 96]), (u'projectCode_58', [5, 97, 97, 97, 97, 97]), (u'projectCode_97', [5, 98, 98, 98, 98, 98]), (u'projectCode_99', [5, 99, 99, 99, 99, 99]), (u'projectCode_161', [5, 100, 100, 100, 100, 100]), (u'projectCode_213', [5, 101, 101, 101, 101, 101]), (u'projectCode_221', [5, 102, 102, 102, 102, 102]), (u'projectCode_249', [5, 103, 103, 103, 103, 103]), (u'projectCode_258', [5, 104, 104, 104, 104, 104]), (u'projectCode_300', [5, 105, 105, 105, 105, 105]), (u'projectCode_320', [5, 106, 106, 106, 106, 106]), (u'projectCode_321', [5, 107, 107, 107, 107, 107]), (u'projectCode_363', [5, 108, 108, 108, 108, 108]), (u'projectCode_371', [5, 109, 109, 109, 109, 109]), (u'projectCode_421', [5, 110, 110, 110, 110, 110]), (u'projectCode_422', [5, 111, 111, 111, 111, 111]), (u'projectCode_473', [5, 112, 112, 112, 112, 112]), (u'projectCode_516', [5, 113, 113, 113, 113, 113]), (u'projectCode_517', [5, 114, 114, 114, 114, 114]), (u'projectCode_541', [5, 115, 115, 115, 115, 115]), (u'projectCode_549', [5, 116, 116, 116, 116, 116]), (u'projectCode_571', [5, 117, 117, 117, 117, 117]), (u'projectCode_609', [5, 118, 118, 118, 118, 118]), (u'projectCode_614', [5, 119, 119, 119, 119, 119]), (u'projectCode_710', [5, 120, 120, 120, 120, 120]), (u'projectCode_723', [5, 121, 121, 121, 121, 121]), (u'projectCode_727', [5, 122, 122, 122, 122, 122]), (u'projectCode_732', [5, 123, 123, 123, 123, 123]), (u'projectCode_735', [5, 124, 124, 124, 124, 124]), (u'projectCode_737', [5, 125, 125, 125, 125, 125]), (u'projectCode_743', [5, 126, 126, 126, 126, 126]), (u'projectCode_748', [5, 127, 127, 127, 127, 127]), (u'projectCode_959', [5, 128, 128, 128, 128, 128]), (u'projectCode_967', [5, 129, 129, 129, 129, 129]), (u'projectCode_1014', [5, 130, 130, 130, 130, 130]), (u'projectCode_1037', [5, 131, 131, 131, 131, 131]), (u'projectCode_1039', [5, 132, 132, 132, 132, 132]), (u'projectCode_1049', [5, 133, 133, 133, 133, 133]), (u'projectCode_1123', [5, 134, 134, 134, 134, 134]), (u'projectCode_1210', [5, 135, 135, 135, 135, 135]), (u'projectCode_1217', [5, 136, 136, 136, 136, 136]), (u'projectCode_1271', [5, 137, 137, 137, 137, 137]), (u'projectCode_1336', [5, 138, 138, 138, 138, 138]), (u'projectCode_1365', [5, 139, 139, 139, 139, 139]), (u'projectCode_1388', [5, 140, 140, 140, 140, 140]), (u'projectCode_1456', [5, 141, 141, 141, 141, 141]), (u'projectCode_1484', [5, 142, 142, 142, 142, 142]), (u'projectCode_1515', [5, 143, 143, 143, 143, 143]), (u'projectCode_1534', [5, 144, 144, 144, 144, 144]), (u'projectCode_1539', [5, 145, 145, 145, 145, 145]), (u'projectCode_1552', [5, 146, 146, 146, 146, 146]), (u'projectCode_1553', [5, 147, 147, 147, 147, 147]), (u'projectCode_1555', [5, 148, 148, 148, 148, 148]), (u'projectCode_1556', [5, 149, 149, 149, 149, 149]), (u'projectCode_1559', [5, 150, 150, 150, 150, 150]), (u'projectCode_1594', [5, 151, 151, 151, 151, 151]), (u'projectCode_1606', [5, 152, 152, 152, 152, 152]), (u'projectCode_1614', [5, 153, 153, 153, 153, 153]), (u'projectCode_1615', [5, 154, 154, 154, 154, 154]), (u'projectCode_1616', [5, 155, 155, 155, 155, 155]), (u'projectCode_1627', [5, 156, 156, 156, 156, 156]), (u'projectCode_1628', [5, 157, 157, 157, 157, 157]), (u'projectCode_1631', [5, 158, 158, 158, 158, 158]), (u'projectCode_1638', [5, 159, 159, 159, 159, 159]), (u'projectCode_1643', [5, 160, 160, 160, 160, 160]), (u'projectCode_1644', [5, 161, 161, 161, 161, 161]), (u'projectCode_1648', [5, 162, 162, 162, 162, 162]), (u'projectCode_1658', [5, 163, 163, 163, 163, 163]), (u'projectCode_1674', [5, 164, 164, 164, 164, 164]), (u'projectCode_1779', [5, 165, 165, 165, 165, 165]), (u'projectCode_1794', [5, 166, 166, 166, 166, 166]), (u'projectCode_1833', [5, 167, 167, 167, 167, 167]), (u'projectCode_1836', [5, 168, 168, 168, 168, 168]), (u'projectCode_1866', [5, 169, 169, 169, 169, 169]), (u'projectCode_1878', [5, 170, 170, 170, 170, 170]), (u'projectCode_1954', [5, 171, 171, 171, 171, 171]), (u'projectCode_2058', [5, 172, 172, 172, 172, 172]), (u'projectCode_2093', [5, 173, 173, 173, 173, 173]), (u'projectCode_2112', [5, 174, 174, 174, 174, 174]), (u'projectCode_2175', [5, 175, 175, 175, 175, 175]), (u'projectCode_2180', [5, 176, 176, 176, 176, 176]), (u'projectCode_2242', [5, 177, 177, 177, 177, 177]), (u'projectCode_2243', [5, 178, 178, 178, 178, 178]), (u'projectCode_2244', [5, 179, 179, 179, 179, 179]), (u'projectCode_2264', [5, 180, 180, 180, 180, 180]), (u'projectCode_2268', [5, 181, 181, 181, 181, 181]), (u'projectCode_2273', [5, 182, 182, 182, 182, 182]), (u'projectCode_2335', [5, 183, 183, 183, 183, 183]), (u'projectCode_2348', [5, 184, 184, 184, 184, 184]), (u'projectCode_2370', [5, 185, 185, 185, 185, 185]), (u'projectCode_2376', [5, 186, 186, 186, 186, 186]), (u'projectCode_2406', [5, 187, 187, 187, 187, 187]), (u'projectCode_2508', [5, 188, 188, 188, 188, 188]), (u'projectCode_2562', [5, 189, 189, 189, 189, 189]), (u'projectCode_2620', [5, 190, 190, 190, 190, 190]), (u'projectCode_2630', [5, 191, 191, 191, 191, 191]), (u'projectCode_2635', [5, 192, 192, 192, 192, 192]), (u'projectCode_2694', [5, 193, 193, 193, 193, 193]), (u'projectCode_2696', [5, 194, 194, 194, 194, 194]), (u'projectCode_2745', [5, 195, 195, 195, 195, 195]), (u'projectCode_2756', [5, 196, 196, 196, 196, 196]), (u'projectCode_2759', [5, 197, 197, 197, 197, 197]), (u'projectCode_2766', [5, 198, 198, 198, 198, 198]), (u'projectCode_2767', [5, 199, 199, 199, 199, 199]), (u'projectCode_2770', [5, 200, 200, 200, 200, 200]), (u'projectCode_2784', [5, 201, 201, 201, 201, 201]), (u'projectCode_2866', [5, 202, 202, 202, 202, 202]), (u'projectCode_2877', [5, 203, 203, 203, 203, 203]), (u'projectCode_2914', [5, 204, 204, 204, 204, 204]), (u'projectCode_2923', [5, 205, 205, 205, 205, 205]), (u'projectCode_2932', [5, 206, 206, 206, 206, 206]), (u'projectCode_2945', [5, 207, 207, 207, 207, 207]), (u'projectCode_3010', [5, 208, 208, 208, 208, 208]), (u'projectCode_3064', [5, 209, 209, 209, 209, 209]), (u'projectCode_3077', [5, 210, 210, 210, 210, 210]), (u'projectCode_3080', [5, 211, 211, 211, 211, 211]), (u'projectCode_3082', [5, 212, 212, 212, 212, 212]), (u'projectCode_3104', [5, 213, 213, 213, 213, 213]), (u'projectCode_3105', [5, 214, 214, 214, 214, 214]), (u'projectCode_3135', [5, 215, 215, 215, 215, 215]), (u'projectCode_3145', [5, 216, 216, 216, 216, 216]), (u'projectCode_3181', [5, 217, 217, 217, 217, 217]), (u'projectCode_3193', [5, 218, 218, 218, 218, 218]), (u'projectCode_3211', [5, 219, 219, 219, 219, 219]), (u'projectCode_3262', [5, 220, 220, 220, 220, 220]), (u'projectCode_3279', [5, 221, 221, 221, 221, 221]), (u'projectCode_3291', [5, 222, 222, 222, 222, 222]), (u'projectCode_3313', [5, 223, 223, 223, 223, 223]), (u'projectCode_3417', [5, 224, 224, 224, 224, 224]), (u'projectCode_3430', [5, 225, 225, 225, 225, 225]), (u'projectCode_3432', [5, 226, 226, 226, 226, 226]), (u'projectCode_3444', [5, 227, 227, 227, 227, 227]), (u'projectCode_3450', [5, 228, 228, 228, 228, 228]), (u'projectCode_3454', [5, 229, 229, 229, 229, 229]), (u'projectCode_3461', [5, 230, 230, 230, 230, 230]), (u'projectCode_3462', [5, 231, 231, 231, 231, 231]), (u'projectCode_3466', [5, 232, 232, 232, 232, 232]), (u'projectCode_3507', [5, 233, 233, 233, 233, 233]), (u'projectCode_3514', [5, 234, 234, 234, 234, 234]), (u'projectCode_3565', [5, 235, 235, 235, 235, 235]), (u'projectCode_3566', [5, 236, 236, 236, 236, 236]), (u'projectCode_3571', [5, 237, 237, 237, 237, 237]), (u'projectCode_3640', [5, 238, 238, 238, 238, 238]), (u'projectCode_3776', [5, 239, 239, 239, 239, 239]), (u'projectCode_3911', [5, 240, 240, 240, 240, 240]), (u'projectCode_3957', [5, 241, 241, 241, 241, 241]), (u'projectCode_3988', [5, 242, 242, 242, 242, 242]), (u'projectCode_4077', [5, 243, 243, 243, 243, 243]), (u'projectCode_4086', [5, 244, 244, 244, 244, 244]), (u'projectCode_4106', [5, 245, 245, 245, 245, 245]), (u'projectCode_4108', [5, 246, 246, 246, 246, 246]), (u'projectCode_4115', [5, 247, 247, 247, 247, 247]), (u'projectCode_4116', [5, 248, 248, 248, 248, 248]), (u'projectCode_4120', [5, 249, 249, 249, 249, 249]), (u'projectCode_4121', [5, 250, 250, 250, 250, 250]), (u'projectCode_4124', [5, 251, 251, 251, 251, 251]), (u'projectCode_4145', [5, 252, 252, 252, 252, 252]), (u'projectCode_4149', [5, 253, 253, 253, 253, 253]), (u'projectCode_4203', [5, 254, 254, 254, 254, 254]), (u'projectCode_4214', [5, 255, 255, 255, 255, 255]), (u'projectCode_4239', [5, 256, 256, 256, 256, 256]), (u'projectCode_4272', [5, 257, 257, 257, 257, 257]), (u'projectCode_4302', [5, 258, 258, 258, 258, 258]), (u'projectCode_4303', [5, 259, 259, 259, 259, 259]), (u'projectCode_4304', [5, 260, 260, 260, 260, 260]), (u'projectCode_4316', [5, 261, 261, 261, 261, 261]), (u'projectCode_4332', [5, 262, 262, 262, 262, 262]), (u'sector_Agriculture and Food Security', [5, 263, 263, 263, 263, 263]), (u'sector_Economic Development', [5, 264, 264, 264, 264, 264]), (u'sector_Education and Training', [5, 265, 265, 265, 265, 265]), (u'sector_Emergency Response', [5, 266, 266, 266, 266, 266]), (u'sector_Financial Services for the Poor', [5, 267, 267, 267, 267, 267]), (u"sector_Gender Equality and Women's Empowerment", [5, 268, 268, 268, 268, 268]), (u'sector_Health', [5, 269, 269, 269, 269, 269]), (u'sector_No info', [5, 270, 270, 270, 270, 270]), (u'sector_Other', [5, 271, 271, 271, 271, 271]), (u'sector_Water, Sanitation, & Hygiene', [5, 272, 272, 272, 272, 272])]), None), ([0.52137607036607414, 0.73048133843506424, 0.7663029085829868, 0.728858372242058, 0.8037474449239156, 0.19625255507608447, 0.2711416277579419, 0.6943586926668498, 0.717999848588084, 0.1686279556867792, 0.22754737709420486, 0.22754737709420486, 6.631644959404349, 0.014749049309057013], 'Decision Tree', None, OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'X2', [5, 2, 2, 2, 2, 2]), (u'X3', [5, 3, 3, 3, 3, 3]), (u'X4', [5, 4, 4, 4, 4, 4]), (u'X5', [5, 5, 5, 5, 5, 5]), (u'X6', [5, 6, 6, 6, 6, 6]), (u'X7', [5, 7, 7, 7, 7, 7]), (u'X8', [5, 8, 8, 8, 8, 8]), (u'X9', [5, 9, 9, 9, 9, 9]), (u'X10', [5, 10, 10, 10, 10, 10]), (u'X11', [5, 11, 11, 11, 11, 11]), (u'X12', [5, 12, 12, 12, 12, 12]), (u'X13', [5, 13, 13, 13, 13, 13]), (u'X14', [5, 14, 14, 14, 14, 14]), (u'X15', [5, 15, 15, 15, 15, 15]), (u'X16', [5, 16, 16, 16, 16, 16]), (u'X17', [5, 17, 17, 17, 17, 17]), (u'X18', [5, 18, 18, 18, 18, 18]), (u'X19', [5, 19, 19, 19, 19, 19]), (u'X20', [5, 20, 20, 20, 20, 20]), (u'X21', [5, 21, 21, 21, 21, 21]), (u'X22', [5, 22, 22, 22, 22, 22]), (u'X23', [5, 23, 23, 23, 23, 23]), (u'X24', [5, 24, 24, 24, 24, 24]), (u'X25', [5, 25, 25, 25, 25, 25]), (u'X26', [5, 26, 26, 26, 26, 26]), (u'X27', [5, 27, 27, 27, 27, 27]), (u'X28', [5, 28, 28, 28, 28, 28]), (u'X29', [5, 29, 29, 29, 29, 29]), (u'X30', [5, 30, 30, 30, 30, 30]), (u'X31', [5, 31, 31, 31, 31, 31]), (u'X32', [5, 32, 32, 32, 32, 32]), (u'X33', [5, 33, 33, 33, 33, 33]), (u'X34', [5, 34, 34, 34, 34, 34]), (u'X35', [5, 35, 35, 35, 35, 35]), (u'X36', [5, 36, 36, 36, 36, 36]), (u'X37', [5, 37, 37, 37, 37, 37]), (u'X38', [5, 38, 38, 38, 38, 38]), (u'X39', [5, 39, 39, 39, 39, 39]), (u'X40', [5, 40, 40, 40, 40, 40]), (u'X41', [5, 41, 41, 41, 41, 41]), (u'X42', [5, 42, 42, 42, 42, 42]), (u'X43', [5, 43, 43, 43, 43, 43]), (u'X44', [5, 44, 44, 44, 44, 44]), (u'X45', [5, 45, 45, 45, 45, 45]), (u'X46', [5, 46, 46, 46, 46, 46]), (u'X47', [5, 47, 47, 47, 47, 47]), (u'X48', [5, 48, 48, 48, 48, 48]), (u'X49', [5, 49, 49, 49, 49, 49]), (u'X50', [5, 50, 50, 50, 50, 50]), (u'X51', [5, 51, 51, 51, 51, 51]), (u'X52', [5, 52, 52, 52, 52, 52]), (u'X53', [5, 53, 53, 53, 53, 53]), (u'X54', [5, 54, 54, 54, 54, 54]), (u'X55', [5, 55, 55, 55, 55, 55]), (u'X56', [5, 56, 56, 56, 56, 56]), (u'X57', [5, 57, 57, 57, 57, 57]), (u'X58', [5, 58, 58, 58, 58, 58]), (u'X59', [5, 59, 59, 59, 59, 59]), (u'X60', [5, 60, 60, 60, 60, 60]), (u'X61', [5, 61, 61, 61, 61, 61]), (u'X62', [5, 62, 62, 62, 62, 62]), (u'X63', [5, 63, 63, 63, 63, 63]), (u'X64', [5, 64, 64, 64, 64, 64]), (u'X65', [5, 65, 65, 65, 65, 65]), (u'X66', [5, 66, 66, 66, 66, 66]), (u'X67', [5, 67, 67, 67, 67, 67]), (u'X68', [5, 68, 68, 68, 68, 68]), (u'X69', [5, 69, 69, 69, 69, 69]), (u'X70', [5, 70, 70, 70, 70, 70]), (u'X71', [5, 71, 71, 71, 71, 71]), (u'X72', [5, 72, 72, 72, 72, 72]), (u'X73', [5, 73, 73, 73, 73, 73]), (u'X74', [5, 74, 74, 74, 74, 74]), (u'X75', [5, 75, 75, 75, 75, 75]), (u'X76', [5, 76, 76, 76, 76, 76]), (u'X77', [5, 77, 77, 77, 77, 77]), (u'X78', [5, 78, 78, 78, 78, 78]), (u'X79', [5, 79, 79, 79, 79, 79]), (u'X80', [5, 80, 80, 80, 80, 80]), (u'X81', [5, 81, 81, 81, 81, 81]), (u'X82', [5, 82, 82, 82, 82, 82]), (u'X83', [5, 83, 83, 83, 83, 83]), (u'X84', [5, 84, 84, 84, 84, 84]), (u'X85', [5, 85, 85, 85, 85, 85]), (u'X86', [5, 86, 86, 86, 86, 86]), (u'X87', [5, 87, 87, 87, 87, 87]), (u'X88', [5, 88, 88, 88, 88, 88]), (u'X89', [5, 89, 89, 89, 89, 89]), (u'X90', [5, 90, 90, 90, 90, 90]), (u'projectCode_13', [5, 91, 91, 91, 91, 91]), (u'projectCode_25', [5, 92, 92, 92, 92, 92]), (u'projectCode_27', [5, 93, 93, 93, 93, 93]), (u'projectCode_29', [5, 94, 94, 94, 94, 94]), (u'projectCode_31', [5, 95, 95, 95, 95, 95]), (u'projectCode_40', [5, 96, 96, 96, 96, 96]), (u'projectCode_58', [5, 97, 97, 97, 97, 97]), (u'projectCode_97', [5, 98, 98, 98, 98, 98]), (u'projectCode_99', [5, 99, 99, 99, 99, 99]), (u'projectCode_161', [5, 100, 100, 100, 100, 100]), (u'projectCode_213', [5, 101, 101, 101, 101, 101]), (u'projectCode_221', [5, 102, 102, 102, 102, 102]), (u'projectCode_249', [5, 103, 103, 103, 103, 103]), (u'projectCode_258', [5, 104, 104, 104, 104, 104]), (u'projectCode_300', [5, 105, 105, 105, 105, 105]), (u'projectCode_320', [5, 106, 106, 106, 106, 106]), (u'projectCode_321', [5, 107, 107, 107, 107, 107]), (u'projectCode_363', [5, 108, 108, 108, 108, 108]), (u'projectCode_371', [5, 109, 109, 109, 109, 109]), (u'projectCode_421', [5, 110, 110, 110, 110, 110]), (u'projectCode_422', [5, 111, 111, 111, 111, 111]), (u'projectCode_473', [5, 112, 112, 112, 112, 112]), (u'projectCode_516', [5, 113, 113, 113, 113, 113]), (u'projectCode_517', [5, 114, 114, 114, 114, 114]), (u'projectCode_541', [5, 115, 115, 115, 115, 115]), (u'projectCode_549', [5, 116, 116, 116, 116, 116]), (u'projectCode_571', [5, 117, 117, 117, 117, 117]), (u'projectCode_609', [5, 118, 118, 118, 118, 118]), (u'projectCode_614', [5, 119, 119, 119, 119, 119]), (u'projectCode_710', [5, 120, 120, 120, 120, 120]), (u'projectCode_723', [5, 121, 121, 121, 121, 121]), (u'projectCode_727', [5, 122, 122, 122, 122, 122]), (u'projectCode_732', [5, 123, 123, 123, 123, 123]), (u'projectCode_735', [5, 124, 124, 124, 124, 124]), (u'projectCode_737', [5, 125, 125, 125, 125, 125]), (u'projectCode_743', [5, 126, 126, 126, 126, 126]), (u'projectCode_748', [5, 127, 127, 127, 127, 127]), (u'projectCode_959', [5, 128, 128, 128, 128, 128]), (u'projectCode_967', [5, 129, 129, 129, 129, 129]), (u'projectCode_1014', [5, 130, 130, 130, 130, 130]), (u'projectCode_1037', [5, 131, 131, 131, 131, 131]), (u'projectCode_1039', [5, 132, 132, 132, 132, 132]), (u'projectCode_1049', [5, 133, 133, 133, 133, 133]), (u'projectCode_1123', [5, 134, 134, 134, 134, 134]), (u'projectCode_1210', [5, 135, 135, 135, 135, 135]), (u'projectCode_1217', [5, 136, 136, 136, 136, 136]), (u'projectCode_1271', [5, 137, 137, 137, 137, 137]), (u'projectCode_1336', [5, 138, 138, 138, 138, 138]), (u'projectCode_1365', [5, 139, 139, 139, 139, 139]), (u'projectCode_1388', [5, 140, 140, 140, 140, 140]), (u'projectCode_1456', [5, 141, 141, 141, 141, 141]), (u'projectCode_1484', [5, 142, 142, 142, 142, 142]), (u'projectCode_1515', [5, 143, 143, 143, 143, 143]), (u'projectCode_1534', [5, 144, 144, 144, 144, 144]), (u'projectCode_1539', [5, 145, 145, 145, 145, 145]), (u'projectCode_1552', [5, 146, 146, 146, 146, 146]), (u'projectCode_1553', [5, 147, 147, 147, 147, 147]), (u'projectCode_1555', [5, 148, 148, 148, 148, 148]), (u'projectCode_1556', [5, 149, 149, 149, 149, 149]), (u'projectCode_1559', [5, 150, 150, 150, 150, 150]), (u'projectCode_1594', [5, 151, 151, 151, 151, 151]), (u'projectCode_1606', [5, 152, 152, 152, 152, 152]), (u'projectCode_1614', [5, 153, 153, 153, 153, 153]), (u'projectCode_1615', [5, 154, 154, 154, 154, 154]), (u'projectCode_1616', [5, 155, 155, 155, 155, 155]), (u'projectCode_1627', [5, 156, 156, 156, 156, 156]), (u'projectCode_1628', [5, 157, 157, 157, 157, 157]), (u'projectCode_1631', [5, 158, 158, 158, 158, 158]), (u'projectCode_1638', [5, 159, 159, 159, 159, 159]), (u'projectCode_1643', [5, 160, 160, 160, 160, 160]), (u'projectCode_1644', [5, 161, 161, 161, 161, 161]), (u'projectCode_1648', [5, 162, 162, 162, 162, 162]), (u'projectCode_1658', [5, 163, 163, 163, 163, 163]), (u'projectCode_1674', [5, 164, 164, 164, 164, 164]), (u'projectCode_1779', [5, 165, 165, 165, 165, 165]), (u'projectCode_1794', [5, 166, 166, 166, 166, 166]), (u'projectCode_1833', [5, 167, 167, 167, 167, 167]), (u'projectCode_1836', [5, 168, 168, 168, 168, 168]), (u'projectCode_1866', [5, 169, 169, 169, 169, 169]), (u'projectCode_1878', [5, 170, 170, 170, 170, 170]), (u'projectCode_1954', [5, 171, 171, 171, 171, 171]), (u'projectCode_2058', [5, 172, 172, 172, 172, 172]), (u'projectCode_2093', [5, 173, 173, 173, 173, 173]), (u'projectCode_2112', [5, 174, 174, 174, 174, 174]), (u'projectCode_2175', [5, 175, 175, 175, 175, 175]), (u'projectCode_2180', [5, 176, 176, 176, 176, 176]), (u'projectCode_2242', [5, 177, 177, 177, 177, 177]), (u'projectCode_2243', [5, 178, 178, 178, 178, 178]), (u'projectCode_2244', [5, 179, 179, 179, 179, 179]), (u'projectCode_2264', [5, 180, 180, 180, 180, 180]), (u'projectCode_2268', [5, 181, 181, 181, 181, 181]), (u'projectCode_2273', [5, 182, 182, 182, 182, 182]), (u'projectCode_2335', [5, 183, 183, 183, 183, 183]), (u'projectCode_2348', [5, 184, 184, 184, 184, 184]), (u'projectCode_2370', [5, 185, 185, 185, 185, 185]), (u'projectCode_2376', [5, 186, 186, 186, 186, 186]), (u'projectCode_2406', [5, 187, 187, 187, 187, 187]), (u'projectCode_2508', [5, 188, 188, 188, 188, 188]), (u'projectCode_2562', [5, 189, 189, 189, 189, 189]), (u'projectCode_2620', [5, 190, 190, 190, 190, 190]), (u'projectCode_2630', [5, 191, 191, 191, 191, 191]), (u'projectCode_2635', [5, 192, 192, 192, 192, 192]), (u'projectCode_2694', [5, 193, 193, 193, 193, 193]), (u'projectCode_2696', [5, 194, 194, 194, 194, 194]), (u'projectCode_2745', [5, 195, 195, 195, 195, 195]), (u'projectCode_2756', [5, 196, 196, 196, 196, 196]), (u'projectCode_2759', [5, 197, 197, 197, 197, 197]), (u'projectCode_2766', [5, 198, 198, 198, 198, 198]), (u'projectCode_2767', [5, 199, 199, 199, 199, 199]), (u'projectCode_2770', [5, 200, 200, 200, 200, 200]), (u'projectCode_2784', [5, 201, 201, 201, 201, 201]), (u'projectCode_2866', [5, 202, 202, 202, 202, 202]), (u'projectCode_2877', [5, 203, 203, 203, 203, 203]), (u'projectCode_2914', [5, 204, 204, 204, 204, 204]), (u'projectCode_2923', [5, 205, 205, 205, 205, 205]), (u'projectCode_2932', [5, 206, 206, 206, 206, 206]), (u'projectCode_2945', [5, 207, 207, 207, 207, 207]), (u'projectCode_3010', [5, 208, 208, 208, 208, 208]), (u'projectCode_3064', [5, 209, 209, 209, 209, 209]), (u'projectCode_3077', [5, 210, 210, 210, 210, 210]), (u'projectCode_3080', [5, 211, 211, 211, 211, 211]), (u'projectCode_3082', [5, 212, 212, 212, 212, 212]), (u'projectCode_3104', [5, 213, 213, 213, 213, 213]), (u'projectCode_3105', [5, 214, 214, 214, 214, 214]), (u'projectCode_3135', [5, 215, 215, 215, 215, 215]), (u'projectCode_3145', [5, 216, 216, 216, 216, 216]), (u'projectCode_3181', [5, 217, 217, 217, 217, 217]), (u'projectCode_3193', [5, 218, 218, 218, 218, 218]), (u'projectCode_3211', [5, 219, 219, 219, 219, 219]), (u'projectCode_3262', [5, 220, 220, 220, 220, 220]), (u'projectCode_3279', [5, 221, 221, 221, 221, 221]), (u'projectCode_3291', [5, 222, 222, 222, 222, 222]), (u'projectCode_3313', [5, 223, 223, 223, 223, 223]), (u'projectCode_3417', [5, 224, 224, 224, 224, 224]), (u'projectCode_3430', [5, 225, 225, 225, 225, 225]), (u'projectCode_3432', [5, 226, 226, 226, 226, 226]), (u'projectCode_3444', [5, 227, 227, 227, 227, 227]), (u'projectCode_3450', [5, 228, 228, 228, 228, 228]), (u'projectCode_3454', [5, 229, 229, 229, 229, 229]), (u'projectCode_3461', [5, 230, 230, 230, 230, 230]), (u'projectCode_3462', [5, 231, 231, 231, 231, 231]), (u'projectCode_3466', [5, 232, 232, 232, 232, 232]), (u'projectCode_3507', [5, 233, 233, 233, 233, 233]), (u'projectCode_3514', [5, 234, 234, 234, 234, 234]), (u'projectCode_3565', [5, 235, 235, 235, 235, 235]), (u'projectCode_3566', [5, 236, 236, 236, 236, 236]), (u'projectCode_3571', [5, 237, 237, 237, 237, 237]), (u'projectCode_3640', [5, 238, 238, 238, 238, 238]), (u'projectCode_3776', [5, 239, 239, 239, 239, 239]), (u'projectCode_3911', [5, 240, 240, 240, 240, 240]), (u'projectCode_3957', [5, 241, 241, 241, 241, 241]), (u'projectCode_3988', [5, 242, 242, 242, 242, 242]), (u'projectCode_4077', [5, 243, 243, 243, 243, 243]), (u'projectCode_4086', [5, 244, 244, 244, 244, 244]), (u'projectCode_4106', [5, 245, 245, 245, 245, 245]), (u'projectCode_4108', [5, 246, 246, 246, 246, 246]), (u'projectCode_4115', [5, 247, 247, 247, 247, 247]), (u'projectCode_4116', [5, 248, 248, 248, 248, 248]), (u'projectCode_4120', [5, 249, 249, 249, 249, 249]), (u'projectCode_4121', [5, 250, 250, 250, 250, 250]), (u'projectCode_4124', [5, 251, 251, 251, 251, 251]), (u'projectCode_4145', [5, 252, 252, 252, 252, 252]), (u'projectCode_4149', [5, 253, 253, 253, 253, 253]), (u'projectCode_4203', [5, 254, 254, 254, 254, 254]), (u'projectCode_4214', [5, 255, 255, 255, 255, 255]), (u'projectCode_4239', [5, 256, 256, 256, 256, 256]), (u'projectCode_4272', [5, 257, 257, 257, 257, 257]), (u'projectCode_4302', [5, 258, 258, 258, 258, 258]), (u'projectCode_4303', [5, 259, 259, 259, 259, 259]), (u'projectCode_4304', [5, 260, 260, 260, 260, 260]), (u'projectCode_4316', [5, 261, 261, 261, 261, 261]), (u'projectCode_4332', [5, 262, 262, 262, 262, 262]), (u'sector_Agriculture and Food Security', [5, 263, 263, 263, 263, 263]), (u'sector_Economic Development', [5, 264, 264, 264, 264, 264]), (u'sector_Education and Training', [5, 265, 265, 265, 265, 265]), (u'sector_Emergency Response', [5, 266, 266, 266, 266, 266]), (u'sector_Financial Services for the Poor', [5, 267, 267, 267, 267, 267]), (u"sector_Gender Equality and Women's Empowerment", [5, 268, 268, 268, 268, 268]), (u'sector_Health', [5, 269, 269, 269, 269, 269]), (u'sector_No info', [5, 270, 270, 270, 270, 270]), (u'sector_Other', [5, 271, 271, 271, 271, 271]), (u'sector_Water, Sanitation, & Hygiene', [5, 272, 272, 272, 272, 272])]), None), ([0.48462327868248728, 0.51054507990907816, 0.7490692458757147, 0.7191650645427081, 0.7789734272087213, 0.22102657279127866, 0.280834935457292, 0.4933589673166712, 0.500475938122997, 0.06858757917581447, 0.08170099789435137, 0.08170099789435137, 3.1088960282154687, 0.014438803528707059], 'Extreme Learning Machine', None, OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'X2', [5, 2, 2, 2, 2, 2]), (u'X3', [5, 3, 3, 3, 3, 3]), (u'X4', [5, 4, 4, 4, 4, 4]), (u'X5', [5, 5, 5, 5, 5, 5]), (u'X6', [5, 6, 6, 6, 6, 6]), (u'X7', [5, 7, 7, 7, 7, 7]), (u'X8', [5, 8, 8, 8, 8, 8]), (u'X9', [5, 9, 9, 9, 9, 9]), (u'X10', [5, 10, 10, 10, 10, 10]), (u'X11', [5, 11, 11, 11, 11, 11]), (u'X12', [5, 12, 12, 12, 12, 12]), (u'X13', [5, 13, 13, 13, 13, 13]), (u'X14', [5, 14, 14, 14, 14, 14]), (u'X15', [5, 15, 15, 15, 15, 15]), (u'X16', [5, 16, 16, 16, 16, 16]), (u'X17', [5, 17, 17, 17, 17, 17]), (u'X18', [5, 18, 18, 18, 18, 18]), (u'X19', [5, 19, 19, 19, 19, 19]), (u'X20', [5, 20, 20, 20, 20, 20]), (u'X21', [5, 21, 21, 21, 21, 21]), (u'X22', [5, 22, 22, 22, 22, 22]), (u'X23', [5, 23, 23, 23, 23, 23]), (u'X24', [5, 24, 24, 24, 24, 24]), (u'X25', [5, 25, 25, 25, 25, 25]), (u'X26', [5, 26, 26, 26, 26, 26]), (u'X27', [5, 27, 27, 27, 27, 27]), (u'X28', [5, 28, 28, 28, 28, 28]), (u'X29', [5, 29, 29, 29, 29, 29]), (u'X30', [5, 30, 30, 30, 30, 30]), (u'X31', [5, 31, 31, 31, 31, 31]), (u'X32', [5, 32, 32, 32, 32, 32]), (u'X33', [5, 33, 33, 33, 33, 33]), (u'X34', [5, 34, 34, 34, 34, 34]), (u'X35', [5, 35, 35, 35, 35, 35]), (u'X36', [5, 36, 36, 36, 36, 36]), (u'X37', [5, 37, 37, 37, 37, 37]), (u'X38', [5, 38, 38, 38, 38, 38]), (u'X39', [5, 39, 39, 39, 39, 39]), (u'X40', [5, 40, 40, 40, 40, 40]), (u'X41', [5, 41, 41, 41, 41, 41]), (u'X42', [5, 42, 42, 42, 42, 42]), (u'X43', [5, 43, 43, 43, 43, 43]), (u'X44', [5, 44, 44, 44, 44, 44]), (u'X45', [5, 45, 45, 45, 45, 45]), (u'X46', [5, 46, 46, 46, 46, 46]), (u'X47', [5, 47, 47, 47, 47, 47]), (u'X48', [5, 48, 48, 48, 48, 48]), (u'X49', [5, 49, 49, 49, 49, 49]), (u'X50', [5, 50, 50, 50, 50, 50]), (u'X51', [5, 51, 51, 51, 51, 51]), (u'X52', [5, 52, 52, 52, 52, 52]), (u'X53', [5, 53, 53, 53, 53, 53]), (u'X54', [5, 54, 54, 54, 54, 54]), (u'X55', [5, 55, 55, 55, 55, 55]), (u'X56', [5, 56, 56, 56, 56, 56]), (u'X57', [5, 57, 57, 57, 57, 57]), (u'X58', [5, 58, 58, 58, 58, 58]), (u'X59', [5, 59, 59, 59, 59, 59]), (u'X60', [5, 60, 60, 60, 60, 60]), (u'X61', [5, 61, 61, 61, 61, 61]), (u'X62', [5, 62, 62, 62, 62, 62]), (u'X63', [5, 63, 63, 63, 63, 63]), (u'X64', [5, 64, 64, 64, 64, 64]), (u'X65', [5, 65, 65, 65, 65, 65]), (u'X66', [5, 66, 66, 66, 66, 66]), (u'X67', [5, 67, 67, 67, 67, 67]), (u'X68', [5, 68, 68, 68, 68, 68]), (u'X69', [5, 69, 69, 69, 69, 69]), (u'X70', [5, 70, 70, 70, 70, 70]), (u'X71', [5, 71, 71, 71, 71, 71]), (u'X72', [5, 72, 72, 72, 72, 72]), (u'X73', [5, 73, 73, 73, 73, 73]), (u'X74', [5, 74, 74, 74, 74, 74]), (u'X75', [5, 75, 75, 75, 75, 75]), (u'X76', [5, 76, 76, 76, 76, 76]), (u'X77', [5, 77, 77, 77, 77, 77]), (u'X78', [5, 78, 78, 78, 78, 78]), (u'X79', [5, 79, 79, 79, 79, 79]), (u'X80', [5, 80, 80, 80, 80, 80]), (u'X81', [5, 81, 81, 81, 81, 81]), (u'X82', [5, 82, 82, 82, 82, 82]), (u'X83', [5, 83, 83, 83, 83, 83]), (u'X84', [5, 84, 84, 84, 84, 84]), (u'X85', [5, 85, 85, 85, 85, 85]), (u'X86', [5, 86, 86, 86, 86, 86]), (u'X87', [5, 87, 87, 87, 87, 87]), (u'X88', [5, 88, 88, 88, 88, 88]), (u'X89', [5, 89, 89, 89, 89, 89]), (u'X90', [5, 90, 90, 90, 90, 90]), (u'projectCode_13', [5, 91, 91, 91, 91, 91]), (u'projectCode_25', [5, 92, 92, 92, 92, 92]), (u'projectCode_27', [5, 93, 93, 93, 93, 93]), (u'projectCode_29', [5, 94, 94, 94, 94, 94]), (u'projectCode_31', [5, 95, 95, 95, 95, 95]), (u'projectCode_40', [5, 96, 96, 96, 96, 96]), (u'projectCode_58', [5, 97, 97, 97, 97, 97]), (u'projectCode_97', [5, 98, 98, 98, 98, 98]), (u'projectCode_99', [5, 99, 99, 99, 99, 99]), (u'projectCode_161', [5, 100, 100, 100, 100, 100]), (u'projectCode_213', [5, 101, 101, 101, 101, 101]), (u'projectCode_221', [5, 102, 102, 102, 102, 102]), (u'projectCode_249', [5, 103, 103, 103, 103, 103]), (u'projectCode_258', [5, 104, 104, 104, 104, 104]), (u'projectCode_300', [5, 105, 105, 105, 105, 105]), (u'projectCode_320', [5, 106, 106, 106, 106, 106]), (u'projectCode_321', [5, 107, 107, 107, 107, 107]), (u'projectCode_363', [5, 108, 108, 108, 108, 108]), (u'projectCode_371', [5, 109, 109, 109, 109, 109]), (u'projectCode_421', [5, 110, 110, 110, 110, 110]), (u'projectCode_422', [5, 111, 111, 111, 111, 111]), (u'projectCode_473', [5, 112, 112, 112, 112, 112]), (u'projectCode_516', [5, 113, 113, 113, 113, 113]), (u'projectCode_517', [5, 114, 114, 114, 114, 114]), (u'projectCode_541', [5, 115, 115, 115, 115, 115]), (u'projectCode_549', [5, 116, 116, 116, 116, 116]), (u'projectCode_571', [5, 117, 117, 117, 117, 117]), (u'projectCode_609', [5, 118, 118, 118, 118, 118]), (u'projectCode_614', [5, 119, 119, 119, 119, 119]), (u'projectCode_710', [5, 120, 120, 120, 120, 120]), (u'projectCode_723', [5, 121, 121, 121, 121, 121]), (u'projectCode_727', [5, 122, 122, 122, 122, 122]), (u'projectCode_732', [5, 123, 123, 123, 123, 123]), (u'projectCode_735', [5, 124, 124, 124, 124, 124]), (u'projectCode_737', [5, 125, 125, 125, 125, 125]), (u'projectCode_743', [5, 126, 126, 126, 126, 126]), (u'projectCode_748', [5, 127, 127, 127, 127, 127]), (u'projectCode_959', [5, 128, 128, 128, 128, 128]), (u'projectCode_967', [5, 129, 129, 129, 129, 129]), (u'projectCode_1014', [5, 130, 130, 130, 130, 130]), (u'projectCode_1037', [5, 131, 131, 131, 131, 131]), (u'projectCode_1039', [5, 132, 132, 132, 132, 132]), (u'projectCode_1049', [5, 133, 133, 133, 133, 133]), (u'projectCode_1123', [5, 134, 134, 134, 134, 134]), (u'projectCode_1210', [5, 135, 135, 135, 135, 135]), (u'projectCode_1217', [5, 136, 136, 136, 136, 136]), (u'projectCode_1271', [5, 137, 137, 137, 137, 137]), (u'projectCode_1336', [5, 138, 138, 138, 138, 138]), (u'projectCode_1365', [5, 139, 139, 139, 139, 139]), (u'projectCode_1388', [5, 140, 140, 140, 140, 140]), (u'projectCode_1456', [5, 141, 141, 141, 141, 141]), (u'projectCode_1484', [5, 142, 142, 142, 142, 142]), (u'projectCode_1515', [5, 143, 143, 143, 143, 143]), (u'projectCode_1534', [5, 144, 144, 144, 144, 144]), (u'projectCode_1539', [5, 145, 145, 145, 145, 145]), (u'projectCode_1552', [5, 146, 146, 146, 146, 146]), (u'projectCode_1553', [5, 147, 147, 147, 147, 147]), (u'projectCode_1555', [5, 148, 148, 148, 148, 148]), (u'projectCode_1556', [5, 149, 149, 149, 149, 149]), (u'projectCode_1559', [5, 150, 150, 150, 150, 150]), (u'projectCode_1594', [5, 151, 151, 151, 151, 151]), (u'projectCode_1606', [5, 152, 152, 152, 152, 152]), (u'projectCode_1614', [5, 153, 153, 153, 153, 153]), (u'projectCode_1615', [5, 154, 154, 154, 154, 154]), (u'projectCode_1616', [5, 155, 155, 155, 155, 155]), (u'projectCode_1627', [5, 156, 156, 156, 156, 156]), (u'projectCode_1628', [5, 157, 157, 157, 157, 157]), (u'projectCode_1631', [5, 158, 158, 158, 158, 158]), (u'projectCode_1638', [5, 159, 159, 159, 159, 159]), (u'projectCode_1643', [5, 160, 160, 160, 160, 160]), (u'projectCode_1644', [5, 161, 161, 161, 161, 161]), (u'projectCode_1648', [5, 162, 162, 162, 162, 162]), (u'projectCode_1658', [5, 163, 163, 163, 163, 163]), (u'projectCode_1674', [5, 164, 164, 164, 164, 164]), (u'projectCode_1779', [5, 165, 165, 165, 165, 165]), (u'projectCode_1794', [5, 166, 166, 166, 166, 166]), (u'projectCode_1833', [5, 167, 167, 167, 167, 167]), (u'projectCode_1836', [5, 168, 168, 168, 168, 168]), (u'projectCode_1866', [5, 169, 169, 169, 169, 169]), (u'projectCode_1878', [5, 170, 170, 170, 170, 170]), (u'projectCode_1954', [5, 171, 171, 171, 171, 171]), (u'projectCode_2058', [5, 172, 172, 172, 172, 172]), (u'projectCode_2093', [5, 173, 173, 173, 173, 173]), (u'projectCode_2112', [5, 174, 174, 174, 174, 174]), (u'projectCode_2175', [5, 175, 175, 175, 175, 175]), (u'projectCode_2180', [5, 176, 176, 176, 176, 176]), (u'projectCode_2242', [5, 177, 177, 177, 177, 177]), (u'projectCode_2243', [5, 178, 178, 178, 178, 178]), (u'projectCode_2244', [5, 179, 179, 179, 179, 179]), (u'projectCode_2264', [5, 180, 180, 180, 180, 180]), (u'projectCode_2268', [5, 181, 181, 181, 181, 181]), (u'projectCode_2273', [5, 182, 182, 182, 182, 182]), (u'projectCode_2335', [5, 183, 183, 183, 183, 183]), (u'projectCode_2348', [5, 184, 184, 184, 184, 184]), (u'projectCode_2370', [5, 185, 185, 185, 185, 185]), (u'projectCode_2376', [5, 186, 186, 186, 186, 186]), (u'projectCode_2406', [5, 187, 187, 187, 187, 187]), (u'projectCode_2508', [5, 188, 188, 188, 188, 188]), (u'projectCode_2562', [5, 189, 189, 189, 189, 189]), (u'projectCode_2620', [5, 190, 190, 190, 190, 190]), (u'projectCode_2630', [5, 191, 191, 191, 191, 191]), (u'projectCode_2635', [5, 192, 192, 192, 192, 192]), (u'projectCode_2694', [5, 193, 193, 193, 193, 193]), (u'projectCode_2696', [5, 194, 194, 194, 194, 194]), (u'projectCode_2745', [5, 195, 195, 195, 195, 195]), (u'projectCode_2756', [5, 196, 196, 196, 196, 196]), (u'projectCode_2759', [5, 197, 197, 197, 197, 197]), (u'projectCode_2766', [5, 198, 198, 198, 198, 198]), (u'projectCode_2767', [5, 199, 199, 199, 199, 199]), (u'projectCode_2770', [5, 200, 200, 200, 200, 200]), (u'projectCode_2784', [5, 201, 201, 201, 201, 201]), (u'projectCode_2866', [5, 202, 202, 202, 202, 202]), (u'projectCode_2877', [5, 203, 203, 203, 203, 203]), (u'projectCode_2914', [5, 204, 204, 204, 204, 204]), (u'projectCode_2923', [5, 205, 205, 205, 205, 205]), (u'projectCode_2932', [5, 206, 206, 206, 206, 206]), (u'projectCode_2945', [5, 207, 207, 207, 207, 207]), (u'projectCode_3010', [5, 208, 208, 208, 208, 208]), (u'projectCode_3064', [5, 209, 209, 209, 209, 209]), (u'projectCode_3077', [5, 210, 210, 210, 210, 210]), (u'projectCode_3080', [5, 211, 211, 211, 211, 211]), (u'projectCode_3082', [5, 212, 212, 212, 212, 212]), (u'projectCode_3104', [5, 213, 213, 213, 213, 213]), (u'projectCode_3105', [5, 214, 214, 214, 214, 214]), (u'projectCode_3135', [5, 215, 215, 215, 215, 215]), (u'projectCode_3145', [5, 216, 216, 216, 216, 216]), (u'projectCode_3181', [5, 217, 217, 217, 217, 217]), (u'projectCode_3193', [5, 218, 218, 218, 218, 218]), (u'projectCode_3211', [5, 219, 219, 219, 219, 219]), (u'projectCode_3262', [5, 220, 220, 220, 220, 220]), (u'projectCode_3279', [5, 221, 221, 221, 221, 221]), (u'projectCode_3291', [5, 222, 222, 222, 222, 222]), (u'projectCode_3313', [5, 223, 223, 223, 223, 223]), (u'projectCode_3417', [5, 224, 224, 224, 224, 224]), (u'projectCode_3430', [5, 225, 225, 225, 225, 225]), (u'projectCode_3432', [5, 226, 226, 226, 226, 226]), (u'projectCode_3444', [5, 227, 227, 227, 227, 227]), (u'projectCode_3450', [5, 228, 228, 228, 228, 228]), (u'projectCode_3454', [5, 229, 229, 229, 229, 229]), (u'projectCode_3461', [5, 230, 230, 230, 230, 230]), (u'projectCode_3462', [5, 231, 231, 231, 231, 231]), (u'projectCode_3466', [5, 232, 232, 232, 232, 232]), (u'projectCode_3507', [5, 233, 233, 233, 233, 233]), (u'projectCode_3514', [5, 234, 234, 234, 234, 234]), (u'projectCode_3565', [5, 235, 235, 235, 235, 235]), (u'projectCode_3566', [5, 236, 236, 236, 236, 236]), (u'projectCode_3571', [5, 237, 237, 237, 237, 237]), (u'projectCode_3640', [5, 238, 238, 238, 238, 238]), (u'projectCode_3776', [5, 239, 239, 239, 239, 239]), (u'projectCode_3911', [5, 240, 240, 240, 240, 240]), (u'projectCode_3957', [5, 241, 241, 241, 241, 241]), (u'projectCode_3988', [5, 242, 242, 242, 242, 242]), (u'projectCode_4077', [5, 243, 243, 243, 243, 243]), (u'projectCode_4086', [5, 244, 244, 244, 244, 244]), (u'projectCode_4106', [5, 245, 245, 245, 245, 245]), (u'projectCode_4108', [5, 246, 246, 246, 246, 246]), (u'projectCode_4115', [5, 247, 247, 247, 247, 247]), (u'projectCode_4116', [5, 248, 248, 248, 248, 248]), (u'projectCode_4120', [5, 249, 249, 249, 249, 249]), (u'projectCode_4121', [5, 250, 250, 250, 250, 250]), (u'projectCode_4124', [5, 251, 251, 251, 251, 251]), (u'projectCode_4145', [5, 252, 252, 252, 252, 252]), (u'projectCode_4149', [5, 253, 253, 253, 253, 253]), (u'projectCode_4203', [5, 254, 254, 254, 254, 254]), (u'projectCode_4214', [5, 255, 255, 255, 255, 255]), (u'projectCode_4239', [5, 256, 256, 256, 256, 256]), (u'projectCode_4272', [5, 257, 257, 257, 257, 257]), (u'projectCode_4302', [5, 258, 258, 258, 258, 258]), (u'projectCode_4303', [5, 259, 259, 259, 259, 259]), (u'projectCode_4304', [5, 260, 260, 260, 260, 260]), (u'projectCode_4316', [5, 261, 261, 261, 261, 261]), (u'projectCode_4332', [5, 262, 262, 262, 262, 262]), (u'sector_Agriculture and Food Security', [5, 263, 263, 263, 263, 263]), (u'sector_Economic Development', [5, 264, 264, 264, 264, 264]), (u'sector_Education and Training', [5, 265, 265, 265, 265, 265]), (u'sector_Emergency Response', [5, 266, 266, 266, 266, 266]), (u'sector_Financial Services for the Poor', [5, 267, 267, 267, 267, 267]), (u"sector_Gender Equality and Women's Empowerment", [5, 268, 268, 268, 268, 268]), (u'sector_Health', [5, 269, 269, 269, 269, 269]), (u'sector_No info', [5, 270, 270, 270, 270, 270]), (u'sector_Other', [5, 271, 271, 271, 271, 271]), (u'sector_Water, Sanitation, & Hygiene', [5, 272, 272, 272, 272, 272])]), None), ([0.54347470087688965, 0.76821060963421284, 0.7853111811171167, 0.8395935182642132, 0.7310288439700205, 0.26897115602997956, 0.1604064817357869, 0.8395935182642132, 0.7307113836525602, 0.26897115602997956, 0.1604064817357869, 0.1604064817357869, 0.43999519438733614, 0.015323143595214936], 'Gaussian Naive Bayes', None, OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'X2', [5, 2, 2, 2, 2, 2]), (u'X3', [5, 3, 3, 3, 3, 3]), (u'X4', [5, 4, 4, 4, 4, 4]), (u'X5', [5, 5, 5, 5, 5, 5]), (u'X6', [5, 6, 6, 6, 6, 6]), (u'X7', [5, 7, 7, 7, 7, 7]), (u'X8', [5, 8, 8, 8, 8, 8]), (u'X9', [5, 9, 9, 9, 9, 9]), (u'X10', [5, 10, 10, 10, 10, 10]), (u'X11', [5, 11, 11, 11, 11, 11]), (u'X12', [5, 12, 12, 12, 12, 12]), (u'X13', [5, 13, 13, 13, 13, 13]), (u'X14', [5, 14, 14, 14, 14, 14]), (u'X15', [5, 15, 15, 15, 15, 15]), (u'X16', [5, 16, 16, 16, 16, 16]), (u'X17', [5, 17, 17, 17, 17, 17]), (u'X18', [5, 18, 18, 18, 18, 18]), (u'X19', [5, 19, 19, 19, 19, 19]), (u'X20', [5, 20, 20, 20, 20, 20]), (u'X21', [5, 21, 21, 21, 21, 21]), (u'X22', [5, 22, 22, 22, 22, 22]), (u'X23', [5, 23, 23, 23, 23, 23]), (u'X24', [5, 24, 24, 24, 24, 24]), (u'X25', [5, 25, 25, 25, 25, 25]), (u'X26', [5, 26, 26, 26, 26, 26]), (u'X27', [5, 27, 27, 27, 27, 27]), (u'X28', [5, 28, 28, 28, 28, 28]), (u'X29', [5, 29, 29, 29, 29, 29]), (u'X30', [5, 30, 30, 30, 30, 30]), (u'X31', [5, 31, 31, 31, 31, 31]), (u'X32', [5, 32, 32, 32, 32, 32]), (u'X33', [5, 33, 33, 33, 33, 33]), (u'X34', [5, 34, 34, 34, 34, 34]), (u'X35', [5, 35, 35, 35, 35, 35]), (u'X36', [5, 36, 36, 36, 36, 36]), (u'X37', [5, 37, 37, 37, 37, 37]), (u'X38', [5, 38, 38, 38, 38, 38]), (u'X39', [5, 39, 39, 39, 39, 39]), (u'X40', [5, 40, 40, 40, 40, 40]), (u'X41', [5, 41, 41, 41, 41, 41]), (u'X42', [5, 42, 42, 42, 42, 42]), (u'X43', [5, 43, 43, 43, 43, 43]), (u'X44', [5, 44, 44, 44, 44, 44]), (u'X45', [5, 45, 45, 45, 45, 45]), (u'X46', [5, 46, 46, 46, 46, 46]), (u'X47', [5, 47, 47, 47, 47, 47]), (u'X48', [5, 48, 48, 48, 48, 48]), (u'X49', [5, 49, 49, 49, 49, 49]), (u'X50', [5, 50, 50, 50, 50, 50]), (u'X51', [5, 51, 51, 51, 51, 51]), (u'X52', [5, 52, 52, 52, 52, 52]), (u'X53', [5, 53, 53, 53, 53, 53]), (u'X54', [5, 54, 54, 54, 54, 54]), (u'X55', [5, 55, 55, 55, 55, 55]), (u'X56', [5, 56, 56, 56, 56, 56]), (u'X57', [5, 57, 57, 57, 57, 57]), (u'X58', [5, 58, 58, 58, 58, 58]), (u'X59', [5, 59, 59, 59, 59, 59]), (u'X60', [5, 60, 60, 60, 60, 60]), (u'X61', [5, 61, 61, 61, 61, 61]), (u'X62', [5, 62, 62, 62, 62, 62]), (u'X63', [5, 63, 63, 63, 63, 63]), (u'X64', [5, 64, 64, 64, 64, 64]), (u'X65', [5, 65, 65, 65, 65, 65]), (u'X66', [5, 66, 66, 66, 66, 66]), (u'X67', [5, 67, 67, 67, 67, 67]), (u'X68', [5, 68, 68, 68, 68, 68]), (u'X69', [5, 69, 69, 69, 69, 69]), (u'X70', [5, 70, 70, 70, 70, 70]), (u'X71', [5, 71, 71, 71, 71, 71]), (u'X72', [5, 72, 72, 72, 72, 72]), (u'X73', [5, 73, 73, 73, 73, 73]), (u'X74', [5, 74, 74, 74, 74, 74]), (u'X75', [5, 75, 75, 75, 75, 75]), (u'X76', [5, 76, 76, 76, 76, 76]), (u'X77', [5, 77, 77, 77, 77, 77]), (u'X78', [5, 78, 78, 78, 78, 78]), (u'X79', [5, 79, 79, 79, 79, 79]), (u'X80', [5, 80, 80, 80, 80, 80]), (u'X81', [5, 81, 81, 81, 81, 81]), (u'X82', [5, 82, 82, 82, 82, 82]), (u'X83', [5, 83, 83, 83, 83, 83]), (u'X84', [5, 84, 84, 84, 84, 84]), (u'X85', [5, 85, 85, 85, 85, 85]), (u'X86', [5, 86, 86, 86, 86, 86]), (u'X87', [5, 87, 87, 87, 87, 87]), (u'X88', [5, 88, 88, 88, 88, 88]), (u'X89', [5, 89, 89, 89, 89, 89]), (u'X90', [5, 90, 90, 90, 90, 90]), (u'projectCode_13', [5, 91, 91, 91, 91, 91]), (u'projectCode_25', [5, 92, 92, 92, 92, 92]), (u'projectCode_27', [5, 93, 93, 93, 93, 93]), (u'projectCode_29', [5, 94, 94, 94, 94, 94]), (u'projectCode_31', [5, 95, 95, 95, 95, 95]), (u'projectCode_40', [5, 96, 96, 96, 96, 96]), (u'projectCode_58', [5, 97, 97, 97, 97, 97]), (u'projectCode_97', [5, 98, 98, 98, 98, 98]), (u'projectCode_99', [5, 99, 99, 99, 99, 99]), (u'projectCode_161', [5, 100, 100, 100, 100, 100]), (u'projectCode_213', [5, 101, 101, 101, 101, 101]), (u'projectCode_221', [5, 102, 102, 102, 102, 102]), (u'projectCode_249', [5, 103, 103, 103, 103, 103]), (u'projectCode_258', [5, 104, 104, 104, 104, 104]), (u'projectCode_300', [5, 105, 105, 105, 105, 105]), (u'projectCode_320', [5, 106, 106, 106, 106, 106]), (u'projectCode_321', [5, 107, 107, 107, 107, 107]), (u'projectCode_363', [5, 108, 108, 108, 108, 108]), (u'projectCode_371', [5, 109, 109, 109, 109, 109]), (u'projectCode_421', [5, 110, 110, 110, 110, 110]), (u'projectCode_422', [5, 111, 111, 111, 111, 111]), (u'projectCode_473', [5, 112, 112, 112, 112, 112]), (u'projectCode_516', [5, 113, 113, 113, 113, 113]), (u'projectCode_517', [5, 114, 114, 114, 114, 114]), (u'projectCode_541', [5, 115, 115, 115, 115, 115]), (u'projectCode_549', [5, 116, 116, 116, 116, 116]), (u'projectCode_571', [5, 117, 117, 117, 117, 117]), (u'projectCode_609', [5, 118, 118, 118, 118, 118]), (u'projectCode_614', [5, 119, 119, 119, 119, 119]), (u'projectCode_710', [5, 120, 120, 120, 120, 120]), (u'projectCode_723', [5, 121, 121, 121, 121, 121]), (u'projectCode_727', [5, 122, 122, 122, 122, 122]), (u'projectCode_732', [5, 123, 123, 123, 123, 123]), (u'projectCode_735', [5, 124, 124, 124, 124, 124]), (u'projectCode_737', [5, 125, 125, 125, 125, 125]), (u'projectCode_743', [5, 126, 126, 126, 126, 126]), (u'projectCode_748', [5, 127, 127, 127, 127, 127]), (u'projectCode_959', [5, 128, 128, 128, 128, 128]), (u'projectCode_967', [5, 129, 129, 129, 129, 129]), (u'projectCode_1014', [5, 130, 130, 130, 130, 130]), (u'projectCode_1037', [5, 131, 131, 131, 131, 131]), (u'projectCode_1039', [5, 132, 132, 132, 132, 132]), (u'projectCode_1049', [5, 133, 133, 133, 133, 133]), (u'projectCode_1123', [5, 134, 134, 134, 134, 134]), (u'projectCode_1210', [5, 135, 135, 135, 135, 135]), (u'projectCode_1217', [5, 136, 136, 136, 136, 136]), (u'projectCode_1271', [5, 137, 137, 137, 137, 137]), (u'projectCode_1336', [5, 138, 138, 138, 138, 138]), (u'projectCode_1365', [5, 139, 139, 139, 139, 139]), (u'projectCode_1388', [5, 140, 140, 140, 140, 140]), (u'projectCode_1456', [5, 141, 141, 141, 141, 141]), (u'projectCode_1484', [5, 142, 142, 142, 142, 142]), (u'projectCode_1515', [5, 143, 143, 143, 143, 143]), (u'projectCode_1534', [5, 144, 144, 144, 144, 144]), (u'projectCode_1539', [5, 145, 145, 145, 145, 145]), (u'projectCode_1552', [5, 146, 146, 146, 146, 146]), (u'projectCode_1553', [5, 147, 147, 147, 147, 147]), (u'projectCode_1555', [5, 148, 148, 148, 148, 148]), (u'projectCode_1556', [5, 149, 149, 149, 149, 149]), (u'projectCode_1559', [5, 150, 150, 150, 150, 150]), (u'projectCode_1594', [5, 151, 151, 151, 151, 151]), (u'projectCode_1606', [5, 152, 152, 152, 152, 152]), (u'projectCode_1614', [5, 153, 153, 153, 153, 153]), (u'projectCode_1615', [5, 154, 154, 154, 154, 154]), (u'projectCode_1616', [5, 155, 155, 155, 155, 155]), (u'projectCode_1627', [5, 156, 156, 156, 156, 156]), (u'projectCode_1628', [5, 157, 157, 157, 157, 157]), (u'projectCode_1631', [5, 158, 158, 158, 158, 158]), (u'projectCode_1638', [5, 159, 159, 159, 159, 159]), (u'projectCode_1643', [5, 160, 160, 160, 160, 160]), (u'projectCode_1644', [5, 161, 161, 161, 161, 161]), (u'projectCode_1648', [5, 162, 162, 162, 162, 162]), (u'projectCode_1658', [5, 163, 163, 163, 163, 163]), (u'projectCode_1674', [5, 164, 164, 164, 164, 164]), (u'projectCode_1779', [5, 165, 165, 165, 165, 165]), (u'projectCode_1794', [5, 166, 166, 166, 166, 166]), (u'projectCode_1833', [5, 167, 167, 167, 167, 167]), (u'projectCode_1836', [5, 168, 168, 168, 168, 168]), (u'projectCode_1866', [5, 169, 169, 169, 169, 169]), (u'projectCode_1878', [5, 170, 170, 170, 170, 170]), (u'projectCode_1954', [5, 171, 171, 171, 171, 171]), (u'projectCode_2058', [5, 172, 172, 172, 172, 172]), (u'projectCode_2093', [5, 173, 173, 173, 173, 173]), (u'projectCode_2112', [5, 174, 174, 174, 174, 174]), (u'projectCode_2175', [5, 175, 175, 175, 175, 175]), (u'projectCode_2180', [5, 176, 176, 176, 176, 176]), (u'projectCode_2242', [5, 177, 177, 177, 177, 177]), (u'projectCode_2243', [5, 178, 178, 178, 178, 178]), (u'projectCode_2244', [5, 179, 179, 179, 179, 179]), (u'projectCode_2264', [5, 180, 180, 180, 180, 180]), (u'projectCode_2268', [5, 181, 181, 181, 181, 181]), (u'projectCode_2273', [5, 182, 182, 182, 182, 182]), (u'projectCode_2335', [5, 183, 183, 183, 183, 183]), (u'projectCode_2348', [5, 184, 184, 184, 184, 184]), (u'projectCode_2370', [5, 185, 185, 185, 185, 185]), (u'projectCode_2376', [5, 186, 186, 186, 186, 186]), (u'projectCode_2406', [5, 187, 187, 187, 187, 187]), (u'projectCode_2508', [5, 188, 188, 188, 188, 188]), (u'projectCode_2562', [5, 189, 189, 189, 189, 189]), (u'projectCode_2620', [5, 190, 190, 190, 190, 190]), (u'projectCode_2630', [5, 191, 191, 191, 191, 191]), (u'projectCode_2635', [5, 192, 192, 192, 192, 192]), (u'projectCode_2694', [5, 193, 193, 193, 193, 193]), (u'projectCode_2696', [5, 194, 194, 194, 194, 194]), (u'projectCode_2745', [5, 195, 195, 195, 195, 195]), (u'projectCode_2756', [5, 196, 196, 196, 196, 196]), (u'projectCode_2759', [5, 197, 197, 197, 197, 197]), (u'projectCode_2766', [5, 198, 198, 198, 198, 198]), (u'projectCode_2767', [5, 199, 199, 199, 199, 199]), (u'projectCode_2770', [5, 200, 200, 200, 200, 200]), (u'projectCode_2784', [5, 201, 201, 201, 201, 201]), (u'projectCode_2866', [5, 202, 202, 202, 202, 202]), (u'projectCode_2877', [5, 203, 203, 203, 203, 203]), (u'projectCode_2914', [5, 204, 204, 204, 204, 204]), (u'projectCode_2923', [5, 205, 205, 205, 205, 205]), (u'projectCode_2932', [5, 206, 206, 206, 206, 206]), (u'projectCode_2945', [5, 207, 207, 207, 207, 207]), (u'projectCode_3010', [5, 208, 208, 208, 208, 208]), (u'projectCode_3064', [5, 209, 209, 209, 209, 209]), (u'projectCode_3077', [5, 210, 210, 210, 210, 210]), (u'projectCode_3080', [5, 211, 211, 211, 211, 211]), (u'projectCode_3082', [5, 212, 212, 212, 212, 212]), (u'projectCode_3104', [5, 213, 213, 213, 213, 213]), (u'projectCode_3105', [5, 214, 214, 214, 214, 214]), (u'projectCode_3135', [5, 215, 215, 215, 215, 215]), (u'projectCode_3145', [5, 216, 216, 216, 216, 216]), (u'projectCode_3181', [5, 217, 217, 217, 217, 217]), (u'projectCode_3193', [5, 218, 218, 218, 218, 218]), (u'projectCode_3211', [5, 219, 219, 219, 219, 219]), (u'projectCode_3262', [5, 220, 220, 220, 220, 220]), (u'projectCode_3279', [5, 221, 221, 221, 221, 221]), (u'projectCode_3291', [5, 222, 222, 222, 222, 222]), (u'projectCode_3313', [5, 223, 223, 223, 223, 223]), (u'projectCode_3417', [5, 224, 224, 224, 224, 224]), (u'projectCode_3430', [5, 225, 225, 225, 225, 225]), (u'projectCode_3432', [5, 226, 226, 226, 226, 226]), (u'projectCode_3444', [5, 227, 227, 227, 227, 227]), (u'projectCode_3450', [5, 228, 228, 228, 228, 228]), (u'projectCode_3454', [5, 229, 229, 229, 229, 229]), (u'projectCode_3461', [5, 230, 230, 230, 230, 230]), (u'projectCode_3462', [5, 231, 231, 231, 231, 231]), (u'projectCode_3466', [5, 232, 232, 232, 232, 232]), (u'projectCode_3507', [5, 233, 233, 233, 233, 233]), (u'projectCode_3514', [5, 234, 234, 234, 234, 234]), (u'projectCode_3565', [5, 235, 235, 235, 235, 235]), (u'projectCode_3566', [5, 236, 236, 236, 236, 236]), (u'projectCode_3571', [5, 237, 237, 237, 237, 237]), (u'projectCode_3640', [5, 238, 238, 238, 238, 238]), (u'projectCode_3776', [5, 239, 239, 239, 239, 239]), (u'projectCode_3911', [5, 240, 240, 240, 240, 240]), (u'projectCode_3957', [5, 241, 241, 241, 241, 241]), (u'projectCode_3988', [5, 242, 242, 242, 242, 242]), (u'projectCode_4077', [5, 243, 243, 243, 243, 243]), (u'projectCode_4086', [5, 244, 244, 244, 244, 244]), (u'projectCode_4106', [5, 245, 245, 245, 245, 245]), (u'projectCode_4108', [5, 246, 246, 246, 246, 246]), (u'projectCode_4115', [5, 247, 247, 247, 247, 247]), (u'projectCode_4116', [5, 248, 248, 248, 248, 248]), (u'projectCode_4120', [5, 249, 249, 249, 249, 249]), (u'projectCode_4121', [5, 250, 250, 250, 250, 250]), (u'projectCode_4124', [5, 251, 251, 251, 251, 251]), (u'projectCode_4145', [5, 252, 252, 252, 252, 252]), (u'projectCode_4149', [5, 253, 253, 253, 253, 253]), (u'projectCode_4203', [5, 254, 254, 254, 254, 254]), (u'projectCode_4214', [5, 255, 255, 255, 255, 255]), (u'projectCode_4239', [5, 256, 256, 256, 256, 256]), (u'projectCode_4272', [5, 257, 257, 257, 257, 257]), (u'projectCode_4302', [5, 258, 258, 258, 258, 258]), (u'projectCode_4303', [5, 259, 259, 259, 259, 259]), (u'projectCode_4304', [5, 260, 260, 260, 260, 260]), (u'projectCode_4316', [5, 261, 261, 261, 261, 261]), (u'projectCode_4332', [5, 262, 262, 262, 262, 262]), (u'sector_Agriculture and Food Security', [5, 263, 263, 263, 263, 263]), (u'sector_Economic Development', [5, 264, 264, 264, 264, 264]), (u'sector_Education and Training', [5, 265, 265, 265, 265, 265]), (u'sector_Emergency Response', [5, 266, 266, 266, 266, 266]), (u'sector_Financial Services for the Poor', [5, 267, 267, 267, 267, 267]), (u"sector_Gender Equality and Women's Empowerment", [5, 268, 268, 268, 268, 268]), (u'sector_Health', [5, 269, 269, 269, 269, 269]), (u'sector_No info', [5, 270, 270, 270, 270, 270]), (u'sector_Other', [5, 271, 271, 271, 271, 271]), (u'sector_Water, Sanitation, & Hygiene', [5, 272, 272, 272, 272, 272])]), None), ([0.47673575385674571, 0.59375130181212254, 0.7464363869268791, 0.7294589398516891, 0.7634138340020693, 0.2365861659979307, 0.27054106014831086, 0.55570447679209, 0.6303575844752315, 0.10638049814520403, 0.15615490249931335, 0.15615490249931335, 0.7121066725267724, 0.017572085121291343], 'K-nearest neighbours', None, OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'X2', [5, 2, 2, 2, 2, 2]), (u'X3', [5, 3, 3, 3, 3, 3]), (u'X4', [5, 4, 4, 4, 4, 4]), (u'X5', [5, 5, 5, 5, 5, 5]), (u'X6', [5, 6, 6, 6, 6, 6]), (u'X7', [5, 7, 7, 7, 7, 7]), (u'X8', [5, 8, 8, 8, 8, 8]), (u'X9', [5, 9, 9, 9, 9, 9]), (u'X10', [5, 10, 10, 10, 10, 10]), (u'X11', [5, 11, 11, 11, 11, 11]), (u'X12', [5, 12, 12, 12, 12, 12]), (u'X13', [5, 13, 13, 13, 13, 13]), (u'X14', [5, 14, 14, 14, 14, 14]), (u'X15', [5, 15, 15, 15, 15, 15]), (u'X16', [5, 16, 16, 16, 16, 16]), (u'X17', [5, 17, 17, 17, 17, 17]), (u'X18', [5, 18, 18, 18, 18, 18]), (u'X19', [5, 19, 19, 19, 19, 19]), (u'X20', [5, 20, 20, 20, 20, 20]), (u'X21', [5, 21, 21, 21, 21, 21]), (u'X22', [5, 22, 22, 22, 22, 22]), (u'X23', [5, 23, 23, 23, 23, 23]), (u'X24', [5, 24, 24, 24, 24, 24]), (u'X25', [5, 25, 25, 25, 25, 25]), (u'X26', [5, 26, 26, 26, 26, 26]), (u'X27', [5, 27, 27, 27, 27, 27]), (u'X28', [5, 28, 28, 28, 28, 28]), (u'X29', [5, 29, 29, 29, 29, 29]), (u'X30', [5, 30, 30, 30, 30, 30]), (u'X31', [5, 31, 31, 31, 31, 31]), (u'X32', [5, 32, 32, 32, 32, 32]), (u'X33', [5, 33, 33, 33, 33, 33]), (u'X34', [5, 34, 34, 34, 34, 34]), (u'X35', [5, 35, 35, 35, 35, 35]), (u'X36', [5, 36, 36, 36, 36, 36]), (u'X37', [5, 37, 37, 37, 37, 37]), (u'X38', [5, 38, 38, 38, 38, 38]), (u'X39', [5, 39, 39, 39, 39, 39]), (u'X40', [5, 40, 40, 40, 40, 40]), (u'X41', [5, 41, 41, 41, 41, 41]), (u'X42', [5, 42, 42, 42, 42, 42]), (u'X43', [5, 43, 43, 43, 43, 43]), (u'X44', [5, 44, 44, 44, 44, 44]), (u'X45', [5, 45, 45, 45, 45, 45]), (u'X46', [5, 46, 46, 46, 46, 46]), (u'X47', [5, 47, 47, 47, 47, 47]), (u'X48', [5, 48, 48, 48, 48, 48]), (u'X49', [5, 49, 49, 49, 49, 49]), (u'X50', [5, 50, 50, 50, 50, 50]), (u'X51', [5, 51, 51, 51, 51, 51]), (u'X52', [5, 52, 52, 52, 52, 52]), (u'X53', [5, 53, 53, 53, 53, 53]), (u'X54', [5, 54, 54, 54, 54, 54]), (u'X55', [5, 55, 55, 55, 55, 55]), (u'X56', [5, 56, 56, 56, 56, 56]), (u'X57', [5, 57, 57, 57, 57, 57]), (u'X58', [5, 58, 58, 58, 58, 58]), (u'X59', [5, 59, 59, 59, 59, 59]), (u'X60', [5, 60, 60, 60, 60, 60]), (u'X61', [5, 61, 61, 61, 61, 61]), (u'X62', [5, 62, 62, 62, 62, 62]), (u'X63', [5, 63, 63, 63, 63, 63]), (u'X64', [5, 64, 64, 64, 64, 64]), (u'X65', [5, 65, 65, 65, 65, 65]), (u'X66', [5, 66, 66, 66, 66, 66]), (u'X67', [5, 67, 67, 67, 67, 67]), (u'X68', [5, 68, 68, 68, 68, 68]), (u'X69', [5, 69, 69, 69, 69, 69]), (u'X70', [5, 70, 70, 70, 70, 70]), (u'X71', [5, 71, 71, 71, 71, 71]), (u'X72', [5, 72, 72, 72, 72, 72]), (u'X73', [5, 73, 73, 73, 73, 73]), (u'X74', [5, 74, 74, 74, 74, 74]), (u'X75', [5, 75, 75, 75, 75, 75]), (u'X76', [5, 76, 76, 76, 76, 76]), (u'X77', [5, 77, 77, 77, 77, 77]), (u'X78', [5, 78, 78, 78, 78, 78]), (u'X79', [5, 79, 79, 79, 79, 79]), (u'X80', [5, 80, 80, 80, 80, 80]), (u'X81', [5, 81, 81, 81, 81, 81]), (u'X82', [5, 82, 82, 82, 82, 82]), (u'X83', [5, 83, 83, 83, 83, 83]), (u'X84', [5, 84, 84, 84, 84, 84]), (u'X85', [5, 85, 85, 85, 85, 85]), (u'X86', [5, 86, 86, 86, 86, 86]), (u'X87', [5, 87, 87, 87, 87, 87]), (u'X88', [5, 88, 88, 88, 88, 88]), (u'X89', [5, 89, 89, 89, 89, 89]), (u'X90', [5, 90, 90, 90, 90, 90]), (u'projectCode_13', [5, 91, 91, 91, 91, 91]), (u'projectCode_25', [5, 92, 92, 92, 92, 92]), (u'projectCode_27', [5, 93, 93, 93, 93, 93]), (u'projectCode_29', [5, 94, 94, 94, 94, 94]), (u'projectCode_31', [5, 95, 95, 95, 95, 95]), (u'projectCode_40', [5, 96, 96, 96, 96, 96]), (u'projectCode_58', [5, 97, 97, 97, 97, 97]), (u'projectCode_97', [5, 98, 98, 98, 98, 98]), (u'projectCode_99', [5, 99, 99, 99, 99, 99]), (u'projectCode_161', [5, 100, 100, 100, 100, 100]), (u'projectCode_213', [5, 101, 101, 101, 101, 101]), (u'projectCode_221', [5, 102, 102, 102, 102, 102]), (u'projectCode_249', [5, 103, 103, 103, 103, 103]), (u'projectCode_258', [5, 104, 104, 104, 104, 104]), (u'projectCode_300', [5, 105, 105, 105, 105, 105]), (u'projectCode_320', [5, 106, 106, 106, 106, 106]), (u'projectCode_321', [5, 107, 107, 107, 107, 107]), (u'projectCode_363', [5, 108, 108, 108, 108, 108]), (u'projectCode_371', [5, 109, 109, 109, 109, 109]), (u'projectCode_421', [5, 110, 110, 110, 110, 110]), (u'projectCode_422', [5, 111, 111, 111, 111, 111]), (u'projectCode_473', [5, 112, 112, 112, 112, 112]), (u'projectCode_516', [5, 113, 113, 113, 113, 113]), (u'projectCode_517', [5, 114, 114, 114, 114, 114]), (u'projectCode_541', [5, 115, 115, 115, 115, 115]), (u'projectCode_549', [5, 116, 116, 116, 116, 116]), (u'projectCode_571', [5, 117, 117, 117, 117, 117]), (u'projectCode_609', [5, 118, 118, 118, 118, 118]), (u'projectCode_614', [5, 119, 119, 119, 119, 119]), (u'projectCode_710', [5, 120, 120, 120, 120, 120]), (u'projectCode_723', [5, 121, 121, 121, 121, 121]), (u'projectCode_727', [5, 122, 122, 122, 122, 122]), (u'projectCode_732', [5, 123, 123, 123, 123, 123]), (u'projectCode_735', [5, 124, 124, 124, 124, 124]), (u'projectCode_737', [5, 125, 125, 125, 125, 125]), (u'projectCode_743', [5, 126, 126, 126, 126, 126]), (u'projectCode_748', [5, 127, 127, 127, 127, 127]), (u'projectCode_959', [5, 128, 128, 128, 128, 128]), (u'projectCode_967', [5, 129, 129, 129, 129, 129]), (u'projectCode_1014', [5, 130, 130, 130, 130, 130]), (u'projectCode_1037', [5, 131, 131, 131, 131, 131]), (u'projectCode_1039', [5, 132, 132, 132, 132, 132]), (u'projectCode_1049', [5, 133, 133, 133, 133, 133]), (u'projectCode_1123', [5, 134, 134, 134, 134, 134]), (u'projectCode_1210', [5, 135, 135, 135, 135, 135]), (u'projectCode_1217', [5, 136, 136, 136, 136, 136]), (u'projectCode_1271', [5, 137, 137, 137, 137, 137]), (u'projectCode_1336', [5, 138, 138, 138, 138, 138]), (u'projectCode_1365', [5, 139, 139, 139, 139, 139]), (u'projectCode_1388', [5, 140, 140, 140, 140, 140]), (u'projectCode_1456', [5, 141, 141, 141, 141, 141]), (u'projectCode_1484', [5, 142, 142, 142, 142, 142]), (u'projectCode_1515', [5, 143, 143, 143, 143, 143]), (u'projectCode_1534', [5, 144, 144, 144, 144, 144]), (u'projectCode_1539', [5, 145, 145, 145, 145, 145]), (u'projectCode_1552', [5, 146, 146, 146, 146, 146]), (u'projectCode_1553', [5, 147, 147, 147, 147, 147]), (u'projectCode_1555', [5, 148, 148, 148, 148, 148]), (u'projectCode_1556', [5, 149, 149, 149, 149, 149]), (u'projectCode_1559', [5, 150, 150, 150, 150, 150]), (u'projectCode_1594', [5, 151, 151, 151, 151, 151]), (u'projectCode_1606', [5, 152, 152, 152, 152, 152]), (u'projectCode_1614', [5, 153, 153, 153, 153, 153]), (u'projectCode_1615', [5, 154, 154, 154, 154, 154]), (u'projectCode_1616', [5, 155, 155, 155, 155, 155]), (u'projectCode_1627', [5, 156, 156, 156, 156, 156]), (u'projectCode_1628', [5, 157, 157, 157, 157, 157]), (u'projectCode_1631', [5, 158, 158, 158, 158, 158]), (u'projectCode_1638', [5, 159, 159, 159, 159, 159]), (u'projectCode_1643', [5, 160, 160, 160, 160, 160]), (u'projectCode_1644', [5, 161, 161, 161, 161, 161]), (u'projectCode_1648', [5, 162, 162, 162, 162, 162]), (u'projectCode_1658', [5, 163, 163, 163, 163, 163]), (u'projectCode_1674', [5, 164, 164, 164, 164, 164]), (u'projectCode_1779', [5, 165, 165, 165, 165, 165]), (u'projectCode_1794', [5, 166, 166, 166, 166, 166]), (u'projectCode_1833', [5, 167, 167, 167, 167, 167]), (u'projectCode_1836', [5, 168, 168, 168, 168, 168]), (u'projectCode_1866', [5, 169, 169, 169, 169, 169]), (u'projectCode_1878', [5, 170, 170, 170, 170, 170]), (u'projectCode_1954', [5, 171, 171, 171, 171, 171]), (u'projectCode_2058', [5, 172, 172, 172, 172, 172]), (u'projectCode_2093', [5, 173, 173, 173, 173, 173]), (u'projectCode_2112', [5, 174, 174, 174, 174, 174]), (u'projectCode_2175', [5, 175, 175, 175, 175, 175]), (u'projectCode_2180', [5, 176, 176, 176, 176, 176]), (u'projectCode_2242', [5, 177, 177, 177, 177, 177]), (u'projectCode_2243', [5, 178, 178, 178, 178, 178]), (u'projectCode_2244', [5, 179, 179, 179, 179, 179]), (u'projectCode_2264', [5, 180, 180, 180, 180, 180]), (u'projectCode_2268', [5, 181, 181, 181, 181, 181]), (u'projectCode_2273', [5, 182, 182, 182, 182, 182]), (u'projectCode_2335', [5, 183, 183, 183, 183, 183]), (u'projectCode_2348', [5, 184, 184, 184, 184, 184]), (u'projectCode_2370', [5, 185, 185, 185, 185, 185]), (u'projectCode_2376', [5, 186, 186, 186, 186, 186]), (u'projectCode_2406', [5, 187, 187, 187, 187, 187]), (u'projectCode_2508', [5, 188, 188, 188, 188, 188]), (u'projectCode_2562', [5, 189, 189, 189, 189, 189]), (u'projectCode_2620', [5, 190, 190, 190, 190, 190]), (u'projectCode_2630', [5, 191, 191, 191, 191, 191]), (u'projectCode_2635', [5, 192, 192, 192, 192, 192]), (u'projectCode_2694', [5, 193, 193, 193, 193, 193]), (u'projectCode_2696', [5, 194, 194, 194, 194, 194]), (u'projectCode_2745', [5, 195, 195, 195, 195, 195]), (u'projectCode_2756', [5, 196, 196, 196, 196, 196]), (u'projectCode_2759', [5, 197, 197, 197, 197, 197]), (u'projectCode_2766', [5, 198, 198, 198, 198, 198]), (u'projectCode_2767', [5, 199, 199, 199, 199, 199]), (u'projectCode_2770', [5, 200, 200, 200, 200, 200]), (u'projectCode_2784', [5, 201, 201, 201, 201, 201]), (u'projectCode_2866', [5, 202, 202, 202, 202, 202]), (u'projectCode_2877', [5, 203, 203, 203, 203, 203]), (u'projectCode_2914', [5, 204, 204, 204, 204, 204]), (u'projectCode_2923', [5, 205, 205, 205, 205, 205]), (u'projectCode_2932', [5, 206, 206, 206, 206, 206]), (u'projectCode_2945', [5, 207, 207, 207, 207, 207]), (u'projectCode_3010', [5, 208, 208, 208, 208, 208]), (u'projectCode_3064', [5, 209, 209, 209, 209, 209]), (u'projectCode_3077', [5, 210, 210, 210, 210, 210]), (u'projectCode_3080', [5, 211, 211, 211, 211, 211]), (u'projectCode_3082', [5, 212, 212, 212, 212, 212]), (u'projectCode_3104', [5, 213, 213, 213, 213, 213]), (u'projectCode_3105', [5, 214, 214, 214, 214, 214]), (u'projectCode_3135', [5, 215, 215, 215, 215, 215]), (u'projectCode_3145', [5, 216, 216, 216, 216, 216]), (u'projectCode_3181', [5, 217, 217, 217, 217, 217]), (u'projectCode_3193', [5, 218, 218, 218, 218, 218]), (u'projectCode_3211', [5, 219, 219, 219, 219, 219]), (u'projectCode_3262', [5, 220, 220, 220, 220, 220]), (u'projectCode_3279', [5, 221, 221, 221, 221, 221]), (u'projectCode_3291', [5, 222, 222, 222, 222, 222]), (u'projectCode_3313', [5, 223, 223, 223, 223, 223]), (u'projectCode_3417', [5, 224, 224, 224, 224, 224]), (u'projectCode_3430', [5, 225, 225, 225, 225, 225]), (u'projectCode_3432', [5, 226, 226, 226, 226, 226]), (u'projectCode_3444', [5, 227, 227, 227, 227, 227]), (u'projectCode_3450', [5, 228, 228, 228, 228, 228]), (u'projectCode_3454', [5, 229, 229, 229, 229, 229]), (u'projectCode_3461', [5, 230, 230, 230, 230, 230]), (u'projectCode_3462', [5, 231, 231, 231, 231, 231]), (u'projectCode_3466', [5, 232, 232, 232, 232, 232]), (u'projectCode_3507', [5, 233, 233, 233, 233, 233]), (u'projectCode_3514', [5, 234, 234, 234, 234, 234]), (u'projectCode_3565', [5, 235, 235, 235, 235, 235]), (u'projectCode_3566', [5, 236, 236, 236, 236, 236]), (u'projectCode_3571', [5, 237, 237, 237, 237, 237]), (u'projectCode_3640', [5, 238, 238, 238, 238, 238]), (u'projectCode_3776', [5, 239, 239, 239, 239, 239]), (u'projectCode_3911', [5, 240, 240, 240, 240, 240]), (u'projectCode_3957', [5, 241, 241, 241, 241, 241]), (u'projectCode_3988', [5, 242, 242, 242, 242, 242]), (u'projectCode_4077', [5, 243, 243, 243, 243, 243]), (u'projectCode_4086', [5, 244, 244, 244, 244, 244]), (u'projectCode_4106', [5, 245, 245, 245, 245, 245]), (u'projectCode_4108', [5, 246, 246, 246, 246, 246]), (u'projectCode_4115', [5, 247, 247, 247, 247, 247]), (u'projectCode_4116', [5, 248, 248, 248, 248, 248]), (u'projectCode_4120', [5, 249, 249, 249, 249, 249]), (u'projectCode_4121', [5, 250, 250, 250, 250, 250]), (u'projectCode_4124', [5, 251, 251, 251, 251, 251]), (u'projectCode_4145', [5, 252, 252, 252, 252, 252]), (u'projectCode_4149', [5, 253, 253, 253, 253, 253]), (u'projectCode_4203', [5, 254, 254, 254, 254, 254]), (u'projectCode_4214', [5, 255, 255, 255, 255, 255]), (u'projectCode_4239', [5, 256, 256, 256, 256, 256]), (u'projectCode_4272', [5, 257, 257, 257, 257, 257]), (u'projectCode_4302', [5, 258, 258, 258, 258, 258]), (u'projectCode_4303', [5, 259, 259, 259, 259, 259]), (u'projectCode_4304', [5, 260, 260, 260, 260, 260]), (u'projectCode_4316', [5, 261, 261, 261, 261, 261]), (u'projectCode_4332', [5, 262, 262, 262, 262, 262]), (u'sector_Agriculture and Food Security', [5, 263, 263, 263, 263, 263]), (u'sector_Economic Development', [5, 264, 264, 264, 264, 264]), (u'sector_Education and Training', [5, 265, 265, 265, 265, 265]), (u'sector_Emergency Response', [5, 266, 266, 266, 266, 266]), (u'sector_Financial Services for the Poor', [5, 267, 267, 267, 267, 267]), (u"sector_Gender Equality and Women's Empowerment", [5, 268, 268, 268, 268, 268]), (u'sector_Health', [5, 269, 269, 269, 269, 269]), (u'sector_No info', [5, 270, 270, 270, 270, 270]), (u'sector_Other', [5, 271, 271, 271, 271, 271]), (u'sector_Water, Sanitation, & Hygiene', [5, 272, 272, 272, 272, 272])]), None), ([0.5198794489657238, 0.53123647037079003, 0.7727893038591457, 0.8196301382404101, 0.7259484694778813, 0.2740515305221188, 0.18036986175958986, 0.5563270163874393, 0.5068322103616222, 0.07907386377974614, 0.06112972626567793, 0.06112972626567793, 8.585269589738928, 0.006399212771648499], 'Logistic regression', None, OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'X2', [5, 2, 2, 2, 2, 2]), (u'X3', [5, 3, 3, 3, 3, 3]), (u'X4', [5, 4, 4, 4, 4, 4]), (u'X5', [5, 5, 5, 5, 5, 5]), (u'X6', [5, 6, 6, 6, 6, 6]), (u'X7', [5, 7, 7, 7, 7, 7]), (u'X8', [5, 8, 8, 8, 8, 8]), (u'X9', [5, 9, 9, 9, 9, 9]), (u'X10', [5, 10, 10, 10, 10, 10]), (u'X11', [5, 11, 11, 11, 11, 11]), (u'X12', [5, 12, 12, 12, 12, 12]), (u'X13', [5, 13, 13, 13, 13, 13]), (u'X14', [5, 14, 14, 14, 14, 14]), (u'X15', [5, 15, 15, 15, 15, 15]), (u'X16', [5, 16, 16, 16, 16, 16]), (u'X17', [5, 17, 17, 17, 17, 17]), (u'X18', [5, 18, 18, 18, 18, 18]), (u'X19', [5, 19, 19, 19, 19, 19]), (u'X20', [5, 20, 20, 20, 20, 20]), (u'X21', [5, 21, 21, 21, 21, 21]), (u'X22', [5, 22, 22, 22, 22, 22]), (u'X23', [5, 23, 23, 23, 23, 23]), (u'X24', [5, 24, 24, 24, 24, 24]), (u'X25', [5, 25, 25, 25, 25, 25]), (u'X26', [5, 26, 26, 26, 26, 26]), (u'X27', [5, 27, 27, 27, 27, 27]), (u'X28', [5, 28, 28, 28, 28, 28]), (u'X29', [5, 29, 29, 29, 29, 29]), (u'X30', [5, 30, 30, 30, 30, 30]), (u'X31', [5, 31, 31, 31, 31, 31]), (u'X32', [5, 32, 32, 32, 32, 32]), (u'X33', [5, 33, 33, 33, 33, 33]), (u'X34', [5, 34, 34, 34, 34, 34]), (u'X35', [5, 35, 35, 35, 35, 35]), (u'X36', [5, 36, 36, 36, 36, 36]), (u'X37', [5, 37, 37, 37, 37, 37]), (u'X38', [5, 38, 38, 38, 38, 38]), (u'X39', [5, 39, 39, 39, 39, 39]), (u'X40', [5, 40, 40, 40, 40, 40]), (u'X41', [5, 41, 41, 41, 41, 41]), (u'X42', [5, 42, 42, 42, 42, 42]), (u'X43', [5, 43, 43, 43, 43, 43]), (u'X44', [5, 44, 44, 44, 44, 44]), (u'X45', [5, 45, 45, 45, 45, 45]), (u'X46', [5, 46, 46, 46, 46, 46]), (u'X47', [5, 47, 47, 47, 47, 47]), (u'X48', [5, 48, 48, 48, 48, 48]), (u'X49', [5, 49, 49, 49, 49, 49]), (u'X50', [5, 50, 50, 50, 50, 50]), (u'X51', [5, 51, 51, 51, 51, 51]), (u'X52', [5, 52, 52, 52, 52, 52]), (u'X53', [5, 53, 53, 53, 53, 53]), (u'X54', [5, 54, 54, 54, 54, 54]), (u'X55', [5, 55, 55, 55, 55, 55]), (u'X56', [5, 56, 56, 56, 56, 56]), (u'X57', [5, 57, 57, 57, 57, 57]), (u'X58', [5, 58, 58, 58, 58, 58]), (u'X59', [5, 59, 59, 59, 59, 59]), (u'X60', [5, 60, 60, 60, 60, 60]), (u'X61', [5, 61, 61, 61, 61, 61]), (u'X62', [5, 62, 62, 62, 62, 62]), (u'X63', [5, 63, 63, 63, 63, 63]), (u'X64', [5, 64, 64, 64, 64, 64]), (u'X65', [5, 65, 65, 65, 65, 65]), (u'X66', [5, 66, 66, 66, 66, 66]), (u'X67', [5, 67, 67, 67, 67, 67]), (u'X68', [5, 68, 68, 68, 68, 68]), (u'X69', [5, 69, 69, 69, 69, 69]), (u'X70', [5, 70, 70, 70, 70, 70]), (u'X71', [5, 71, 71, 71, 71, 71]), (u'X72', [5, 72, 72, 72, 72, 72]), (u'X73', [5, 73, 73, 73, 73, 73]), (u'X74', [5, 74, 74, 74, 74, 74]), (u'X75', [5, 75, 75, 75, 75, 75]), (u'X76', [5, 76, 76, 76, 76, 76]), (u'X77', [5, 77, 77, 77, 77, 77]), (u'X78', [5, 78, 78, 78, 78, 78]), (u'X79', [5, 79, 79, 79, 79, 79]), (u'X80', [5, 80, 80, 80, 80, 80]), (u'X81', [5, 81, 81, 81, 81, 81]), (u'X82', [5, 82, 82, 82, 82, 82]), (u'X83', [5, 83, 83, 83, 83, 83]), (u'X84', [5, 84, 84, 84, 84, 84]), (u'X85', [5, 85, 85, 85, 85, 85]), (u'X86', [5, 86, 86, 86, 86, 86]), (u'X87', [5, 87, 87, 87, 87, 87]), (u'X88', [5, 88, 88, 88, 88, 88]), (u'X89', [5, 89, 89, 89, 89, 89]), (u'X90', [5, 90, 90, 90, 90, 90]), (u'projectCode_13', [5, 91, 91, 91, 91, 91]), (u'projectCode_25', [5, 92, 92, 92, 92, 92]), (u'projectCode_27', [5, 93, 93, 93, 93, 93]), (u'projectCode_29', [5, 94, 94, 94, 94, 94]), (u'projectCode_31', [5, 95, 95, 95, 95, 95]), (u'projectCode_40', [5, 96, 96, 96, 96, 96]), (u'projectCode_58', [5, 97, 97, 97, 97, 97]), (u'projectCode_97', [5, 98, 98, 98, 98, 98]), (u'projectCode_99', [5, 99, 99, 99, 99, 99]), (u'projectCode_161', [5, 100, 100, 100, 100, 100]), (u'projectCode_213', [5, 101, 101, 101, 101, 101]), (u'projectCode_221', [5, 102, 102, 102, 102, 102]), (u'projectCode_249', [5, 103, 103, 103, 103, 103]), (u'projectCode_258', [5, 104, 104, 104, 104, 104]), (u'projectCode_300', [5, 105, 105, 105, 105, 105]), (u'projectCode_320', [5, 106, 106, 106, 106, 106]), (u'projectCode_321', [5, 107, 107, 107, 107, 107]), (u'projectCode_363', [5, 108, 108, 108, 108, 108]), (u'projectCode_371', [5, 109, 109, 109, 109, 109]), (u'projectCode_421', [5, 110, 110, 110, 110, 110]), (u'projectCode_422', [5, 111, 111, 111, 111, 111]), (u'projectCode_473', [5, 112, 112, 112, 112, 112]), (u'projectCode_516', [5, 113, 113, 113, 113, 113]), (u'projectCode_517', [5, 114, 114, 114, 114, 114]), (u'projectCode_541', [5, 115, 115, 115, 115, 115]), (u'projectCode_549', [5, 116, 116, 116, 116, 116]), (u'projectCode_571', [5, 117, 117, 117, 117, 117]), (u'projectCode_609', [5, 118, 118, 118, 118, 118]), (u'projectCode_614', [5, 119, 119, 119, 119, 119]), (u'projectCode_710', [5, 120, 120, 120, 120, 120]), (u'projectCode_723', [5, 121, 121, 121, 121, 121]), (u'projectCode_727', [5, 122, 122, 122, 122, 122]), (u'projectCode_732', [5, 123, 123, 123, 123, 123]), (u'projectCode_735', [5, 124, 124, 124, 124, 124]), (u'projectCode_737', [5, 125, 125, 125, 125, 125]), (u'projectCode_743', [5, 126, 126, 126, 126, 126]), (u'projectCode_748', [5, 127, 127, 127, 127, 127]), (u'projectCode_959', [5, 128, 128, 128, 128, 128]), (u'projectCode_967', [5, 129, 129, 129, 129, 129]), (u'projectCode_1014', [5, 130, 130, 130, 130, 130]), (u'projectCode_1037', [5, 131, 131, 131, 131, 131]), (u'projectCode_1039', [5, 132, 132, 132, 132, 132]), (u'projectCode_1049', [5, 133, 133, 133, 133, 133]), (u'projectCode_1123', [5, 134, 134, 134, 134, 134]), (u'projectCode_1210', [5, 135, 135, 135, 135, 135]), (u'projectCode_1217', [5, 136, 136, 136, 136, 136]), (u'projectCode_1271', [5, 137, 137, 137, 137, 137]), (u'projectCode_1336', [5, 138, 138, 138, 138, 138]), (u'projectCode_1365', [5, 139, 139, 139, 139, 139]), (u'projectCode_1388', [5, 140, 140, 140, 140, 140]), (u'projectCode_1456', [5, 141, 141, 141, 141, 141]), (u'projectCode_1484', [5, 142, 142, 142, 142, 142]), (u'projectCode_1515', [5, 143, 143, 143, 143, 143]), (u'projectCode_1534', [5, 144, 144, 144, 144, 144]), (u'projectCode_1539', [5, 145, 145, 145, 145, 145]), (u'projectCode_1552', [5, 146, 146, 146, 146, 146]), (u'projectCode_1553', [5, 147, 147, 147, 147, 147]), (u'projectCode_1555', [5, 148, 148, 148, 148, 148]), (u'projectCode_1556', [5, 149, 149, 149, 149, 149]), (u'projectCode_1559', [5, 150, 150, 150, 150, 150]), (u'projectCode_1594', [5, 151, 151, 151, 151, 151]), (u'projectCode_1606', [5, 152, 152, 152, 152, 152]), (u'projectCode_1614', [5, 153, 153, 153, 153, 153]), (u'projectCode_1615', [5, 154, 154, 154, 154, 154]), (u'projectCode_1616', [5, 155, 155, 155, 155, 155]), (u'projectCode_1627', [5, 156, 156, 156, 156, 156]), (u'projectCode_1628', [5, 157, 157, 157, 157, 157]), (u'projectCode_1631', [5, 158, 158, 158, 158, 158]), (u'projectCode_1638', [5, 159, 159, 159, 159, 159]), (u'projectCode_1643', [5, 160, 160, 160, 160, 160]), (u'projectCode_1644', [5, 161, 161, 161, 161, 161]), (u'projectCode_1648', [5, 162, 162, 162, 162, 162]), (u'projectCode_1658', [5, 163, 163, 163, 163, 163]), (u'projectCode_1674', [5, 164, 164, 164, 164, 164]), (u'projectCode_1779', [5, 165, 165, 165, 165, 165]), (u'projectCode_1794', [5, 166, 166, 166, 166, 166]), (u'projectCode_1833', [5, 167, 167, 167, 167, 167]), (u'projectCode_1836', [5, 168, 168, 168, 168, 168]), (u'projectCode_1866', [5, 169, 169, 169, 169, 169]), (u'projectCode_1878', [5, 170, 170, 170, 170, 170]), (u'projectCode_1954', [5, 171, 171, 171, 171, 171]), (u'projectCode_2058', [5, 172, 172, 172, 172, 172]), (u'projectCode_2093', [5, 173, 173, 173, 173, 173]), (u'projectCode_2112', [5, 174, 174, 174, 174, 174]), (u'projectCode_2175', [5, 175, 175, 175, 175, 175]), (u'projectCode_2180', [5, 176, 176, 176, 176, 176]), (u'projectCode_2242', [5, 177, 177, 177, 177, 177]), (u'projectCode_2243', [5, 178, 178, 178, 178, 178]), (u'projectCode_2244', [5, 179, 179, 179, 179, 179]), (u'projectCode_2264', [5, 180, 180, 180, 180, 180]), (u'projectCode_2268', [5, 181, 181, 181, 181, 181]), (u'projectCode_2273', [5, 182, 182, 182, 182, 182]), (u'projectCode_2335', [5, 183, 183, 183, 183, 183]), (u'projectCode_2348', [5, 184, 184, 184, 184, 184]), (u'projectCode_2370', [5, 185, 185, 185, 185, 185]), (u'projectCode_2376', [5, 186, 186, 186, 186, 186]), (u'projectCode_2406', [5, 187, 187, 187, 187, 187]), (u'projectCode_2508', [5, 188, 188, 188, 188, 188]), (u'projectCode_2562', [5, 189, 189, 189, 189, 189]), (u'projectCode_2620', [5, 190, 190, 190, 190, 190]), (u'projectCode_2630', [5, 191, 191, 191, 191, 191]), (u'projectCode_2635', [5, 192, 192, 192, 192, 192]), (u'projectCode_2694', [5, 193, 193, 193, 193, 193]), (u'projectCode_2696', [5, 194, 194, 194, 194, 194]), (u'projectCode_2745', [5, 195, 195, 195, 195, 195]), (u'projectCode_2756', [5, 196, 196, 196, 196, 196]), (u'projectCode_2759', [5, 197, 197, 197, 197, 197]), (u'projectCode_2766', [5, 198, 198, 198, 198, 198]), (u'projectCode_2767', [5, 199, 199, 199, 199, 199]), (u'projectCode_2770', [5, 200, 200, 200, 200, 200]), (u'projectCode_2784', [5, 201, 201, 201, 201, 201]), (u'projectCode_2866', [5, 202, 202, 202, 202, 202]), (u'projectCode_2877', [5, 203, 203, 203, 203, 203]), (u'projectCode_2914', [5, 204, 204, 204, 204, 204]), (u'projectCode_2923', [5, 205, 205, 205, 205, 205]), (u'projectCode_2932', [5, 206, 206, 206, 206, 206]), (u'projectCode_2945', [5, 207, 207, 207, 207, 207]), (u'projectCode_3010', [5, 208, 208, 208, 208, 208]), (u'projectCode_3064', [5, 209, 209, 209, 209, 209]), (u'projectCode_3077', [5, 210, 210, 210, 210, 210]), (u'projectCode_3080', [5, 211, 211, 211, 211, 211]), (u'projectCode_3082', [5, 212, 212, 212, 212, 212]), (u'projectCode_3104', [5, 213, 213, 213, 213, 213]), (u'projectCode_3105', [5, 214, 214, 214, 214, 214]), (u'projectCode_3135', [5, 215, 215, 215, 215, 215]), (u'projectCode_3145', [5, 216, 216, 216, 216, 216]), (u'projectCode_3181', [5, 217, 217, 217, 217, 217]), (u'projectCode_3193', [5, 218, 218, 218, 218, 218]), (u'projectCode_3211', [5, 219, 219, 219, 219, 219]), (u'projectCode_3262', [5, 220, 220, 220, 220, 220]), (u'projectCode_3279', [5, 221, 221, 221, 221, 221]), (u'projectCode_3291', [5, 222, 222, 222, 222, 222]), (u'projectCode_3313', [5, 223, 223, 223, 223, 223]), (u'projectCode_3417', [5, 224, 224, 224, 224, 224]), (u'projectCode_3430', [5, 225, 225, 225, 225, 225]), (u'projectCode_3432', [5, 226, 226, 226, 226, 226]), (u'projectCode_3444', [5, 227, 227, 227, 227, 227]), (u'projectCode_3450', [5, 228, 228, 228, 228, 228]), (u'projectCode_3454', [5, 229, 229, 229, 229, 229]), (u'projectCode_3461', [5, 230, 230, 230, 230, 230]), (u'projectCode_3462', [5, 231, 231, 231, 231, 231]), (u'projectCode_3466', [5, 232, 232, 232, 232, 232]), (u'projectCode_3507', [5, 233, 233, 233, 233, 233]), (u'projectCode_3514', [5, 234, 234, 234, 234, 234]), (u'projectCode_3565', [5, 235, 235, 235, 235, 235]), (u'projectCode_3566', [5, 236, 236, 236, 236, 236]), (u'projectCode_3571', [5, 237, 237, 237, 237, 237]), (u'projectCode_3640', [5, 238, 238, 238, 238, 238]), (u'projectCode_3776', [5, 239, 239, 239, 239, 239]), (u'projectCode_3911', [5, 240, 240, 240, 240, 240]), (u'projectCode_3957', [5, 241, 241, 241, 241, 241]), (u'projectCode_3988', [5, 242, 242, 242, 242, 242]), (u'projectCode_4077', [5, 243, 243, 243, 243, 243]), (u'projectCode_4086', [5, 244, 244, 244, 244, 244]), (u'projectCode_4106', [5, 245, 245, 245, 245, 245]), (u'projectCode_4108', [5, 246, 246, 246, 246, 246]), (u'projectCode_4115', [5, 247, 247, 247, 247, 247]), (u'projectCode_4116', [5, 248, 248, 248, 248, 248]), (u'projectCode_4120', [5, 249, 249, 249, 249, 249]), (u'projectCode_4121', [5, 250, 250, 250, 250, 250]), (u'projectCode_4124', [5, 251, 251, 251, 251, 251]), (u'projectCode_4145', [5, 252, 252, 252, 252, 252]), (u'projectCode_4149', [5, 253, 253, 253, 253, 253]), (u'projectCode_4203', [5, 254, 254, 254, 254, 254]), (u'projectCode_4214', [5, 255, 255, 255, 255, 255]), (u'projectCode_4239', [5, 256, 256, 256, 256, 256]), (u'projectCode_4272', [5, 257, 257, 257, 257, 257]), (u'projectCode_4302', [5, 258, 258, 258, 258, 258]), (u'projectCode_4303', [5, 259, 259, 259, 259, 259]), (u'projectCode_4304', [5, 260, 260, 260, 260, 260]), (u'projectCode_4316', [5, 261, 261, 261, 261, 261]), (u'projectCode_4332', [5, 262, 262, 262, 262, 262]), (u'sector_Agriculture and Food Security', [5, 263, 263, 263, 263, 263]), (u'sector_Economic Development', [5, 264, 264, 264, 264, 264]), (u'sector_Education and Training', [5, 265, 265, 265, 265, 265]), (u'sector_Emergency Response', [5, 266, 266, 266, 266, 266]), (u'sector_Financial Services for the Poor', [5, 267, 267, 267, 267, 267]), (u"sector_Gender Equality and Women's Empowerment", [5, 268, 268, 268, 268, 268]), (u'sector_Health', [5, 269, 269, 269, 269, 269]), (u'sector_No info', [5, 270, 270, 270, 270, 270]), (u'sector_Other', [5, 271, 271, 271, 271, 271]), (u'sector_Water, Sanitation, & Hygiene', [5, 272, 272, 272, 272, 272])]), None), ([0.59144551011811808, 0.60879895831550157, 0.801336834978207, 0.770024718483933, 0.8326489514724809, 0.16735104852751911, 0.22997528151606703, 0.6368250480637189, 0.6468715774598127, 0.08256441315264845, 0.11316121944520736, 0.11316121944520736, 30.146836219467986, 0.018000720832903397], 'Random forest', None, OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'X2', [5, 2, 2, 2, 2, 2]), (u'X3', [5, 3, 3, 3, 3, 3]), (u'X4', [5, 4, 4, 4, 4, 4]), (u'X5', [5, 5, 5, 5, 5, 5]), (u'X6', [5, 6, 6, 6, 6, 6]), (u'X7', [5, 7, 7, 7, 7, 7]), (u'X8', [5, 8, 8, 8, 8, 8]), (u'X9', [5, 9, 9, 9, 9, 9]), (u'X10', [5, 10, 10, 10, 10, 10]), (u'X11', [5, 11, 11, 11, 11, 11]), (u'X12', [5, 12, 12, 12, 12, 12]), (u'X13', [5, 13, 13, 13, 13, 13]), (u'X14', [5, 14, 14, 14, 14, 14]), (u'X15', [5, 15, 15, 15, 15, 15]), (u'X16', [5, 16, 16, 16, 16, 16]), (u'X17', [5, 17, 17, 17, 17, 17]), (u'X18', [5, 18, 18, 18, 18, 18]), (u'X19', [5, 19, 19, 19, 19, 19]), (u'X20', [5, 20, 20, 20, 20, 20]), (u'X21', [5, 21, 21, 21, 21, 21]), (u'X22', [5, 22, 22, 22, 22, 22]), (u'X23', [5, 23, 23, 23, 23, 23]), (u'X24', [5, 24, 24, 24, 24, 24]), (u'X25', [5, 25, 25, 25, 25, 25]), (u'X26', [5, 26, 26, 26, 26, 26]), (u'X27', [5, 27, 27, 27, 27, 27]), (u'X28', [5, 28, 28, 28, 28, 28]), (u'X29', [5, 29, 29, 29, 29, 29]), (u'X30', [5, 30, 30, 30, 30, 30]), (u'X31', [5, 31, 31, 31, 31, 31]), (u'X32', [5, 32, 32, 32, 32, 32]), (u'X33', [5, 33, 33, 33, 33, 33]), (u'X34', [5, 34, 34, 34, 34, 34]), (u'X35', [5, 35, 35, 35, 35, 35]), (u'X36', [5, 36, 36, 36, 36, 36]), (u'X37', [5, 37, 37, 37, 37, 37]), (u'X38', [5, 38, 38, 38, 38, 38]), (u'X39', [5, 39, 39, 39, 39, 39]), (u'X40', [5, 40, 40, 40, 40, 40]), (u'X41', [5, 41, 41, 41, 41, 41]), (u'X42', [5, 42, 42, 42, 42, 42]), (u'X43', [5, 43, 43, 43, 43, 43]), (u'X44', [5, 44, 44, 44, 44, 44]), (u'X45', [5, 45, 45, 45, 45, 45]), (u'X46', [5, 46, 46, 46, 46, 46]), (u'X47', [5, 47, 47, 47, 47, 47]), (u'X48', [5, 48, 48, 48, 48, 48]), (u'X49', [5, 49, 49, 49, 49, 49]), (u'X50', [5, 50, 50, 50, 50, 50]), (u'X51', [5, 51, 51, 51, 51, 51]), (u'X52', [5, 52, 52, 52, 52, 52]), (u'X53', [5, 53, 53, 53, 53, 53]), (u'X54', [5, 54, 54, 54, 54, 54]), (u'X55', [5, 55, 55, 55, 55, 55]), (u'X56', [5, 56, 56, 56, 56, 56]), (u'X57', [5, 57, 57, 57, 57, 57]), (u'X58', [5, 58, 58, 58, 58, 58]), (u'X59', [5, 59, 59, 59, 59, 59]), (u'X60', [5, 60, 60, 60, 60, 60]), (u'X61', [5, 61, 61, 61, 61, 61]), (u'X62', [5, 62, 62, 62, 62, 62]), (u'X63', [5, 63, 63, 63, 63, 63]), (u'X64', [5, 64, 64, 64, 64, 64]), (u'X65', [5, 65, 65, 65, 65, 65]), (u'X66', [5, 66, 66, 66, 66, 66]), (u'X67', [5, 67, 67, 67, 67, 67]), (u'X68', [5, 68, 68, 68, 68, 68]), (u'X69', [5, 69, 69, 69, 69, 69]), (u'X70', [5, 70, 70, 70, 70, 70]), (u'X71', [5, 71, 71, 71, 71, 71]), (u'X72', [5, 72, 72, 72, 72, 72]), (u'X73', [5, 73, 73, 73, 73, 73]), (u'X74', [5, 74, 74, 74, 74, 74]), (u'X75', [5, 75, 75, 75, 75, 75]), (u'X76', [5, 76, 76, 76, 76, 76]), (u'X77', [5, 77, 77, 77, 77, 77]), (u'X78', [5, 78, 78, 78, 78, 78]), (u'X79', [5, 79, 79, 79, 79, 79]), (u'X80', [5, 80, 80, 80, 80, 80]), (u'X81', [5, 81, 81, 81, 81, 81]), (u'X82', [5, 82, 82, 82, 82, 82]), (u'X83', [5, 83, 83, 83, 83, 83]), (u'X84', [5, 84, 84, 84, 84, 84]), (u'X85', [5, 85, 85, 85, 85, 85]), (u'X86', [5, 86, 86, 86, 86, 86]), (u'X87', [5, 87, 87, 87, 87, 87]), (u'X88', [5, 88, 88, 88, 88, 88]), (u'X89', [5, 89, 89, 89, 89, 89]), (u'X90', [5, 90, 90, 90, 90, 90]), (u'projectCode_13', [5, 91, 91, 91, 91, 91]), (u'projectCode_25', [5, 92, 92, 92, 92, 92]), (u'projectCode_27', [5, 93, 93, 93, 93, 93]), (u'projectCode_29', [5, 94, 94, 94, 94, 94]), (u'projectCode_31', [5, 95, 95, 95, 95, 95]), (u'projectCode_40', [5, 96, 96, 96, 96, 96]), (u'projectCode_58', [5, 97, 97, 97, 97, 97]), (u'projectCode_97', [5, 98, 98, 98, 98, 98]), (u'projectCode_99', [5, 99, 99, 99, 99, 99]), (u'projectCode_161', [5, 100, 100, 100, 100, 100]), (u'projectCode_213', [5, 101, 101, 101, 101, 101]), (u'projectCode_221', [5, 102, 102, 102, 102, 102]), (u'projectCode_249', [5, 103, 103, 103, 103, 103]), (u'projectCode_258', [5, 104, 104, 104, 104, 104]), (u'projectCode_300', [5, 105, 105, 105, 105, 105]), (u'projectCode_320', [5, 106, 106, 106, 106, 106]), (u'projectCode_321', [5, 107, 107, 107, 107, 107]), (u'projectCode_363', [5, 108, 108, 108, 108, 108]), (u'projectCode_371', [5, 109, 109, 109, 109, 109]), (u'projectCode_421', [5, 110, 110, 110, 110, 110]), (u'projectCode_422', [5, 111, 111, 111, 111, 111]), (u'projectCode_473', [5, 112, 112, 112, 112, 112]), (u'projectCode_516', [5, 113, 113, 113, 113, 113]), (u'projectCode_517', [5, 114, 114, 114, 114, 114]), (u'projectCode_541', [5, 115, 115, 115, 115, 115]), (u'projectCode_549', [5, 116, 116, 116, 116, 116]), (u'projectCode_571', [5, 117, 117, 117, 117, 117]), (u'projectCode_609', [5, 118, 118, 118, 118, 118]), (u'projectCode_614', [5, 119, 119, 119, 119, 119]), (u'projectCode_710', [5, 120, 120, 120, 120, 120]), (u'projectCode_723', [5, 121, 121, 121, 121, 121]), (u'projectCode_727', [5, 122, 122, 122, 122, 122]), (u'projectCode_732', [5, 123, 123, 123, 123, 123]), (u'projectCode_735', [5, 124, 124, 124, 124, 124]), (u'projectCode_737', [5, 125, 125, 125, 125, 125]), (u'projectCode_743', [5, 126, 126, 126, 126, 126]), (u'projectCode_748', [5, 127, 127, 127, 127, 127]), (u'projectCode_959', [5, 128, 128, 128, 128, 128]), (u'projectCode_967', [5, 129, 129, 129, 129, 129]), (u'projectCode_1014', [5, 130, 130, 130, 130, 130]), (u'projectCode_1037', [5, 131, 131, 131, 131, 131]), (u'projectCode_1039', [5, 132, 132, 132, 132, 132]), (u'projectCode_1049', [5, 133, 133, 133, 133, 133]), (u'projectCode_1123', [5, 134, 134, 134, 134, 134]), (u'projectCode_1210', [5, 135, 135, 135, 135, 135]), (u'projectCode_1217', [5, 136, 136, 136, 136, 136]), (u'projectCode_1271', [5, 137, 137, 137, 137, 137]), (u'projectCode_1336', [5, 138, 138, 138, 138, 138]), (u'projectCode_1365', [5, 139, 139, 139, 139, 139]), (u'projectCode_1388', [5, 140, 140, 140, 140, 140]), (u'projectCode_1456', [5, 141, 141, 141, 141, 141]), (u'projectCode_1484', [5, 142, 142, 142, 142, 142]), (u'projectCode_1515', [5, 143, 143, 143, 143, 143]), (u'projectCode_1534', [5, 144, 144, 144, 144, 144]), (u'projectCode_1539', [5, 145, 145, 145, 145, 145]), (u'projectCode_1552', [5, 146, 146, 146, 146, 146]), (u'projectCode_1553', [5, 147, 147, 147, 147, 147]), (u'projectCode_1555', [5, 148, 148, 148, 148, 148]), (u'projectCode_1556', [5, 149, 149, 149, 149, 149]), (u'projectCode_1559', [5, 150, 150, 150, 150, 150]), (u'projectCode_1594', [5, 151, 151, 151, 151, 151]), (u'projectCode_1606', [5, 152, 152, 152, 152, 152]), (u'projectCode_1614', [5, 153, 153, 153, 153, 153]), (u'projectCode_1615', [5, 154, 154, 154, 154, 154]), (u'projectCode_1616', [5, 155, 155, 155, 155, 155]), (u'projectCode_1627', [5, 156, 156, 156, 156, 156]), (u'projectCode_1628', [5, 157, 157, 157, 157, 157]), (u'projectCode_1631', [5, 158, 158, 158, 158, 158]), (u'projectCode_1638', [5, 159, 159, 159, 159, 159]), (u'projectCode_1643', [5, 160, 160, 160, 160, 160]), (u'projectCode_1644', [5, 161, 161, 161, 161, 161]), (u'projectCode_1648', [5, 162, 162, 162, 162, 162]), (u'projectCode_1658', [5, 163, 163, 163, 163, 163]), (u'projectCode_1674', [5, 164, 164, 164, 164, 164]), (u'projectCode_1779', [5, 165, 165, 165, 165, 165]), (u'projectCode_1794', [5, 166, 166, 166, 166, 166]), (u'projectCode_1833', [5, 167, 167, 167, 167, 167]), (u'projectCode_1836', [5, 168, 168, 168, 168, 168]), (u'projectCode_1866', [5, 169, 169, 169, 169, 169]), (u'projectCode_1878', [5, 170, 170, 170, 170, 170]), (u'projectCode_1954', [5, 171, 171, 171, 171, 171]), (u'projectCode_2058', [5, 172, 172, 172, 172, 172]), (u'projectCode_2093', [5, 173, 173, 173, 173, 173]), (u'projectCode_2112', [5, 174, 174, 174, 174, 174]), (u'projectCode_2175', [5, 175, 175, 175, 175, 175]), (u'projectCode_2180', [5, 176, 176, 176, 176, 176]), (u'projectCode_2242', [5, 177, 177, 177, 177, 177]), (u'projectCode_2243', [5, 178, 178, 178, 178, 178]), (u'projectCode_2244', [5, 179, 179, 179, 179, 179]), (u'projectCode_2264', [5, 180, 180, 180, 180, 180]), (u'projectCode_2268', [5, 181, 181, 181, 181, 181]), (u'projectCode_2273', [5, 182, 182, 182, 182, 182]), (u'projectCode_2335', [5, 183, 183, 183, 183, 183]), (u'projectCode_2348', [5, 184, 184, 184, 184, 184]), (u'projectCode_2370', [5, 185, 185, 185, 185, 185]), (u'projectCode_2376', [5, 186, 186, 186, 186, 186]), (u'projectCode_2406', [5, 187, 187, 187, 187, 187]), (u'projectCode_2508', [5, 188, 188, 188, 188, 188]), (u'projectCode_2562', [5, 189, 189, 189, 189, 189]), (u'projectCode_2620', [5, 190, 190, 190, 190, 190]), (u'projectCode_2630', [5, 191, 191, 191, 191, 191]), (u'projectCode_2635', [5, 192, 192, 192, 192, 192]), (u'projectCode_2694', [5, 193, 193, 193, 193, 193]), (u'projectCode_2696', [5, 194, 194, 194, 194, 194]), (u'projectCode_2745', [5, 195, 195, 195, 195, 195]), (u'projectCode_2756', [5, 196, 196, 196, 196, 196]), (u'projectCode_2759', [5, 197, 197, 197, 197, 197]), (u'projectCode_2766', [5, 198, 198, 198, 198, 198]), (u'projectCode_2767', [5, 199, 199, 199, 199, 199]), (u'projectCode_2770', [5, 200, 200, 200, 200, 200]), (u'projectCode_2784', [5, 201, 201, 201, 201, 201]), (u'projectCode_2866', [5, 202, 202, 202, 202, 202]), (u'projectCode_2877', [5, 203, 203, 203, 203, 203]), (u'projectCode_2914', [5, 204, 204, 204, 204, 204]), (u'projectCode_2923', [5, 205, 205, 205, 205, 205]), (u'projectCode_2932', [5, 206, 206, 206, 206, 206]), (u'projectCode_2945', [5, 207, 207, 207, 207, 207]), (u'projectCode_3010', [5, 208, 208, 208, 208, 208]), (u'projectCode_3064', [5, 209, 209, 209, 209, 209]), (u'projectCode_3077', [5, 210, 210, 210, 210, 210]), (u'projectCode_3080', [5, 211, 211, 211, 211, 211]), (u'projectCode_3082', [5, 212, 212, 212, 212, 212]), (u'projectCode_3104', [5, 213, 213, 213, 213, 213]), (u'projectCode_3105', [5, 214, 214, 214, 214, 214]), (u'projectCode_3135', [5, 215, 215, 215, 215, 215]), (u'projectCode_3145', [5, 216, 216, 216, 216, 216]), (u'projectCode_3181', [5, 217, 217, 217, 217, 217]), (u'projectCode_3193', [5, 218, 218, 218, 218, 218]), (u'projectCode_3211', [5, 219, 219, 219, 219, 219]), (u'projectCode_3262', [5, 220, 220, 220, 220, 220]), (u'projectCode_3279', [5, 221, 221, 221, 221, 221]), (u'projectCode_3291', [5, 222, 222, 222, 222, 222]), (u'projectCode_3313', [5, 223, 223, 223, 223, 223]), (u'projectCode_3417', [5, 224, 224, 224, 224, 224]), (u'projectCode_3430', [5, 225, 225, 225, 225, 225]), (u'projectCode_3432', [5, 226, 226, 226, 226, 226]), (u'projectCode_3444', [5, 227, 227, 227, 227, 227]), (u'projectCode_3450', [5, 228, 228, 228, 228, 228]), (u'projectCode_3454', [5, 229, 229, 229, 229, 229]), (u'projectCode_3461', [5, 230, 230, 230, 230, 230]), (u'projectCode_3462', [5, 231, 231, 231, 231, 231]), (u'projectCode_3466', [5, 232, 232, 232, 232, 232]), (u'projectCode_3507', [5, 233, 233, 233, 233, 233]), (u'projectCode_3514', [5, 234, 234, 234, 234, 234]), (u'projectCode_3565', [5, 235, 235, 235, 235, 235]), (u'projectCode_3566', [5, 236, 236, 236, 236, 236]), (u'projectCode_3571', [5, 237, 237, 237, 237, 237]), (u'projectCode_3640', [5, 238, 238, 238, 238, 238]), (u'projectCode_3776', [5, 239, 239, 239, 239, 239]), (u'projectCode_3911', [5, 240, 240, 240, 240, 240]), (u'projectCode_3957', [5, 241, 241, 241, 241, 241]), (u'projectCode_3988', [5, 242, 242, 242, 242, 242]), (u'projectCode_4077', [5, 243, 243, 243, 243, 243]), (u'projectCode_4086', [5, 244, 244, 244, 244, 244]), (u'projectCode_4106', [5, 245, 245, 245, 245, 245]), (u'projectCode_4108', [5, 246, 246, 246, 246, 246]), (u'projectCode_4115', [5, 247, 247, 247, 247, 247]), (u'projectCode_4116', [5, 248, 248, 248, 248, 248]), (u'projectCode_4120', [5, 249, 249, 249, 249, 249]), (u'projectCode_4121', [5, 250, 250, 250, 250, 250]), (u'projectCode_4124', [5, 251, 251, 251, 251, 251]), (u'projectCode_4145', [5, 252, 252, 252, 252, 252]), (u'projectCode_4149', [5, 253, 253, 253, 253, 253]), (u'projectCode_4203', [5, 254, 254, 254, 254, 254]), (u'projectCode_4214', [5, 255, 255, 255, 255, 255]), (u'projectCode_4239', [5, 256, 256, 256, 256, 256]), (u'projectCode_4272', [5, 257, 257, 257, 257, 257]), (u'projectCode_4302', [5, 258, 258, 258, 258, 258]), (u'projectCode_4303', [5, 259, 259, 259, 259, 259]), (u'projectCode_4304', [5, 260, 260, 260, 260, 260]), (u'projectCode_4316', [5, 261, 261, 261, 261, 261]), (u'projectCode_4332', [5, 262, 262, 262, 262, 262]), (u'sector_Agriculture and Food Security', [5, 263, 263, 263, 263, 263]), (u'sector_Economic Development', [5, 264, 264, 264, 264, 264]), (u'sector_Education and Training', [5, 265, 265, 265, 265, 265]), (u'sector_Emergency Response', [5, 266, 266, 266, 266, 266]), (u'sector_Financial Services for the Poor', [5, 267, 267, 267, 267, 267]), (u"sector_Gender Equality and Women's Empowerment", [5, 268, 268, 268, 268, 268]), (u'sector_Health', [5, 269, 269, 269, 269, 269]), (u'sector_No info', [5, 270, 270, 270, 270, 270]), (u'sector_Other', [5, 271, 271, 271, 271, 271]), (u'sector_Water, Sanitation, & Hygiene', [5, 272, 272, 272, 272, 272])]), None), ([0.47658018855141238, 0.48853466763379516, 0.7503083859294983, 0.797215050810217, 0.7034017210487798, 0.29659827895122015, 0.20278494918978301, 0.6180756202508468, 0.5487521134579958, 0.1562323668206021, 0.11559827886111876, 0.11559827886111876, 109.47554314441018, 0.003823966591120564], 'SVM (RDF)', None, OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'X2', [5, 2, 2, 2, 2, 2]), (u'X3', [5, 3, 3, 3, 3, 3]), (u'X4', [5, 4, 4, 4, 4, 4]), (u'X5', [5, 5, 5, 5, 5, 5]), (u'X6', [5, 6, 6, 6, 6, 6]), (u'X7', [5, 7, 7, 7, 7, 7]), (u'X8', [5, 8, 8, 8, 8, 8]), (u'X9', [5, 9, 9, 9, 9, 9]), (u'X10', [5, 10, 10, 10, 10, 10]), (u'X11', [5, 11, 11, 11, 11, 11]), (u'X12', [5, 12, 12, 12, 12, 12]), (u'X13', [5, 13, 13, 13, 13, 13]), (u'X14', [5, 14, 14, 14, 14, 14]), (u'X15', [5, 15, 15, 15, 15, 15]), (u'X16', [5, 16, 16, 16, 16, 16]), (u'X17', [5, 17, 17, 17, 17, 17]), (u'X18', [5, 18, 18, 18, 18, 18]), (u'X19', [5, 19, 19, 19, 19, 19]), (u'X20', [5, 20, 20, 20, 20, 20]), (u'X21', [5, 21, 21, 21, 21, 21]), (u'X22', [5, 22, 22, 22, 22, 22]), (u'X23', [5, 23, 23, 23, 23, 23]), (u'X24', [5, 24, 24, 24, 24, 24]), (u'X25', [5, 25, 25, 25, 25, 25]), (u'X26', [5, 26, 26, 26, 26, 26]), (u'X27', [5, 27, 27, 27, 27, 27]), (u'X28', [5, 28, 28, 28, 28, 28]), (u'X29', [5, 29, 29, 29, 29, 29]), (u'X30', [5, 30, 30, 30, 30, 30]), (u'X31', [5, 31, 31, 31, 31, 31]), (u'X32', [5, 32, 32, 32, 32, 32]), (u'X33', [5, 33, 33, 33, 33, 33]), (u'X34', [5, 34, 34, 34, 34, 34]), (u'X35', [5, 35, 35, 35, 35, 35]), (u'X36', [5, 36, 36, 36, 36, 36]), (u'X37', [5, 37, 37, 37, 37, 37]), (u'X38', [5, 38, 38, 38, 38, 38]), (u'X39', [5, 39, 39, 39, 39, 39]), (u'X40', [5, 40, 40, 40, 40, 40]), (u'X41', [5, 41, 41, 41, 41, 41]), (u'X42', [5, 42, 42, 42, 42, 42]), (u'X43', [5, 43, 43, 43, 43, 43]), (u'X44', [5, 44, 44, 44, 44, 44]), (u'X45', [5, 45, 45, 45, 45, 45]), (u'X46', [5, 46, 46, 46, 46, 46]), (u'X47', [5, 47, 47, 47, 47, 47]), (u'X48', [5, 48, 48, 48, 48, 48]), (u'X49', [5, 49, 49, 49, 49, 49]), (u'X50', [5, 50, 50, 50, 50, 50]), (u'X51', [5, 51, 51, 51, 51, 51]), (u'X52', [5, 52, 52, 52, 52, 52]), (u'X53', [5, 53, 53, 53, 53, 53]), (u'X54', [5, 54, 54, 54, 54, 54]), (u'X55', [5, 55, 55, 55, 55, 55]), (u'X56', [5, 56, 56, 56, 56, 56]), (u'X57', [5, 57, 57, 57, 57, 57]), (u'X58', [5, 58, 58, 58, 58, 58]), (u'X59', [5, 59, 59, 59, 59, 59]), (u'X60', [5, 60, 60, 60, 60, 60]), (u'X61', [5, 61, 61, 61, 61, 61]), (u'X62', [5, 62, 62, 62, 62, 62]), (u'X63', [5, 63, 63, 63, 63, 63]), (u'X64', [5, 64, 64, 64, 64, 64]), (u'X65', [5, 65, 65, 65, 65, 65]), (u'X66', [5, 66, 66, 66, 66, 66]), (u'X67', [5, 67, 67, 67, 67, 67]), (u'X68', [5, 68, 68, 68, 68, 68]), (u'X69', [5, 69, 69, 69, 69, 69]), (u'X70', [5, 70, 70, 70, 70, 70]), (u'X71', [5, 71, 71, 71, 71, 71]), (u'X72', [5, 72, 72, 72, 72, 72]), (u'X73', [5, 73, 73, 73, 73, 73]), (u'X74', [5, 74, 74, 74, 74, 74]), (u'X75', [5, 75, 75, 75, 75, 75]), (u'X76', [5, 76, 76, 76, 76, 76]), (u'X77', [5, 77, 77, 77, 77, 77]), (u'X78', [5, 78, 78, 78, 78, 78]), (u'X79', [5, 79, 79, 79, 79, 79]), (u'X80', [5, 80, 80, 80, 80, 80]), (u'X81', [5, 81, 81, 81, 81, 81]), (u'X82', [5, 82, 82, 82, 82, 82]), (u'X83', [5, 83, 83, 83, 83, 83]), (u'X84', [5, 84, 84, 84, 84, 84]), (u'X85', [5, 85, 85, 85, 85, 85]), (u'X86', [5, 86, 86, 86, 86, 86]), (u'X87', [5, 87, 87, 87, 87, 87]), (u'X88', [5, 88, 88, 88, 88, 88]), (u'X89', [5, 89, 89, 89, 89, 89]), (u'X90', [5, 90, 90, 90, 90, 90]), (u'projectCode_13', [5, 91, 91, 91, 91, 91]), (u'projectCode_25', [5, 92, 92, 92, 92, 92]), (u'projectCode_27', [5, 93, 93, 93, 93, 93]), (u'projectCode_29', [5, 94, 94, 94, 94, 94]), (u'projectCode_31', [5, 95, 95, 95, 95, 95]), (u'projectCode_40', [5, 96, 96, 96, 96, 96]), (u'projectCode_58', [5, 97, 97, 97, 97, 97]), (u'projectCode_97', [5, 98, 98, 98, 98, 98]), (u'projectCode_99', [5, 99, 99, 99, 99, 99]), (u'projectCode_161', [5, 100, 100, 100, 100, 100]), (u'projectCode_213', [5, 101, 101, 101, 101, 101]), (u'projectCode_221', [5, 102, 102, 102, 102, 102]), (u'projectCode_249', [5, 103, 103, 103, 103, 103]), (u'projectCode_258', [5, 104, 104, 104, 104, 104]), (u'projectCode_300', [5, 105, 105, 105, 105, 105]), (u'projectCode_320', [5, 106, 106, 106, 106, 106]), (u'projectCode_321', [5, 107, 107, 107, 107, 107]), (u'projectCode_363', [5, 108, 108, 108, 108, 108]), (u'projectCode_371', [5, 109, 109, 109, 109, 109]), (u'projectCode_421', [5, 110, 110, 110, 110, 110]), (u'projectCode_422', [5, 111, 111, 111, 111, 111]), (u'projectCode_473', [5, 112, 112, 112, 112, 112]), (u'projectCode_516', [5, 113, 113, 113, 113, 113]), (u'projectCode_517', [5, 114, 114, 114, 114, 114]), (u'projectCode_541', [5, 115, 115, 115, 115, 115]), (u'projectCode_549', [5, 116, 116, 116, 116, 116]), (u'projectCode_571', [5, 117, 117, 117, 117, 117]), (u'projectCode_609', [5, 118, 118, 118, 118, 118]), (u'projectCode_614', [5, 119, 119, 119, 119, 119]), (u'projectCode_710', [5, 120, 120, 120, 120, 120]), (u'projectCode_723', [5, 121, 121, 121, 121, 121]), (u'projectCode_727', [5, 122, 122, 122, 122, 122]), (u'projectCode_732', [5, 123, 123, 123, 123, 123]), (u'projectCode_735', [5, 124, 124, 124, 124, 124]), (u'projectCode_737', [5, 125, 125, 125, 125, 125]), (u'projectCode_743', [5, 126, 126, 126, 126, 126]), (u'projectCode_748', [5, 127, 127, 127, 127, 127]), (u'projectCode_959', [5, 128, 128, 128, 128, 128]), (u'projectCode_967', [5, 129, 129, 129, 129, 129]), (u'projectCode_1014', [5, 130, 130, 130, 130, 130]), (u'projectCode_1037', [5, 131, 131, 131, 131, 131]), (u'projectCode_1039', [5, 132, 132, 132, 132, 132]), (u'projectCode_1049', [5, 133, 133, 133, 133, 133]), (u'projectCode_1123', [5, 134, 134, 134, 134, 134]), (u'projectCode_1210', [5, 135, 135, 135, 135, 135]), (u'projectCode_1217', [5, 136, 136, 136, 136, 136]), (u'projectCode_1271', [5, 137, 137, 137, 137, 137]), (u'projectCode_1336', [5, 138, 138, 138, 138, 138]), (u'projectCode_1365', [5, 139, 139, 139, 139, 139]), (u'projectCode_1388', [5, 140, 140, 140, 140, 140]), (u'projectCode_1456', [5, 141, 141, 141, 141, 141]), (u'projectCode_1484', [5, 142, 142, 142, 142, 142]), (u'projectCode_1515', [5, 143, 143, 143, 143, 143]), (u'projectCode_1534', [5, 144, 144, 144, 144, 144]), (u'projectCode_1539', [5, 145, 145, 145, 145, 145]), (u'projectCode_1552', [5, 146, 146, 146, 146, 146]), (u'projectCode_1553', [5, 147, 147, 147, 147, 147]), (u'projectCode_1555', [5, 148, 148, 148, 148, 148]), (u'projectCode_1556', [5, 149, 149, 149, 149, 149]), (u'projectCode_1559', [5, 150, 150, 150, 150, 150]), (u'projectCode_1594', [5, 151, 151, 151, 151, 151]), (u'projectCode_1606', [5, 152, 152, 152, 152, 152]), (u'projectCode_1614', [5, 153, 153, 153, 153, 153]), (u'projectCode_1615', [5, 154, 154, 154, 154, 154]), (u'projectCode_1616', [5, 155, 155, 155, 155, 155]), (u'projectCode_1627', [5, 156, 156, 156, 156, 156]), (u'projectCode_1628', [5, 157, 157, 157, 157, 157]), (u'projectCode_1631', [5, 158, 158, 158, 158, 158]), (u'projectCode_1638', [5, 159, 159, 159, 159, 159]), (u'projectCode_1643', [5, 160, 160, 160, 160, 160]), (u'projectCode_1644', [5, 161, 161, 161, 161, 161]), (u'projectCode_1648', [5, 162, 162, 162, 162, 162]), (u'projectCode_1658', [5, 163, 163, 163, 163, 163]), (u'projectCode_1674', [5, 164, 164, 164, 164, 164]), (u'projectCode_1779', [5, 165, 165, 165, 165, 165]), (u'projectCode_1794', [5, 166, 166, 166, 166, 166]), (u'projectCode_1833', [5, 167, 167, 167, 167, 167]), (u'projectCode_1836', [5, 168, 168, 168, 168, 168]), (u'projectCode_1866', [5, 169, 169, 169, 169, 169]), (u'projectCode_1878', [5, 170, 170, 170, 170, 170]), (u'projectCode_1954', [5, 171, 171, 171, 171, 171]), (u'projectCode_2058', [5, 172, 172, 172, 172, 172]), (u'projectCode_2093', [5, 173, 173, 173, 173, 173]), (u'projectCode_2112', [5, 174, 174, 174, 174, 174]), (u'projectCode_2175', [5, 175, 175, 175, 175, 175]), (u'projectCode_2180', [5, 176, 176, 176, 176, 176]), (u'projectCode_2242', [5, 177, 177, 177, 177, 177]), (u'projectCode_2243', [5, 178, 178, 178, 178, 178]), (u'projectCode_2244', [5, 179, 179, 179, 179, 179]), (u'projectCode_2264', [5, 180, 180, 180, 180, 180]), (u'projectCode_2268', [5, 181, 181, 181, 181, 181]), (u'projectCode_2273', [5, 182, 182, 182, 182, 182]), (u'projectCode_2335', [5, 183, 183, 183, 183, 183]), (u'projectCode_2348', [5, 184, 184, 184, 184, 184]), (u'projectCode_2370', [5, 185, 185, 185, 185, 185]), (u'projectCode_2376', [5, 186, 186, 186, 186, 186]), (u'projectCode_2406', [5, 187, 187, 187, 187, 187]), (u'projectCode_2508', [5, 188, 188, 188, 188, 188]), (u'projectCode_2562', [5, 189, 189, 189, 189, 189]), (u'projectCode_2620', [5, 190, 190, 190, 190, 190]), (u'projectCode_2630', [5, 191, 191, 191, 191, 191]), (u'projectCode_2635', [5, 192, 192, 192, 192, 192]), (u'projectCode_2694', [5, 193, 193, 193, 193, 193]), (u'projectCode_2696', [5, 194, 194, 194, 194, 194]), (u'projectCode_2745', [5, 195, 195, 195, 195, 195]), (u'projectCode_2756', [5, 196, 196, 196, 196, 196]), (u'projectCode_2759', [5, 197, 197, 197, 197, 197]), (u'projectCode_2766', [5, 198, 198, 198, 198, 198]), (u'projectCode_2767', [5, 199, 199, 199, 199, 199]), (u'projectCode_2770', [5, 200, 200, 200, 200, 200]), (u'projectCode_2784', [5, 201, 201, 201, 201, 201]), (u'projectCode_2866', [5, 202, 202, 202, 202, 202]), (u'projectCode_2877', [5, 203, 203, 203, 203, 203]), (u'projectCode_2914', [5, 204, 204, 204, 204, 204]), (u'projectCode_2923', [5, 205, 205, 205, 205, 205]), (u'projectCode_2932', [5, 206, 206, 206, 206, 206]), (u'projectCode_2945', [5, 207, 207, 207, 207, 207]), (u'projectCode_3010', [5, 208, 208, 208, 208, 208]), (u'projectCode_3064', [5, 209, 209, 209, 209, 209]), (u'projectCode_3077', [5, 210, 210, 210, 210, 210]), (u'projectCode_3080', [5, 211, 211, 211, 211, 211]), (u'projectCode_3082', [5, 212, 212, 212, 212, 212]), (u'projectCode_3104', [5, 213, 213, 213, 213, 213]), (u'projectCode_3105', [5, 214, 214, 214, 214, 214]), (u'projectCode_3135', [5, 215, 215, 215, 215, 215]), (u'projectCode_3145', [5, 216, 216, 216, 216, 216]), (u'projectCode_3181', [5, 217, 217, 217, 217, 217]), (u'projectCode_3193', [5, 218, 218, 218, 218, 218]), (u'projectCode_3211', [5, 219, 219, 219, 219, 219]), (u'projectCode_3262', [5, 220, 220, 220, 220, 220]), (u'projectCode_3279', [5, 221, 221, 221, 221, 221]), (u'projectCode_3291', [5, 222, 222, 222, 222, 222]), (u'projectCode_3313', [5, 223, 223, 223, 223, 223]), (u'projectCode_3417', [5, 224, 224, 224, 224, 224]), (u'projectCode_3430', [5, 225, 225, 225, 225, 225]), (u'projectCode_3432', [5, 226, 226, 226, 226, 226]), (u'projectCode_3444', [5, 227, 227, 227, 227, 227]), (u'projectCode_3450', [5, 228, 228, 228, 228, 228]), (u'projectCode_3454', [5, 229, 229, 229, 229, 229]), (u'projectCode_3461', [5, 230, 230, 230, 230, 230]), (u'projectCode_3462', [5, 231, 231, 231, 231, 231]), (u'projectCode_3466', [5, 232, 232, 232, 232, 232]), (u'projectCode_3507', [5, 233, 233, 233, 233, 233]), (u'projectCode_3514', [5, 234, 234, 234, 234, 234]), (u'projectCode_3565', [5, 235, 235, 235, 235, 235]), (u'projectCode_3566', [5, 236, 236, 236, 236, 236]), (u'projectCode_3571', [5, 237, 237, 237, 237, 237]), (u'projectCode_3640', [5, 238, 238, 238, 238, 238]), (u'projectCode_3776', [5, 239, 239, 239, 239, 239]), (u'projectCode_3911', [5, 240, 240, 240, 240, 240]), (u'projectCode_3957', [5, 241, 241, 241, 241, 241]), (u'projectCode_3988', [5, 242, 242, 242, 242, 242]), (u'projectCode_4077', [5, 243, 243, 243, 243, 243]), (u'projectCode_4086', [5, 244, 244, 244, 244, 244]), (u'projectCode_4106', [5, 245, 245, 245, 245, 245]), (u'projectCode_4108', [5, 246, 246, 246, 246, 246]), (u'projectCode_4115', [5, 247, 247, 247, 247, 247]), (u'projectCode_4116', [5, 248, 248, 248, 248, 248]), (u'projectCode_4120', [5, 249, 249, 249, 249, 249]), (u'projectCode_4121', [5, 250, 250, 250, 250, 250]), (u'projectCode_4124', [5, 251, 251, 251, 251, 251]), (u'projectCode_4145', [5, 252, 252, 252, 252, 252]), (u'projectCode_4149', [5, 253, 253, 253, 253, 253]), (u'projectCode_4203', [5, 254, 254, 254, 254, 254]), (u'projectCode_4214', [5, 255, 255, 255, 255, 255]), (u'projectCode_4239', [5, 256, 256, 256, 256, 256]), (u'projectCode_4272', [5, 257, 257, 257, 257, 257]), (u'projectCode_4302', [5, 258, 258, 258, 258, 258]), (u'projectCode_4303', [5, 259, 259, 259, 259, 259]), (u'projectCode_4304', [5, 260, 260, 260, 260, 260]), (u'projectCode_4316', [5, 261, 261, 261, 261, 261]), (u'projectCode_4332', [5, 262, 262, 262, 262, 262]), (u'sector_Agriculture and Food Security', [5, 263, 263, 263, 263, 263]), (u'sector_Economic Development', [5, 264, 264, 264, 264, 264]), (u'sector_Education and Training', [5, 265, 265, 265, 265, 265]), (u'sector_Emergency Response', [5, 266, 266, 266, 266, 266]), (u'sector_Financial Services for the Poor', [5, 267, 267, 267, 267, 267]), (u"sector_Gender Equality and Women's Empowerment", [5, 268, 268, 268, 268, 268]), (u'sector_Health', [5, 269, 269, 269, 269, 269]), (u'sector_No info', [5, 270, 270, 270, 270, 270]), (u'sector_Other', [5, 271, 271, 271, 271, 271]), (u'sector_Water, Sanitation, & Hygiene', [5, 272, 272, 272, 272, 272])]), None), ([0.52156544557080609, 0.50668614374489551, 0.7717115313703193, 0.7857255332784033, 0.7576975294622353, 0.24230247053776469, 0.2142744667215966, 0.6828746681314658, 0.5925969667146138, 0.1384702349408232, 0.11804083127345968, 0.11804083127345968, 329.6476622596099, 0.011402710152278775], 'SVM (linear)', None, OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'X2', [5, 2, 2, 2, 2, 2]), (u'X3', [5, 3, 3, 3, 3, 3]), (u'X4', [5, 4, 4, 4, 4, 4]), (u'X5', [5, 5, 5, 5, 5, 5]), (u'X6', [5, 6, 6, 6, 6, 6]), (u'X7', [5, 7, 7, 7, 7, 7]), (u'X8', [5, 8, 8, 8, 8, 8]), (u'X9', [5, 9, 9, 9, 9, 9]), (u'X10', [5, 10, 10, 10, 10, 10]), (u'X11', [5, 11, 11, 11, 11, 11]), (u'X12', [5, 12, 12, 12, 12, 12]), (u'X13', [5, 13, 13, 13, 13, 13]), (u'X14', [5, 14, 14, 14, 14, 14]), (u'X15', [5, 15, 15, 15, 15, 15]), (u'X16', [5, 16, 16, 16, 16, 16]), (u'X17', [5, 17, 17, 17, 17, 17]), (u'X18', [5, 18, 18, 18, 18, 18]), (u'X19', [5, 19, 19, 19, 19, 19]), (u'X20', [5, 20, 20, 20, 20, 20]), (u'X21', [5, 21, 21, 21, 21, 21]), (u'X22', [5, 22, 22, 22, 22, 22]), (u'X23', [5, 23, 23, 23, 23, 23]), (u'X24', [5, 24, 24, 24, 24, 24]), (u'X25', [5, 25, 25, 25, 25, 25]), (u'X26', [5, 26, 26, 26, 26, 26]), (u'X27', [5, 27, 27, 27, 27, 27]), (u'X28', [5, 28, 28, 28, 28, 28]), (u'X29', [5, 29, 29, 29, 29, 29]), (u'X30', [5, 30, 30, 30, 30, 30]), (u'X31', [5, 31, 31, 31, 31, 31]), (u'X32', [5, 32, 32, 32, 32, 32]), (u'X33', [5, 33, 33, 33, 33, 33]), (u'X34', [5, 34, 34, 34, 34, 34]), (u'X35', [5, 35, 35, 35, 35, 35]), (u'X36', [5, 36, 36, 36, 36, 36]), (u'X37', [5, 37, 37, 37, 37, 37]), (u'X38', [5, 38, 38, 38, 38, 38]), (u'X39', [5, 39, 39, 39, 39, 39]), (u'X40', [5, 40, 40, 40, 40, 40]), (u'X41', [5, 41, 41, 41, 41, 41]), (u'X42', [5, 42, 42, 42, 42, 42]), (u'X43', [5, 43, 43, 43, 43, 43]), (u'X44', [5, 44, 44, 44, 44, 44]), (u'X45', [5, 45, 45, 45, 45, 45]), (u'X46', [5, 46, 46, 46, 46, 46]), (u'X47', [5, 47, 47, 47, 47, 47]), (u'X48', [5, 48, 48, 48, 48, 48]), (u'X49', [5, 49, 49, 49, 49, 49]), (u'X50', [5, 50, 50, 50, 50, 50]), (u'X51', [5, 51, 51, 51, 51, 51]), (u'X52', [5, 52, 52, 52, 52, 52]), (u'X53', [5, 53, 53, 53, 53, 53]), (u'X54', [5, 54, 54, 54, 54, 54]), (u'X55', [5, 55, 55, 55, 55, 55]), (u'X56', [5, 56, 56, 56, 56, 56]), (u'X57', [5, 57, 57, 57, 57, 57]), (u'X58', [5, 58, 58, 58, 58, 58]), (u'X59', [5, 59, 59, 59, 59, 59]), (u'X60', [5, 60, 60, 60, 60, 60]), (u'X61', [5, 61, 61, 61, 61, 61]), (u'X62', [5, 62, 62, 62, 62, 62]), (u'X63', [5, 63, 63, 63, 63, 63]), (u'X64', [5, 64, 64, 64, 64, 64]), (u'X65', [5, 65, 65, 65, 65, 65]), (u'X66', [5, 66, 66, 66, 66, 66]), (u'X67', [5, 67, 67, 67, 67, 67]), (u'X68', [5, 68, 68, 68, 68, 68]), (u'X69', [5, 69, 69, 69, 69, 69]), (u'X70', [5, 70, 70, 70, 70, 70]), (u'X71', [5, 71, 71, 71, 71, 71]), (u'X72', [5, 72, 72, 72, 72, 72]), (u'X73', [5, 73, 73, 73, 73, 73]), (u'X74', [5, 74, 74, 74, 74, 74]), (u'X75', [5, 75, 75, 75, 75, 75]), (u'X76', [5, 76, 76, 76, 76, 76]), (u'X77', [5, 77, 77, 77, 77, 77]), (u'X78', [5, 78, 78, 78, 78, 78]), (u'X79', [5, 79, 79, 79, 79, 79]), (u'X80', [5, 80, 80, 80, 80, 80]), (u'X81', [5, 81, 81, 81, 81, 81]), (u'X82', [5, 82, 82, 82, 82, 82]), (u'X83', [5, 83, 83, 83, 83, 83]), (u'X84', [5, 84, 84, 84, 84, 84]), (u'X85', [5, 85, 85, 85, 85, 85]), (u'X86', [5, 86, 86, 86, 86, 86]), (u'X87', [5, 87, 87, 87, 87, 87]), (u'X88', [5, 88, 88, 88, 88, 88]), (u'X89', [5, 89, 89, 89, 89, 89]), (u'X90', [5, 90, 90, 90, 90, 90]), (u'projectCode_13', [5, 91, 91, 91, 91, 91]), (u'projectCode_25', [5, 92, 92, 92, 92, 92]), (u'projectCode_27', [5, 93, 93, 93, 93, 93]), (u'projectCode_29', [5, 94, 94, 94, 94, 94]), (u'projectCode_31', [5, 95, 95, 95, 95, 95]), (u'projectCode_40', [5, 96, 96, 96, 96, 96]), (u'projectCode_58', [5, 97, 97, 97, 97, 97]), (u'projectCode_97', [5, 98, 98, 98, 98, 98]), (u'projectCode_99', [5, 99, 99, 99, 99, 99]), (u'projectCode_161', [5, 100, 100, 100, 100, 100]), (u'projectCode_213', [5, 101, 101, 101, 101, 101]), (u'projectCode_221', [5, 102, 102, 102, 102, 102]), (u'projectCode_249', [5, 103, 103, 103, 103, 103]), (u'projectCode_258', [5, 104, 104, 104, 104, 104]), (u'projectCode_300', [5, 105, 105, 105, 105, 105]), (u'projectCode_320', [5, 106, 106, 106, 106, 106]), (u'projectCode_321', [5, 107, 107, 107, 107, 107]), (u'projectCode_363', [5, 108, 108, 108, 108, 108]), (u'projectCode_371', [5, 109, 109, 109, 109, 109]), (u'projectCode_421', [5, 110, 110, 110, 110, 110]), (u'projectCode_422', [5, 111, 111, 111, 111, 111]), (u'projectCode_473', [5, 112, 112, 112, 112, 112]), (u'projectCode_516', [5, 113, 113, 113, 113, 113]), (u'projectCode_517', [5, 114, 114, 114, 114, 114]), (u'projectCode_541', [5, 115, 115, 115, 115, 115]), (u'projectCode_549', [5, 116, 116, 116, 116, 116]), (u'projectCode_571', [5, 117, 117, 117, 117, 117]), (u'projectCode_609', [5, 118, 118, 118, 118, 118]), (u'projectCode_614', [5, 119, 119, 119, 119, 119]), (u'projectCode_710', [5, 120, 120, 120, 120, 120]), (u'projectCode_723', [5, 121, 121, 121, 121, 121]), (u'projectCode_727', [5, 122, 122, 122, 122, 122]), (u'projectCode_732', [5, 123, 123, 123, 123, 123]), (u'projectCode_735', [5, 124, 124, 124, 124, 124]), (u'projectCode_737', [5, 125, 125, 125, 125, 125]), (u'projectCode_743', [5, 126, 126, 126, 126, 126]), (u'projectCode_748', [5, 127, 127, 127, 127, 127]), (u'projectCode_959', [5, 128, 128, 128, 128, 128]), (u'projectCode_967', [5, 129, 129, 129, 129, 129]), (u'projectCode_1014', [5, 130, 130, 130, 130, 130]), (u'projectCode_1037', [5, 131, 131, 131, 131, 131]), (u'projectCode_1039', [5, 132, 132, 132, 132, 132]), (u'projectCode_1049', [5, 133, 133, 133, 133, 133]), (u'projectCode_1123', [5, 134, 134, 134, 134, 134]), (u'projectCode_1210', [5, 135, 135, 135, 135, 135]), (u'projectCode_1217', [5, 136, 136, 136, 136, 136]), (u'projectCode_1271', [5, 137, 137, 137, 137, 137]), (u'projectCode_1336', [5, 138, 138, 138, 138, 138]), (u'projectCode_1365', [5, 139, 139, 139, 139, 139]), (u'projectCode_1388', [5, 140, 140, 140, 140, 140]), (u'projectCode_1456', [5, 141, 141, 141, 141, 141]), (u'projectCode_1484', [5, 142, 142, 142, 142, 142]), (u'projectCode_1515', [5, 143, 143, 143, 143, 143]), (u'projectCode_1534', [5, 144, 144, 144, 144, 144]), (u'projectCode_1539', [5, 145, 145, 145, 145, 145]), (u'projectCode_1552', [5, 146, 146, 146, 146, 146]), (u'projectCode_1553', [5, 147, 147, 147, 147, 147]), (u'projectCode_1555', [5, 148, 148, 148, 148, 148]), (u'projectCode_1556', [5, 149, 149, 149, 149, 149]), (u'projectCode_1559', [5, 150, 150, 150, 150, 150]), (u'projectCode_1594', [5, 151, 151, 151, 151, 151]), (u'projectCode_1606', [5, 152, 152, 152, 152, 152]), (u'projectCode_1614', [5, 153, 153, 153, 153, 153]), (u'projectCode_1615', [5, 154, 154, 154, 154, 154]), (u'projectCode_1616', [5, 155, 155, 155, 155, 155]), (u'projectCode_1627', [5, 156, 156, 156, 156, 156]), (u'projectCode_1628', [5, 157, 157, 157, 157, 157]), (u'projectCode_1631', [5, 158, 158, 158, 158, 158]), (u'projectCode_1638', [5, 159, 159, 159, 159, 159]), (u'projectCode_1643', [5, 160, 160, 160, 160, 160]), (u'projectCode_1644', [5, 161, 161, 161, 161, 161]), (u'projectCode_1648', [5, 162, 162, 162, 162, 162]), (u'projectCode_1658', [5, 163, 163, 163, 163, 163]), (u'projectCode_1674', [5, 164, 164, 164, 164, 164]), (u'projectCode_1779', [5, 165, 165, 165, 165, 165]), (u'projectCode_1794', [5, 166, 166, 166, 166, 166]), (u'projectCode_1833', [5, 167, 167, 167, 167, 167]), (u'projectCode_1836', [5, 168, 168, 168, 168, 168]), (u'projectCode_1866', [5, 169, 169, 169, 169, 169]), (u'projectCode_1878', [5, 170, 170, 170, 170, 170]), (u'projectCode_1954', [5, 171, 171, 171, 171, 171]), (u'projectCode_2058', [5, 172, 172, 172, 172, 172]), (u'projectCode_2093', [5, 173, 173, 173, 173, 173]), (u'projectCode_2112', [5, 174, 174, 174, 174, 174]), (u'projectCode_2175', [5, 175, 175, 175, 175, 175]), (u'projectCode_2180', [5, 176, 176, 176, 176, 176]), (u'projectCode_2242', [5, 177, 177, 177, 177, 177]), (u'projectCode_2243', [5, 178, 178, 178, 178, 178]), (u'projectCode_2244', [5, 179, 179, 179, 179, 179]), (u'projectCode_2264', [5, 180, 180, 180, 180, 180]), (u'projectCode_2268', [5, 181, 181, 181, 181, 181]), (u'projectCode_2273', [5, 182, 182, 182, 182, 182]), (u'projectCode_2335', [5, 183, 183, 183, 183, 183]), (u'projectCode_2348', [5, 184, 184, 184, 184, 184]), (u'projectCode_2370', [5, 185, 185, 185, 185, 185]), (u'projectCode_2376', [5, 186, 186, 186, 186, 186]), (u'projectCode_2406', [5, 187, 187, 187, 187, 187]), (u'projectCode_2508', [5, 188, 188, 188, 188, 188]), (u'projectCode_2562', [5, 189, 189, 189, 189, 189]), (u'projectCode_2620', [5, 190, 190, 190, 190, 190]), (u'projectCode_2630', [5, 191, 191, 191, 191, 191]), (u'projectCode_2635', [5, 192, 192, 192, 192, 192]), (u'projectCode_2694', [5, 193, 193, 193, 193, 193]), (u'projectCode_2696', [5, 194, 194, 194, 194, 194]), (u'projectCode_2745', [5, 195, 195, 195, 195, 195]), (u'projectCode_2756', [5, 196, 196, 196, 196, 196]), (u'projectCode_2759', [5, 197, 197, 197, 197, 197]), (u'projectCode_2766', [5, 198, 198, 198, 198, 198]), (u'projectCode_2767', [5, 199, 199, 199, 199, 199]), (u'projectCode_2770', [5, 200, 200, 200, 200, 200]), (u'projectCode_2784', [5, 201, 201, 201, 201, 201]), (u'projectCode_2866', [5, 202, 202, 202, 202, 202]), (u'projectCode_2877', [5, 203, 203, 203, 203, 203]), (u'projectCode_2914', [5, 204, 204, 204, 204, 204]), (u'projectCode_2923', [5, 205, 205, 205, 205, 205]), (u'projectCode_2932', [5, 206, 206, 206, 206, 206]), (u'projectCode_2945', [5, 207, 207, 207, 207, 207]), (u'projectCode_3010', [5, 208, 208, 208, 208, 208]), (u'projectCode_3064', [5, 209, 209, 209, 209, 209]), (u'projectCode_3077', [5, 210, 210, 210, 210, 210]), (u'projectCode_3080', [5, 211, 211, 211, 211, 211]), (u'projectCode_3082', [5, 212, 212, 212, 212, 212]), (u'projectCode_3104', [5, 213, 213, 213, 213, 213]), (u'projectCode_3105', [5, 214, 214, 214, 214, 214]), (u'projectCode_3135', [5, 215, 215, 215, 215, 215]), (u'projectCode_3145', [5, 216, 216, 216, 216, 216]), (u'projectCode_3181', [5, 217, 217, 217, 217, 217]), (u'projectCode_3193', [5, 218, 218, 218, 218, 218]), (u'projectCode_3211', [5, 219, 219, 219, 219, 219]), (u'projectCode_3262', [5, 220, 220, 220, 220, 220]), (u'projectCode_3279', [5, 221, 221, 221, 221, 221]), (u'projectCode_3291', [5, 222, 222, 222, 222, 222]), (u'projectCode_3313', [5, 223, 223, 223, 223, 223]), (u'projectCode_3417', [5, 224, 224, 224, 224, 224]), (u'projectCode_3430', [5, 225, 225, 225, 225, 225]), (u'projectCode_3432', [5, 226, 226, 226, 226, 226]), (u'projectCode_3444', [5, 227, 227, 227, 227, 227]), (u'projectCode_3450', [5, 228, 228, 228, 228, 228]), (u'projectCode_3454', [5, 229, 229, 229, 229, 229]), (u'projectCode_3461', [5, 230, 230, 230, 230, 230]), (u'projectCode_3462', [5, 231, 231, 231, 231, 231]), (u'projectCode_3466', [5, 232, 232, 232, 232, 232]), (u'projectCode_3507', [5, 233, 233, 233, 233, 233]), (u'projectCode_3514', [5, 234, 234, 234, 234, 234]), (u'projectCode_3565', [5, 235, 235, 235, 235, 235]), (u'projectCode_3566', [5, 236, 236, 236, 236, 236]), (u'projectCode_3571', [5, 237, 237, 237, 237, 237]), (u'projectCode_3640', [5, 238, 238, 238, 238, 238]), (u'projectCode_3776', [5, 239, 239, 239, 239, 239]), (u'projectCode_3911', [5, 240, 240, 240, 240, 240]), (u'projectCode_3957', [5, 241, 241, 241, 241, 241]), (u'projectCode_3988', [5, 242, 242, 242, 242, 242]), (u'projectCode_4077', [5, 243, 243, 243, 243, 243]), (u'projectCode_4086', [5, 244, 244, 244, 244, 244]), (u'projectCode_4106', [5, 245, 245, 245, 245, 245]), (u'projectCode_4108', [5, 246, 246, 246, 246, 246]), (u'projectCode_4115', [5, 247, 247, 247, 247, 247]), (u'projectCode_4116', [5, 248, 248, 248, 248, 248]), (u'projectCode_4120', [5, 249, 249, 249, 249, 249]), (u'projectCode_4121', [5, 250, 250, 250, 250, 250]), (u'projectCode_4124', [5, 251, 251, 251, 251, 251]), (u'projectCode_4145', [5, 252, 252, 252, 252, 252]), (u'projectCode_4149', [5, 253, 253, 253, 253, 253]), (u'projectCode_4203', [5, 254, 254, 254, 254, 254]), (u'projectCode_4214', [5, 255, 255, 255, 255, 255]), (u'projectCode_4239', [5, 256, 256, 256, 256, 256]), (u'projectCode_4272', [5, 257, 257, 257, 257, 257]), (u'projectCode_4302', [5, 258, 258, 258, 258, 258]), (u'projectCode_4303', [5, 259, 259, 259, 259, 259]), (u'projectCode_4304', [5, 260, 260, 260, 260, 260]), (u'projectCode_4316', [5, 261, 261, 261, 261, 261]), (u'projectCode_4332', [5, 262, 262, 262, 262, 262]), (u'sector_Agriculture and Food Security', [5, 263, 263, 263, 263, 263]), (u'sector_Economic Development', [5, 264, 264, 264, 264, 264]), (u'sector_Education and Training', [5, 265, 265, 265, 265, 265]), (u'sector_Emergency Response', [5, 266, 266, 266, 266, 266]), (u'sector_Financial Services for the Poor', [5, 267, 267, 267, 267, 267]), (u"sector_Gender Equality and Women's Empowerment", [5, 268, 268, 268, 268, 268]), (u'sector_Health', [5, 269, 269, 269, 269, 269]), (u'sector_No info', [5, 270, 270, 270, 270, 270]), (u'sector_Other', [5, 271, 271, 271, 271, 271]), (u'sector_Water, Sanitation, & Hygiene', [5, 272, 272, 272, 272, 272])]), None), ([0.11631336649602804, 0.27096216471609907, 0.5267255144472134, 0.9848649638377734, 0.06858606505665328, 0.9314139349433468, 0.015135036162226495, 0.007267234276297721, 0.05588109117520882, 0.0009528856587680117, 0.00968232170649089, 0.00968232170649089, 160.4635611099154, 0.006587524722200431], 'SVM (polynomial)', None, OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'X2', [5, 2, 2, 2, 2, 2]), (u'X3', [5, 3, 3, 3, 3, 3]), (u'X4', [5, 4, 4, 4, 4, 4]), (u'X5', [5, 5, 5, 5, 5, 5]), (u'X6', [5, 6, 6, 6, 6, 6]), (u'X7', [5, 7, 7, 7, 7, 7]), (u'X8', [5, 8, 8, 8, 8, 8]), (u'X9', [5, 9, 9, 9, 9, 9]), (u'X10', [5, 10, 10, 10, 10, 10]), (u'X11', [5, 11, 11, 11, 11, 11]), (u'X12', [5, 12, 12, 12, 12, 12]), (u'X13', [5, 13, 13, 13, 13, 13]), (u'X14', [5, 14, 14, 14, 14, 14]), (u'X15', [5, 15, 15, 15, 15, 15]), (u'X16', [5, 16, 16, 16, 16, 16]), (u'X17', [5, 17, 17, 17, 17, 17]), (u'X18', [5, 18, 18, 18, 18, 18]), (u'X19', [5, 19, 19, 19, 19, 19]), (u'X20', [5, 20, 20, 20, 20, 20]), (u'X21', [5, 21, 21, 21, 21, 21]), (u'X22', [5, 22, 22, 22, 22, 22]), (u'X23', [5, 23, 23, 23, 23, 23]), (u'X24', [5, 24, 24, 24, 24, 24]), (u'X25', [5, 25, 25, 25, 25, 25]), (u'X26', [5, 26, 26, 26, 26, 26]), (u'X27', [5, 27, 27, 27, 27, 27]), (u'X28', [5, 28, 28, 28, 28, 28]), (u'X29', [5, 29, 29, 29, 29, 29]), (u'X30', [5, 30, 30, 30, 30, 30]), (u'X31', [5, 31, 31, 31, 31, 31]), (u'X32', [5, 32, 32, 32, 32, 32]), (u'X33', [5, 33, 33, 33, 33, 33]), (u'X34', [5, 34, 34, 34, 34, 34]), (u'X35', [5, 35, 35, 35, 35, 35]), (u'X36', [5, 36, 36, 36, 36, 36]), (u'X37', [5, 37, 37, 37, 37, 37]), (u'X38', [5, 38, 38, 38, 38, 38]), (u'X39', [5, 39, 39, 39, 39, 39]), (u'X40', [5, 40, 40, 40, 40, 40]), (u'X41', [5, 41, 41, 41, 41, 41]), (u'X42', [5, 42, 42, 42, 42, 42]), (u'X43', [5, 43, 43, 43, 43, 43]), (u'X44', [5, 44, 44, 44, 44, 44]), (u'X45', [5, 45, 45, 45, 45, 45]), (u'X46', [5, 46, 46, 46, 46, 46]), (u'X47', [5, 47, 47, 47, 47, 47]), (u'X48', [5, 48, 48, 48, 48, 48]), (u'X49', [5, 49, 49, 49, 49, 49]), (u'X50', [5, 50, 50, 50, 50, 50]), (u'X51', [5, 51, 51, 51, 51, 51]), (u'X52', [5, 52, 52, 52, 52, 52]), (u'X53', [5, 53, 53, 53, 53, 53]), (u'X54', [5, 54, 54, 54, 54, 54]), (u'X55', [5, 55, 55, 55, 55, 55]), (u'X56', [5, 56, 56, 56, 56, 56]), (u'X57', [5, 57, 57, 57, 57, 57]), (u'X58', [5, 58, 58, 58, 58, 58]), (u'X59', [5, 59, 59, 59, 59, 59]), (u'X60', [5, 60, 60, 60, 60, 60]), (u'X61', [5, 61, 61, 61, 61, 61]), (u'X62', [5, 62, 62, 62, 62, 62]), (u'X63', [5, 63, 63, 63, 63, 63]), (u'X64', [5, 64, 64, 64, 64, 64]), (u'X65', [5, 65, 65, 65, 65, 65]), (u'X66', [5, 66, 66, 66, 66, 66]), (u'X67', [5, 67, 67, 67, 67, 67]), (u'X68', [5, 68, 68, 68, 68, 68]), (u'X69', [5, 69, 69, 69, 69, 69]), (u'X70', [5, 70, 70, 70, 70, 70]), (u'X71', [5, 71, 71, 71, 71, 71]), (u'X72', [5, 72, 72, 72, 72, 72]), (u'X73', [5, 73, 73, 73, 73, 73]), (u'X74', [5, 74, 74, 74, 74, 74]), (u'X75', [5, 75, 75, 75, 75, 75]), (u'X76', [5, 76, 76, 76, 76, 76]), (u'X77', [5, 77, 77, 77, 77, 77]), (u'X78', [5, 78, 78, 78, 78, 78]), (u'X79', [5, 79, 79, 79, 79, 79]), (u'X80', [5, 80, 80, 80, 80, 80]), (u'X81', [5, 81, 81, 81, 81, 81]), (u'X82', [5, 82, 82, 82, 82, 82]), (u'X83', [5, 83, 83, 83, 83, 83]), (u'X84', [5, 84, 84, 84, 84, 84]), (u'X85', [5, 85, 85, 85, 85, 85]), (u'X86', [5, 86, 86, 86, 86, 86]), (u'X87', [5, 87, 87, 87, 87, 87]), (u'X88', [5, 88, 88, 88, 88, 88]), (u'X89', [5, 89, 89, 89, 89, 89]), (u'X90', [5, 90, 90, 90, 90, 90]), (u'projectCode_13', [5, 91, 91, 91, 91, 91]), (u'projectCode_25', [5, 92, 92, 92, 92, 92]), (u'projectCode_27', [5, 93, 93, 93, 93, 93]), (u'projectCode_29', [5, 94, 94, 94, 94, 94]), (u'projectCode_31', [5, 95, 95, 95, 95, 95]), (u'projectCode_40', [5, 96, 96, 96, 96, 96]), (u'projectCode_58', [5, 97, 97, 97, 97, 97]), (u'projectCode_97', [5, 98, 98, 98, 98, 98]), (u'projectCode_99', [5, 99, 99, 99, 99, 99]), (u'projectCode_161', [5, 100, 100, 100, 100, 100]), (u'projectCode_213', [5, 101, 101, 101, 101, 101]), (u'projectCode_221', [5, 102, 102, 102, 102, 102]), (u'projectCode_249', [5, 103, 103, 103, 103, 103]), (u'projectCode_258', [5, 104, 104, 104, 104, 104]), (u'projectCode_300', [5, 105, 105, 105, 105, 105]), (u'projectCode_320', [5, 106, 106, 106, 106, 106]), (u'projectCode_321', [5, 107, 107, 107, 107, 107]), (u'projectCode_363', [5, 108, 108, 108, 108, 108]), (u'projectCode_371', [5, 109, 109, 109, 109, 109]), (u'projectCode_421', [5, 110, 110, 110, 110, 110]), (u'projectCode_422', [5, 111, 111, 111, 111, 111]), (u'projectCode_473', [5, 112, 112, 112, 112, 112]), (u'projectCode_516', [5, 113, 113, 113, 113, 113]), (u'projectCode_517', [5, 114, 114, 114, 114, 114]), (u'projectCode_541', [5, 115, 115, 115, 115, 115]), (u'projectCode_549', [5, 116, 116, 116, 116, 116]), (u'projectCode_571', [5, 117, 117, 117, 117, 117]), (u'projectCode_609', [5, 118, 118, 118, 118, 118]), (u'projectCode_614', [5, 119, 119, 119, 119, 119]), (u'projectCode_710', [5, 120, 120, 120, 120, 120]), (u'projectCode_723', [5, 121, 121, 121, 121, 121]), (u'projectCode_727', [5, 122, 122, 122, 122, 122]), (u'projectCode_732', [5, 123, 123, 123, 123, 123]), (u'projectCode_735', [5, 124, 124, 124, 124, 124]), (u'projectCode_737', [5, 125, 125, 125, 125, 125]), (u'projectCode_743', [5, 126, 126, 126, 126, 126]), (u'projectCode_748', [5, 127, 127, 127, 127, 127]), (u'projectCode_959', [5, 128, 128, 128, 128, 128]), (u'projectCode_967', [5, 129, 129, 129, 129, 129]), (u'projectCode_1014', [5, 130, 130, 130, 130, 130]), (u'projectCode_1037', [5, 131, 131, 131, 131, 131]), (u'projectCode_1039', [5, 132, 132, 132, 132, 132]), (u'projectCode_1049', [5, 133, 133, 133, 133, 133]), (u'projectCode_1123', [5, 134, 134, 134, 134, 134]), (u'projectCode_1210', [5, 135, 135, 135, 135, 135]), (u'projectCode_1217', [5, 136, 136, 136, 136, 136]), (u'projectCode_1271', [5, 137, 137, 137, 137, 137]), (u'projectCode_1336', [5, 138, 138, 138, 138, 138]), (u'projectCode_1365', [5, 139, 139, 139, 139, 139]), (u'projectCode_1388', [5, 140, 140, 140, 140, 140]), (u'projectCode_1456', [5, 141, 141, 141, 141, 141]), (u'projectCode_1484', [5, 142, 142, 142, 142, 142]), (u'projectCode_1515', [5, 143, 143, 143, 143, 143]), (u'projectCode_1534', [5, 144, 144, 144, 144, 144]), (u'projectCode_1539', [5, 145, 145, 145, 145, 145]), (u'projectCode_1552', [5, 146, 146, 146, 146, 146]), (u'projectCode_1553', [5, 147, 147, 147, 147, 147]), (u'projectCode_1555', [5, 148, 148, 148, 148, 148]), (u'projectCode_1556', [5, 149, 149, 149, 149, 149]), (u'projectCode_1559', [5, 150, 150, 150, 150, 150]), (u'projectCode_1594', [5, 151, 151, 151, 151, 151]), (u'projectCode_1606', [5, 152, 152, 152, 152, 152]), (u'projectCode_1614', [5, 153, 153, 153, 153, 153]), (u'projectCode_1615', [5, 154, 154, 154, 154, 154]), (u'projectCode_1616', [5, 155, 155, 155, 155, 155]), (u'projectCode_1627', [5, 156, 156, 156, 156, 156]), (u'projectCode_1628', [5, 157, 157, 157, 157, 157]), (u'projectCode_1631', [5, 158, 158, 158, 158, 158]), (u'projectCode_1638', [5, 159, 159, 159, 159, 159]), (u'projectCode_1643', [5, 160, 160, 160, 160, 160]), (u'projectCode_1644', [5, 161, 161, 161, 161, 161]), (u'projectCode_1648', [5, 162, 162, 162, 162, 162]), (u'projectCode_1658', [5, 163, 163, 163, 163, 163]), (u'projectCode_1674', [5, 164, 164, 164, 164, 164]), (u'projectCode_1779', [5, 165, 165, 165, 165, 165]), (u'projectCode_1794', [5, 166, 166, 166, 166, 166]), (u'projectCode_1833', [5, 167, 167, 167, 167, 167]), (u'projectCode_1836', [5, 168, 168, 168, 168, 168]), (u'projectCode_1866', [5, 169, 169, 169, 169, 169]), (u'projectCode_1878', [5, 170, 170, 170, 170, 170]), (u'projectCode_1954', [5, 171, 171, 171, 171, 171]), (u'projectCode_2058', [5, 172, 172, 172, 172, 172]), (u'projectCode_2093', [5, 173, 173, 173, 173, 173]), (u'projectCode_2112', [5, 174, 174, 174, 174, 174]), (u'projectCode_2175', [5, 175, 175, 175, 175, 175]), (u'projectCode_2180', [5, 176, 176, 176, 176, 176]), (u'projectCode_2242', [5, 177, 177, 177, 177, 177]), (u'projectCode_2243', [5, 178, 178, 178, 178, 178]), (u'projectCode_2244', [5, 179, 179, 179, 179, 179]), (u'projectCode_2264', [5, 180, 180, 180, 180, 180]), (u'projectCode_2268', [5, 181, 181, 181, 181, 181]), (u'projectCode_2273', [5, 182, 182, 182, 182, 182]), (u'projectCode_2335', [5, 183, 183, 183, 183, 183]), (u'projectCode_2348', [5, 184, 184, 184, 184, 184]), (u'projectCode_2370', [5, 185, 185, 185, 185, 185]), (u'projectCode_2376', [5, 186, 186, 186, 186, 186]), (u'projectCode_2406', [5, 187, 187, 187, 187, 187]), (u'projectCode_2508', [5, 188, 188, 188, 188, 188]), (u'projectCode_2562', [5, 189, 189, 189, 189, 189]), (u'projectCode_2620', [5, 190, 190, 190, 190, 190]), (u'projectCode_2630', [5, 191, 191, 191, 191, 191]), (u'projectCode_2635', [5, 192, 192, 192, 192, 192]), (u'projectCode_2694', [5, 193, 193, 193, 193, 193]), (u'projectCode_2696', [5, 194, 194, 194, 194, 194]), (u'projectCode_2745', [5, 195, 195, 195, 195, 195]), (u'projectCode_2756', [5, 196, 196, 196, 196, 196]), (u'projectCode_2759', [5, 197, 197, 197, 197, 197]), (u'projectCode_2766', [5, 198, 198, 198, 198, 198]), (u'projectCode_2767', [5, 199, 199, 199, 199, 199]), (u'projectCode_2770', [5, 200, 200, 200, 200, 200]), (u'projectCode_2784', [5, 201, 201, 201, 201, 201]), (u'projectCode_2866', [5, 202, 202, 202, 202, 202]), (u'projectCode_2877', [5, 203, 203, 203, 203, 203]), (u'projectCode_2914', [5, 204, 204, 204, 204, 204]), (u'projectCode_2923', [5, 205, 205, 205, 205, 205]), (u'projectCode_2932', [5, 206, 206, 206, 206, 206]), (u'projectCode_2945', [5, 207, 207, 207, 207, 207]), (u'projectCode_3010', [5, 208, 208, 208, 208, 208]), (u'projectCode_3064', [5, 209, 209, 209, 209, 209]), (u'projectCode_3077', [5, 210, 210, 210, 210, 210]), (u'projectCode_3080', [5, 211, 211, 211, 211, 211]), (u'projectCode_3082', [5, 212, 212, 212, 212, 212]), (u'projectCode_3104', [5, 213, 213, 213, 213, 213]), (u'projectCode_3105', [5, 214, 214, 214, 214, 214]), (u'projectCode_3135', [5, 215, 215, 215, 215, 215]), (u'projectCode_3145', [5, 216, 216, 216, 216, 216]), (u'projectCode_3181', [5, 217, 217, 217, 217, 217]), (u'projectCode_3193', [5, 218, 218, 218, 218, 218]), (u'projectCode_3211', [5, 219, 219, 219, 219, 219]), (u'projectCode_3262', [5, 220, 220, 220, 220, 220]), (u'projectCode_3279', [5, 221, 221, 221, 221, 221]), (u'projectCode_3291', [5, 222, 222, 222, 222, 222]), (u'projectCode_3313', [5, 223, 223, 223, 223, 223]), (u'projectCode_3417', [5, 224, 224, 224, 224, 224]), (u'projectCode_3430', [5, 225, 225, 225, 225, 225]), (u'projectCode_3432', [5, 226, 226, 226, 226, 226]), (u'projectCode_3444', [5, 227, 227, 227, 227, 227]), (u'projectCode_3450', [5, 228, 228, 228, 228, 228]), (u'projectCode_3454', [5, 229, 229, 229, 229, 229]), (u'projectCode_3461', [5, 230, 230, 230, 230, 230]), (u'projectCode_3462', [5, 231, 231, 231, 231, 231]), (u'projectCode_3466', [5, 232, 232, 232, 232, 232]), (u'projectCode_3507', [5, 233, 233, 233, 233, 233]), (u'projectCode_3514', [5, 234, 234, 234, 234, 234]), (u'projectCode_3565', [5, 235, 235, 235, 235, 235]), (u'projectCode_3566', [5, 236, 236, 236, 236, 236]), (u'projectCode_3571', [5, 237, 237, 237, 237, 237]), (u'projectCode_3640', [5, 238, 238, 238, 238, 238]), (u'projectCode_3776', [5, 239, 239, 239, 239, 239]), (u'projectCode_3911', [5, 240, 240, 240, 240, 240]), (u'projectCode_3957', [5, 241, 241, 241, 241, 241]), (u'projectCode_3988', [5, 242, 242, 242, 242, 242]), (u'projectCode_4077', [5, 243, 243, 243, 243, 243]), (u'projectCode_4086', [5, 244, 244, 244, 244, 244]), (u'projectCode_4106', [5, 245, 245, 245, 245, 245]), (u'projectCode_4108', [5, 246, 246, 246, 246, 246]), (u'projectCode_4115', [5, 247, 247, 247, 247, 247]), (u'projectCode_4116', [5, 248, 248, 248, 248, 248]), (u'projectCode_4120', [5, 249, 249, 249, 249, 249]), (u'projectCode_4121', [5, 250, 250, 250, 250, 250]), (u'projectCode_4124', [5, 251, 251, 251, 251, 251]), (u'projectCode_4145', [5, 252, 252, 252, 252, 252]), (u'projectCode_4149', [5, 253, 253, 253, 253, 253]), (u'projectCode_4203', [5, 254, 254, 254, 254, 254]), (u'projectCode_4214', [5, 255, 255, 255, 255, 255]), (u'projectCode_4239', [5, 256, 256, 256, 256, 256]), (u'projectCode_4272', [5, 257, 257, 257, 257, 257]), (u'projectCode_4302', [5, 258, 258, 258, 258, 258]), (u'projectCode_4303', [5, 259, 259, 259, 259, 259]), (u'projectCode_4304', [5, 260, 260, 260, 260, 260]), (u'projectCode_4316', [5, 261, 261, 261, 261, 261]), (u'projectCode_4332', [5, 262, 262, 262, 262, 262]), (u'sector_Agriculture and Food Security', [5, 263, 263, 263, 263, 263]), (u'sector_Economic Development', [5, 264, 264, 264, 264, 264]), (u'sector_Education and Training', [5, 265, 265, 265, 265, 265]), (u'sector_Emergency Response', [5, 266, 266, 266, 266, 266]), (u'sector_Financial Services for the Poor', [5, 267, 267, 267, 267, 267]), (u"sector_Gender Equality and Women's Empowerment", [5, 268, 268, 268, 268, 268]), (u'sector_Health', [5, 269, 269, 269, 269, 269]), (u'sector_No info', [5, 270, 270, 270, 270, 270]), (u'sector_Other', [5, 271, 271, 271, 271, 271]), (u'sector_Water, Sanitation, & Hygiene', [5, 272, 272, 272, 272, 272])]), None)], None), ('Logistic regression', [([0.30827249453884109, 0.28536187248860789, 0.6310212906320958, 0.966710610638103, 0.2953319706260883, 0.7046680293739118, 0.03328938936189692, 0.047225121303671146, 0.13654124712948243, 0.00031746031746031746, 0.009684152705300741, 0.009684152705300741, 4.939891807305797, 0.010209804916191017], 'AdaBoost', 'Logistic regression', OrderedDict([(u'projectCode_3104', [5, 1, 3, 1, 4, 5]), (u'projectCode_4086', [5, 2, 2, 5, 3, 3]), (u'projectCode_743', [5, 3, 4, 2, 2, 2]), (u'projectCode_748', [5, 4, 1, 6, 8, 4]), (u'projectCode_3279', [3, 5, 5, 9]), (u'projectCode_473', [5, 6, 6, 4, 7, 6]), (u'projectCode_4120', [5, 7, 13, 12, 9, 13]), (u'projectCode_2766', [5, 8, 11, 8, 10, 8]), (u'projectCode_2370', [5, 9, 8, 3, 1, 1]), (u'projectCode_27', [5, 10, 7, 14, 12, 7]), (u'projectCode_300', [5, 11, 9, 7, 14, 10]), (u'X74', [2, 12, 15]), (u'X70', [1, 13]), (u'projectCode_2508', [1, 14]), (u'X85', [4, 15, 14, 11, 13]), (u'X87', [1, 10]), (u'X63', [1, 12]), (u'X86', [1, 15]), (u'X84', [1, 10]), (u'projectCode_541', [1, 13]), (u'X83', [1, 5]), (u'X78', [1, 6]), (u'X90', [1, 11]), (u'projectCode_1553', [2, 15, 14]), (u'projectCode_363', [1, 9]), (u'X77', [1, 11]), (u'X65', [1, 12]), (u'X88', [1, 15])]), None), ([0.30066062125880222, 0.35780146810736796, 0.6267644363752414, 0.9654984894259819, 0.2880303833245009, 0.7119696166754991, 0.034501510574018124, 0.047225121303671146, 0.25722562899033485, 0.00031746031746031746, 0.023605236656596175, 0.023605236656596175, 19.014425290080005, 0.01098836844631902], 'Artificial neural network', 'Logistic regression', OrderedDict([(u'projectCode_3104', [5, 1, 3, 1, 4, 5]), (u'projectCode_4086', [5, 2, 2, 5, 3, 3]), (u'projectCode_743', [5, 3, 4, 2, 2, 2]), (u'projectCode_748', [5, 4, 1, 6, 8, 4]), (u'projectCode_3279', [3, 5, 5, 9]), (u'projectCode_473', [5, 6, 6, 4, 7, 6]), (u'projectCode_4120', [5, 7, 13, 12, 9, 13]), (u'projectCode_2766', [5, 8, 11, 8, 10, 8]), (u'projectCode_2370', [5, 9, 8, 3, 1, 1]), (u'projectCode_27', [5, 10, 7, 14, 12, 7]), (u'projectCode_300', [5, 11, 9, 7, 14, 10]), (u'X74', [2, 12, 15]), (u'X70', [1, 13]), (u'projectCode_2508', [1, 14]), (u'X85', [4, 15, 14, 11, 13]), (u'X87', [1, 10]), (u'X63', [1, 12]), (u'X86', [1, 15]), (u'X84', [1, 10]), (u'projectCode_541', [1, 13]), (u'X83', [1, 5]), (u'X78', [1, 6]), (u'X90', [1, 11]), (u'projectCode_1553', [2, 15, 14]), (u'projectCode_363', [1, 9]), (u'X77', [1, 11]), (u'X65', [1, 12]), (u'X88', [1, 15])]), None), ([0.29752074779766807, 0.35720720409273204, 0.6224746199119755, 0.9721614940950289, 0.27278774572892217, 0.7272122542710777, 0.02783850590497116, 0.047225121303671146, 0.27024806318923966, 0.00031746031746031746, 0.026025817083218893, 0.026025817083218893, 0.0913301857375366, 0.008985007627755523], 'Bernoulli Naive Bayes', 'Logistic regression', OrderedDict([(u'projectCode_3104', [5, 1, 3, 1, 4, 5]), (u'projectCode_4086', [5, 2, 2, 5, 3, 3]), (u'projectCode_743', [5, 3, 4, 2, 2, 2]), (u'projectCode_748', [5, 4, 1, 6, 8, 4]), (u'projectCode_3279', [3, 5, 5, 9]), (u'projectCode_473', [5, 6, 6, 4, 7, 6]), (u'projectCode_4120', [5, 7, 13, 12, 9, 13]), (u'projectCode_2766', [5, 8, 11, 8, 10, 8]), (u'projectCode_2370', [5, 9, 8, 3, 1, 1]), (u'projectCode_27', [5, 10, 7, 14, 12, 7]), (u'projectCode_300', [5, 11, 9, 7, 14, 10]), (u'X74', [2, 12, 15]), (u'X70', [1, 13]), (u'projectCode_2508', [1, 14]), (u'X85', [4, 15, 14, 11, 13]), (u'X87', [1, 10]), (u'X63', [1, 12]), (u'X86', [1, 15]), (u'X84', [1, 10]), (u'projectCode_541', [1, 13]), (u'X83', [1, 5]), (u'X78', [1, 6]), (u'X90', [1, 11]), (u'projectCode_1553', [2, 15, 14]), (u'projectCode_363', [1, 9]), (u'X77', [1, 11]), (u'X65', [1, 12]), (u'X88', [1, 15])]), None), ([0.30827249453884109, 0.37455479997431862, 0.6310212906320958, 0.966710610638103, 0.2953319706260883, 0.7046680293739118, 0.03328938936189692, 0.047225121303671146, 0.28993110757816637, 0.00031746031746031746, 0.02784033690378101, 0.02784033690378101, 0.0450142825102563, 0.010209804916191017], 'Decision Tree', 'Logistic regression', OrderedDict([(u'projectCode_3104', [5, 1, 3, 1, 4, 5]), (u'projectCode_4086', [5, 2, 2, 5, 3, 3]), (u'projectCode_743', [5, 3, 4, 2, 2, 2]), (u'projectCode_748', [5, 4, 1, 6, 8, 4]), (u'projectCode_3279', [3, 5, 5, 9]), (u'projectCode_473', [5, 6, 6, 4, 7, 6]), (u'projectCode_4120', [5, 7, 13, 12, 9, 13]), (u'projectCode_2766', [5, 8, 11, 8, 10, 8]), (u'projectCode_2370', [5, 9, 8, 3, 1, 1]), (u'projectCode_27', [5, 10, 7, 14, 12, 7]), (u'projectCode_300', [5, 11, 9, 7, 14, 10]), (u'X74', [2, 12, 15]), (u'X70', [1, 13]), (u'projectCode_2508', [1, 14]), (u'X85', [4, 15, 14, 11, 13]), (u'X87', [1, 10]), (u'X63', [1, 12]), (u'X86', [1, 15]), (u'X84', [1, 10]), (u'projectCode_541', [1, 13]), (u'X83', [1, 5]), (u'X78', [1, 6]), (u'X90', [1, 11]), (u'projectCode_1553', [2, 15, 14]), (u'projectCode_363', [1, 9]), (u'X77', [1, 11]), (u'X65', [1, 12]), (u'X88', [1, 15])]), None), ([0.29869704322786789, 0.35912425711717477, 0.6242928017301573, 0.9691311910647258, 0.2794544123955889, 0.7205455876044111, 0.030868808935274196, 0.047225121303671146, 0.26802432684785626, 0.009525323642970701, 0.02783850590497116, 0.02783850590497116, 1.487051560420468, 0.008314995081791319], 'Extreme Learning Machine', 'Logistic regression', OrderedDict([(u'projectCode_3104', [5, 1, 3, 1, 4, 5]), (u'projectCode_4086', [5, 2, 2, 5, 3, 3]), (u'projectCode_743', [5, 3, 4, 2, 2, 2]), (u'projectCode_748', [5, 4, 1, 6, 8, 4]), (u'projectCode_3279', [3, 5, 5, 9]), (u'projectCode_473', [5, 6, 6, 4, 7, 6]), (u'projectCode_4120', [5, 7, 13, 12, 9, 13]), (u'projectCode_2766', [5, 8, 11, 8, 10, 8]), (u'projectCode_2370', [5, 9, 8, 3, 1, 1]), (u'projectCode_27', [5, 10, 7, 14, 12, 7]), (u'projectCode_300', [5, 11, 9, 7, 14, 10]), (u'X74', [2, 12, 15]), (u'X70', [1, 13]), (u'projectCode_2508', [1, 14]), (u'X85', [4, 15, 14, 11, 13]), (u'X87', [1, 10]), (u'X63', [1, 12]), (u'X86', [1, 15]), (u'X84', [1, 10]), (u'projectCode_541', [1, 13]), (u'X83', [1, 5]), (u'X78', [1, 6]), (u'X90', [1, 11]), (u'projectCode_1553', [2, 15, 14]), (u'projectCode_363', [1, 9]), (u'X77', [1, 11]), (u'X65', [1, 12]), (u'X88', [1, 15])]), None), ([0.30506722375332623, 0.52468235525706108, 0.629462849073654, 0.9654984894259819, 0.2934272087213263, 0.7065727912786737, 0.034501510574018124, 0.9654984894259819, 0.2934272087213263, 0.7065727912786737, 0.034501510574018124, 0.034501510574018124, 0.010745313697530179, 0.009776855638127569], 'Gaussian Naive Bayes', 'Logistic regression', OrderedDict([(u'projectCode_3104', [5, 1, 3, 1, 4, 5]), (u'projectCode_4086', [5, 2, 2, 5, 3, 3]), (u'projectCode_743', [5, 3, 4, 2, 2, 2]), (u'projectCode_748', [5, 4, 1, 6, 8, 4]), (u'projectCode_3279', [3, 5, 5, 9]), (u'projectCode_473', [5, 6, 6, 4, 7, 6]), (u'projectCode_4120', [5, 7, 13, 12, 9, 13]), (u'projectCode_2766', [5, 8, 11, 8, 10, 8]), (u'projectCode_2370', [5, 9, 8, 3, 1, 1]), (u'projectCode_27', [5, 10, 7, 14, 12, 7]), (u'projectCode_300', [5, 11, 9, 7, 14, 10]), (u'X74', [2, 12, 15]), (u'X70', [1, 13]), (u'projectCode_2508', [1, 14]), (u'X85', [4, 15, 14, 11, 13]), (u'X87', [1, 10]), (u'X63', [1, 12]), (u'X86', [1, 15]), (u'X84', [1, 10]), (u'projectCode_541', [1, 13]), (u'X83', [1, 5]), (u'X78', [1, 6]), (u'X90', [1, 11]), (u'projectCode_1553', [2, 15, 14]), (u'projectCode_363', [1, 9]), (u'X77', [1, 11]), (u'X65', [1, 12]), (u'X88', [1, 15])]), None), ([0.16285929860522882, 0.4716350760258281, 0.5856959915285844, 0.6024132564313833, 0.5689787266257854, 0.43102127337421453, 0.3975867435686167, 0.23146754554609542, 0.5670739647210234, 0.14952380952380953, 0.39637462235649545, 0.39637462235649545, 0.1716461004354901, 0.05177078154172975], 'K-nearest neighbours', 'Logistic regression', OrderedDict([(u'projectCode_3104', [5, 1, 3, 1, 4, 5]), (u'projectCode_4086', [5, 2, 2, 5, 3, 3]), (u'projectCode_743', [5, 3, 4, 2, 2, 2]), (u'projectCode_748', [5, 4, 1, 6, 8, 4]), (u'projectCode_3279', [3, 5, 5, 9]), (u'projectCode_473', [5, 6, 6, 4, 7, 6]), (u'projectCode_4120', [5, 7, 13, 12, 9, 13]), (u'projectCode_2766', [5, 8, 11, 8, 10, 8]), (u'projectCode_2370', [5, 9, 8, 3, 1, 1]), (u'projectCode_27', [5, 10, 7, 14, 12, 7]), (u'projectCode_300', [5, 11, 9, 7, 14, 10]), (u'X74', [2, 12, 15]), (u'X70', [1, 13]), (u'projectCode_2508', [1, 14]), (u'X85', [4, 15, 14, 11, 13]), (u'X87', [1, 10]), (u'X63', [1, 12]), (u'X86', [1, 15]), (u'X84', [1, 10]), (u'projectCode_541', [1, 13]), (u'X83', [1, 5]), (u'X78', [1, 6]), (u'X90', [1, 11]), (u'projectCode_1553', [2, 15, 14]), (u'projectCode_363', [1, 9]), (u'X77', [1, 11]), (u'X65', [1, 12]), (u'X88', [1, 15])]), None), ([0.29484781722310777, 0.34458817645637169, 0.6225903123806091, 0.9673130092465438, 0.2778676155146743, 0.7221323844853257, 0.03268699075345601, 0.047225121303671146, 0.24579251520427992, 0.00031746031746031746, 0.0211864872287833, 0.0211864872287833, 0.07665646480175534, 0.009456054070423337], 'Logistic regression', 'Logistic regression', OrderedDict([(u'projectCode_3104', [5, 1, 3, 1, 4, 5]), (u'projectCode_4086', [5, 2, 2, 5, 3, 3]), (u'projectCode_743', [5, 3, 4, 2, 2, 2]), (u'projectCode_748', [5, 4, 1, 6, 8, 4]), (u'projectCode_3279', [3, 5, 5, 9]), (u'projectCode_473', [5, 6, 6, 4, 7, 6]), (u'projectCode_4120', [5, 7, 13, 12, 9, 13]), (u'projectCode_2766', [5, 8, 11, 8, 10, 8]), (u'projectCode_2370', [5, 9, 8, 3, 1, 1]), (u'projectCode_27', [5, 10, 7, 14, 12, 7]), (u'projectCode_300', [5, 11, 9, 7, 14, 10]), (u'X74', [2, 12, 15]), (u'X70', [1, 13]), (u'projectCode_2508', [1, 14]), (u'X85', [4, 15, 14, 11, 13]), (u'X87', [1, 10]), (u'X63', [1, 12]), (u'X86', [1, 15]), (u'X84', [1, 10]), (u'projectCode_541', [1, 13]), (u'X83', [1, 5]), (u'X78', [1, 6]), (u'X90', [1, 11]), (u'projectCode_1553', [2, 15, 14]), (u'projectCode_363', [1, 9]), (u'X77', [1, 11]), (u'X65', [1, 12]), (u'X88', [1, 15])]), None), ([0.30827249453884109, 0.37431990892208006, 0.6310212906320958, 0.966710610638103, 0.2953319706260883, 0.7046680293739118, 0.03328938936189692, 0.047225121303671146, 0.28993110757816637, 0.00031746031746031746, 0.02784033690378101, 0.02784033690378101, 3.8579280383652126, 0.010209804916191017], 'Random forest', 'Logistic regression', OrderedDict([(u'projectCode_3104', [5, 1, 3, 1, 4, 5]), (u'projectCode_4086', [5, 2, 2, 5, 3, 3]), (u'projectCode_743', [5, 3, 4, 2, 2, 2]), (u'projectCode_748', [5, 4, 1, 6, 8, 4]), (u'projectCode_3279', [3, 5, 5, 9]), (u'projectCode_473', [5, 6, 6, 4, 7, 6]), (u'projectCode_4120', [5, 7, 13, 12, 9, 13]), (u'projectCode_2766', [5, 8, 11, 8, 10, 8]), (u'projectCode_2370', [5, 9, 8, 3, 1, 1]), (u'projectCode_27', [5, 10, 7, 14, 12, 7]), (u'projectCode_300', [5, 11, 9, 7, 14, 10]), (u'X74', [2, 12, 15]), (u'X70', [1, 13]), (u'projectCode_2508', [1, 14]), (u'X85', [4, 15, 14, 11, 13]), (u'X87', [1, 10]), (u'X63', [1, 12]), (u'X86', [1, 15]), (u'X84', [1, 10]), (u'projectCode_541', [1, 13]), (u'X83', [1, 5]), (u'X78', [1, 6]), (u'X90', [1, 11]), (u'projectCode_1553', [2, 15, 14]), (u'projectCode_363', [1, 9]), (u'X77', [1, 11]), (u'X65', [1, 12]), (u'X88', [1, 15])]), None), ([0.28311335322046244, 0.35294184622876379, 0.6137385925319105, 0.9721578320974092, 0.25531935296641184, 0.7446806470335883, 0.027842167902590864, 0.0, 0.2584949655537891, 0.0, 0.02844639750984162, 0.02844639750984162, 8.408211741572746, 0.007422483781666994], 'SVM (RDF)', 'Logistic regression', OrderedDict([(u'projectCode_3104', [5, 1, 3, 1, 4, 5]), (u'projectCode_4086', [5, 2, 2, 5, 3, 3]), (u'projectCode_743', [5, 3, 4, 2, 2, 2]), (u'projectCode_748', [5, 4, 1, 6, 8, 4]), (u'projectCode_3279', [3, 5, 5, 9]), (u'projectCode_473', [5, 6, 6, 4, 7, 6]), (u'projectCode_4120', [5, 7, 13, 12, 9, 13]), (u'projectCode_2766', [5, 8, 11, 8, 10, 8]), (u'projectCode_2370', [5, 9, 8, 3, 1, 1]), (u'projectCode_27', [5, 10, 7, 14, 12, 7]), (u'projectCode_300', [5, 11, 9, 7, 14, 10]), (u'X74', [2, 12, 15]), (u'X70', [1, 13]), (u'projectCode_2508', [1, 14]), (u'X85', [4, 15, 14, 11, 13]), (u'X87', [1, 10]), (u'X63', [1, 12]), (u'X86', [1, 15]), (u'X84', [1, 10]), (u'projectCode_541', [1, 13]), (u'X83', [1, 5]), (u'X78', [1, 6]), (u'X90', [1, 11]), (u'projectCode_1553', [2, 15, 14]), (u'projectCode_363', [1, 9]), (u'X77', [1, 11]), (u'X65', [1, 12]), (u'X88', [1, 15])]), None), ([0.28850338164543832, 0.35792623190755724, 0.618099895921115, 0.969129360065916, 0.2670704317763141, 0.7329295682236859, 0.030870639934084045, 0.004833836858006042, 0.27342317107022984, 0.0, 0.030870639934084045, 0.030870639934084045, 20.580254788029322, 0.008408155899300574], 'SVM (linear)', 'Logistic regression', OrderedDict([(u'projectCode_3104', [5, 1, 3, 1, 4, 5]), (u'projectCode_4086', [5, 2, 2, 5, 3, 3]), (u'projectCode_743', [5, 3, 4, 2, 2, 2]), (u'projectCode_748', [5, 4, 1, 6, 8, 4]), (u'projectCode_3279', [3, 5, 5, 9]), (u'projectCode_473', [5, 6, 6, 4, 7, 6]), (u'projectCode_4120', [5, 7, 13, 12, 9, 13]), (u'projectCode_2766', [5, 8, 11, 8, 10, 8]), (u'projectCode_2370', [5, 9, 8, 3, 1, 1]), (u'projectCode_27', [5, 10, 7, 14, 12, 7]), (u'projectCode_300', [5, 11, 9, 7, 14, 10]), (u'X74', [2, 12, 15]), (u'X70', [1, 13]), (u'projectCode_2508', [1, 14]), (u'X85', [4, 15, 14, 11, 13]), (u'X87', [1, 10]), (u'X63', [1, 12]), (u'X86', [1, 15]), (u'X84', [1, 10]), (u'projectCode_541', [1, 13]), (u'X83', [1, 5]), (u'X78', [1, 6]), (u'X90', [1, 11]), (u'projectCode_1553', [2, 15, 14]), (u'projectCode_363', [1, 9]), (u'X77', [1, 11]), (u'X65', [1, 12]), (u'X88', [1, 15])]), None), ([0.097591343494090529, 0.26152045386213973, 0.5148099895158719, 0.9981818181818183, 0.03143816084992555, 0.9685618391500744, 0.0018181818181818182, 0.0, 0.028258510611451793, 0.0, 0.0018181818181818182, 0.0018181818181818182, 9.804602340079807, 0.0032191318444288186], 'SVM (polynomial)', 'Logistic regression', OrderedDict([(u'projectCode_3104', [5, 1, 3, 1, 4, 5]), (u'projectCode_4086', [5, 2, 2, 5, 3, 3]), (u'projectCode_743', [5, 3, 4, 2, 2, 2]), (u'projectCode_748', [5, 4, 1, 6, 8, 4]), (u'projectCode_3279', [3, 5, 5, 9]), (u'projectCode_473', [5, 6, 6, 4, 7, 6]), (u'projectCode_4120', [5, 7, 13, 12, 9, 13]), (u'projectCode_2766', [5, 8, 11, 8, 10, 8]), (u'projectCode_2370', [5, 9, 8, 3, 1, 1]), (u'projectCode_27', [5, 10, 7, 14, 12, 7]), (u'projectCode_300', [5, 11, 9, 7, 14, 10]), (u'X74', [2, 12, 15]), (u'X70', [1, 13]), (u'projectCode_2508', [1, 14]), (u'X85', [4, 15, 14, 11, 13]), (u'X87', [1, 10]), (u'X63', [1, 12]), (u'X86', [1, 15]), (u'X84', [1, 10]), (u'projectCode_541', [1, 13]), (u'X83', [1, 5]), (u'X78', [1, 6]), (u'X90', [1, 11]), (u'projectCode_1553', [2, 15, 14]), (u'projectCode_363', [1, 9]), (u'X77', [1, 11]), (u'X65', [1, 12]), (u'X88', [1, 15])]), None)], 'Logistic regression'), ('Decision Tree', [([0.32046039071396276, 0.32686719607097492, 0.6660043340014905, 0.629557813787421, 0.7024508542155601, 0.2975491457844399, 0.37044218621257896, 0.2669632884738625, 0.28581724581724577, 0.030486789310318722, 0.07324361439165064, 0.07324361439165064, 6.543257909564527, 0.013214731497112648], 'AdaBoost', 'Decision Tree', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Agriculture and Food Security', [5, 3, 5, 4, 4, 6]), (u'X85', [5, 4, 3, 3, 3, 3]), (u'projectCode_748', [5, 5, 4, 6, 7, 4]), (u'projectCode_25', [3, 6, 7, 10]), (u"sector_Gender Equality and Women's Empowerment", [4, 7, 8, 5, 5]), (u'X67', [1, 8]), (u'sector_Emergency Response', [4, 9, 9, 9, 9]), (u'projectCode_3104', [3, 10, 13, 11]), (u'projectCode_4086', [3, 11, 11, 12]), (u'X63', [3, 12, 14, 12]), (u'X70', [2, 13, 9]), (u'X84', [3, 14, 13, 14]), (u'X88', [3, 15, 12, 14]), (u'X58', [1, 6]), (u'X2', [4, 10, 8, 13, 15]), (u'X11', [1, 15]), (u'X64', [3, 7, 8, 8]), (u'X71', [1, 10]), (u'X9', [1, 15]), (u'X78', [1, 6]), (u'X61', [1, 11]), (u'X89', [2, 15, 7]), (u'sector_Health', [1, 5]), (u'projectCode_2914', [1, 10]), (u'projectCode_1779', [1, 11]), (u'projectCode_1553', [1, 12]), (u'projectCode_27', [1, 13]), (u'X31', [1, 14])]), None), ([0.36339927068064115, 0.40350583571986337, 0.6725738219553752, 0.510945710885288, 0.8342019330254624, 0.16579806697453756, 0.48905428911471205, 0.40739174219536756, 0.22803997274585508, 0.06478512125570948, 0.021794378833653757, 0.021794378833653757, 19.248619820194016, 0.012470912943791287], 'Artificial neural network', 'Decision Tree', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Agriculture and Food Security', [5, 3, 5, 4, 4, 6]), (u'X85', [5, 4, 3, 3, 3, 3]), (u'projectCode_748', [5, 5, 4, 6, 7, 4]), (u'projectCode_25', [3, 6, 7, 10]), (u"sector_Gender Equality and Women's Empowerment", [4, 7, 8, 5, 5]), (u'X67', [1, 8]), (u'sector_Emergency Response', [4, 9, 9, 9, 9]), (u'projectCode_3104', [3, 10, 13, 11]), (u'projectCode_4086', [3, 11, 11, 12]), (u'X63', [3, 12, 14, 12]), (u'X70', [2, 13, 9]), (u'X84', [3, 14, 13, 14]), (u'X88', [3, 15, 12, 14]), (u'X58', [1, 6]), (u'X2', [4, 10, 8, 13, 15]), (u'X11', [1, 15]), (u'X64', [3, 7, 8, 8]), (u'X71', [1, 10]), (u'X9', [1, 15]), (u'X78', [1, 6]), (u'X61', [1, 11]), (u'X89', [2, 15, 7]), (u'sector_Health', [1, 5]), (u'projectCode_2914', [1, 10]), (u'projectCode_1779', [1, 11]), (u'projectCode_1553', [1, 12]), (u'projectCode_27', [1, 13]), (u'X31', [1, 14])]), None), ([0.30408020549110321, 0.40535704558284086, 0.6576746667896481, 0.622748329213586, 0.6926010043657103, 0.30739899563428974, 0.377251670786414, 0.3886368213860661, 0.2356519544754839, 0.06604890604890605, 0.01755927858646892, 0.01755927858646892, 0.07460381617565837, 0.024725985357652896], 'Bernoulli Naive Bayes', 'Decision Tree', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Agriculture and Food Security', [5, 3, 5, 4, 4, 6]), (u'X85', [5, 4, 3, 3, 3, 3]), (u'projectCode_748', [5, 5, 4, 6, 7, 4]), (u'projectCode_25', [3, 6, 7, 10]), (u"sector_Gender Equality and Women's Empowerment", [4, 7, 8, 5, 5]), (u'X67', [1, 8]), (u'sector_Emergency Response', [4, 9, 9, 9, 9]), (u'projectCode_3104', [3, 10, 13, 11]), (u'projectCode_4086', [3, 11, 11, 12]), (u'X63', [3, 12, 14, 12]), (u'X70', [2, 13, 9]), (u'X84', [3, 14, 13, 14]), (u'X88', [3, 15, 12, 14]), (u'X58', [1, 6]), (u'X2', [4, 10, 8, 13, 15]), (u'X11', [1, 15]), (u'X64', [3, 7, 8, 8]), (u'X71', [1, 10]), (u'X9', [1, 15]), (u'X78', [1, 6]), (u'X61', [1, 11]), (u'X89', [2, 15, 7]), (u'sector_Health', [1, 5]), (u'projectCode_2914', [1, 10]), (u'projectCode_1779', [1, 11]), (u'projectCode_1553', [1, 12]), (u'projectCode_27', [1, 13]), (u'X31', [1, 14])]), None), ([0.31578443208364987, 0.51002145077497607, 0.6651965800535198, 0.6622411425432574, 0.6681520175637823, 0.33184798243621777, 0.33775885745674267, 0.4316231804449327, 0.3972887172887173, 0.10512276982865218, 0.12166071592053465, 0.12166071592053465, 0.09029027772034001, 0.018256596077468948], 'Decision Tree', 'Decision Tree', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Agriculture and Food Security', [5, 3, 5, 4, 4, 6]), (u'X85', [5, 4, 3, 3, 3, 3]), (u'projectCode_748', [5, 5, 4, 6, 7, 4]), (u'projectCode_25', [3, 6, 7, 10]), (u"sector_Gender Equality and Women's Empowerment", [4, 7, 8, 5, 5]), (u'X67', [1, 8]), (u'sector_Emergency Response', [4, 9, 9, 9, 9]), (u'projectCode_3104', [3, 10, 13, 11]), (u'projectCode_4086', [3, 11, 11, 12]), (u'X63', [3, 12, 14, 12]), (u'X70', [2, 13, 9]), (u'X84', [3, 14, 13, 14]), (u'X88', [3, 15, 12, 14]), (u'X58', [1, 6]), (u'X2', [4, 10, 8, 13, 15]), (u'X11', [1, 15]), (u'X64', [3, 7, 8, 8]), (u'X71', [1, 10]), (u'X9', [1, 15]), (u'X78', [1, 6]), (u'X61', [1, 11]), (u'X89', [2, 15, 7]), (u'sector_Health', [1, 5]), (u'projectCode_2914', [1, 10]), (u'projectCode_1779', [1, 11]), (u'projectCode_1553', [1, 12]), (u'projectCode_27', [1, 13]), (u'X31', [1, 14])]), None), ([0.36539587728402179, 0.42696545507287181, 0.6743106923309519, 0.5176581525222008, 0.8309632321397027, 0.16903676786029725, 0.48234184747779907, 0.40739906619060695, 0.25566154389683804, 0.07240568299391828, 0.033294882358326464, 0.033294882358326464, 0.8896689289068169, 0.008515272252780202], 'Extreme Learning Machine', 'Decision Tree', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Agriculture and Food Security', [5, 3, 5, 4, 4, 6]), (u'X85', [5, 4, 3, 3, 3, 3]), (u'projectCode_748', [5, 5, 4, 6, 7, 4]), (u'projectCode_25', [3, 6, 7, 10]), (u"sector_Gender Equality and Women's Empowerment", [4, 7, 8, 5, 5]), (u'X67', [1, 8]), (u'sector_Emergency Response', [4, 9, 9, 9, 9]), (u'projectCode_3104', [3, 10, 13, 11]), (u'projectCode_4086', [3, 11, 11, 12]), (u'X63', [3, 12, 14, 12]), (u'X70', [2, 13, 9]), (u'X84', [3, 14, 13, 14]), (u'X88', [3, 15, 12, 14]), (u'X58', [1, 6]), (u'X2', [4, 10, 8, 13, 15]), (u'X11', [1, 15]), (u'X64', [3, 7, 8, 8]), (u'X71', [1, 10]), (u'X9', [1, 15]), (u'X78', [1, 6]), (u'X61', [1, 11]), (u'X89', [2, 15, 7]), (u'sector_Health', [1, 5]), (u'projectCode_2914', [1, 10]), (u'projectCode_1779', [1, 11]), (u'projectCode_1553', [1, 12]), (u'projectCode_27', [1, 13]), (u'X31', [1, 14])]), None), ([0.3131856731866165, 0.52232046982589919, 0.6308048346630185, 0.9757868717385334, 0.2858227975875035, 0.7141772024124965, 0.024213128261466633, 0.9757868717385334, 0.2858227975875035, 0.7135422817775758, 0.024213128261466633, 0.024213128261466633, 0.01112475183327355, 0.01434466121326243], 'Gaussian Naive Bayes', 'Decision Tree', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Agriculture and Food Security', [5, 3, 5, 4, 4, 6]), (u'X85', [5, 4, 3, 3, 3, 3]), (u'projectCode_748', [5, 5, 4, 6, 7, 4]), (u'projectCode_25', [3, 6, 7, 10]), (u"sector_Gender Equality and Women's Empowerment", [4, 7, 8, 5, 5]), (u'X67', [1, 8]), (u'sector_Emergency Response', [4, 9, 9, 9, 9]), (u'projectCode_3104', [3, 10, 13, 11]), (u'projectCode_4086', [3, 11, 11, 12]), (u'X63', [3, 12, 14, 12]), (u'X70', [2, 13, 9]), (u'X84', [3, 14, 13, 14]), (u'X88', [3, 15, 12, 14]), (u'X58', [1, 6]), (u'X2', [4, 10, 8, 13, 15]), (u'X11', [1, 15]), (u'X64', [3, 7, 8, 8]), (u'X71', [1, 10]), (u'X9', [1, 15]), (u'X78', [1, 6]), (u'X61', [1, 11]), (u'X89', [2, 15, 7]), (u'sector_Health', [1, 5]), (u'projectCode_2914', [1, 10]), (u'projectCode_1779', [1, 11]), (u'projectCode_1553', [1, 12]), (u'projectCode_27', [1, 13]), (u'X31', [1, 14])]), None), ([0.29444746264950661, 0.50711935013538856, 0.6457722186885151, 0.5218126888217522, 0.769731748555278, 0.23026825144472202, 0.47818731117824775, 0.3463114528975556, 0.5366684331390214, 0.09213919802155097, 0.2632555158839147, 0.2632555158839147, 0.19430462452679542, 0.009280749783682795], 'K-nearest neighbours', 'Decision Tree', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Agriculture and Food Security', [5, 3, 5, 4, 4, 6]), (u'X85', [5, 4, 3, 3, 3, 3]), (u'projectCode_748', [5, 5, 4, 6, 7, 4]), (u'projectCode_25', [3, 6, 7, 10]), (u"sector_Gender Equality and Women's Empowerment", [4, 7, 8, 5, 5]), (u'X67', [1, 8]), (u'sector_Emergency Response', [4, 9, 9, 9, 9]), (u'projectCode_3104', [3, 10, 13, 11]), (u'projectCode_4086', [3, 11, 11, 12]), (u'X63', [3, 12, 14, 12]), (u'X70', [2, 13, 9]), (u'X84', [3, 14, 13, 14]), (u'X88', [3, 15, 12, 14]), (u'X58', [1, 6]), (u'X2', [4, 10, 8, 13, 15]), (u'X11', [1, 15]), (u'X64', [3, 7, 8, 8]), (u'X71', [1, 10]), (u'X9', [1, 15]), (u'X78', [1, 6]), (u'X61', [1, 11]), (u'X89', [2, 15, 7]), (u'sector_Health', [1, 5]), (u'projectCode_2914', [1, 10]), (u'projectCode_1779', [1, 11]), (u'projectCode_1553', [1, 12]), (u'projectCode_27', [1, 13]), (u'X31', [1, 14])]), None), ([0.36940883659548424, 0.37809563411067604, 0.6763038007946486, 0.5206884555525039, 0.8319191460367931, 0.1680808539632069, 0.479311544447496, 0.43039458024352284, 0.18452973982385745, 0.07843641961289019, 0.01634898837315756, 0.01634898837315756, 0.16779496938082092, 0.008791730129834236], 'Logistic regression', 'Decision Tree', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Agriculture and Food Security', [5, 3, 5, 4, 4, 6]), (u'X85', [5, 4, 3, 3, 3, 3]), (u'projectCode_748', [5, 5, 4, 6, 7, 4]), (u'projectCode_25', [3, 6, 7, 10]), (u"sector_Gender Equality and Women's Empowerment", [4, 7, 8, 5, 5]), (u'X67', [1, 8]), (u'sector_Emergency Response', [4, 9, 9, 9, 9]), (u'projectCode_3104', [3, 10, 13, 11]), (u'projectCode_4086', [3, 11, 11, 12]), (u'X63', [3, 12, 14, 12]), (u'X70', [2, 13, 9]), (u'X84', [3, 14, 13, 14]), (u'X88', [3, 15, 12, 14]), (u'X58', [1, 6]), (u'X2', [4, 10, 8, 13, 15]), (u'X11', [1, 15]), (u'X64', [3, 7, 8, 8]), (u'X71', [1, 10]), (u'X9', [1, 15]), (u'X78', [1, 6]), (u'X61', [1, 11]), (u'X89', [2, 15, 7]), (u'sector_Health', [1, 5]), (u'projectCode_2914', [1, 10]), (u'projectCode_1779', [1, 11]), (u'projectCode_1553', [1, 12]), (u'projectCode_27', [1, 13]), (u'X31', [1, 14])]), None), ([0.3226366260533382, 0.48079881876710251, 0.6685632863862827, 0.6610345143275657, 0.6760920584449996, 0.32390794155500036, 0.33896548567243434, 0.42253776435045315, 0.3750564009387539, 0.09940495116965706, 0.09200402819738167, 0.09200402819738167, 4.955949858623823, 0.02037497237094698], 'Random forest', 'Decision Tree', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Agriculture and Food Security', [5, 3, 5, 4, 4, 6]), (u'X85', [5, 4, 3, 3, 3, 3]), (u'projectCode_748', [5, 5, 4, 6, 7, 4]), (u'projectCode_25', [3, 6, 7, 10]), (u"sector_Gender Equality and Women's Empowerment", [4, 7, 8, 5, 5]), (u'X67', [1, 8]), (u'sector_Emergency Response', [4, 9, 9, 9, 9]), (u'projectCode_3104', [3, 10, 13, 11]), (u'projectCode_4086', [3, 11, 11, 12]), (u'X63', [3, 12, 14, 12]), (u'X70', [2, 13, 9]), (u'X84', [3, 14, 13, 14]), (u'X88', [3, 15, 12, 14]), (u'X58', [1, 6]), (u'X2', [4, 10, 8, 13, 15]), (u'X11', [1, 15]), (u'X64', [3, 7, 8, 8]), (u'X71', [1, 10]), (u'X9', [1, 15]), (u'X78', [1, 6]), (u'X61', [1, 11]), (u'X89', [2, 15, 7]), (u'sector_Health', [1, 5]), (u'projectCode_2914', [1, 10]), (u'projectCode_1779', [1, 11]), (u'projectCode_1553', [1, 12]), (u'projectCode_27', [1, 13]), (u'X31', [1, 14])]), None), ([0.34525000851733018, 0.37092940018055431, 0.6658333664109389, 0.5134175592785865, 0.8182491735432912, 0.18175082645670879, 0.4865824407214136, 0.3509933168543441, 0.1296696696696697, 0.0746031746031746, 0.0357557447587659, 0.0357557447587659, 11.318343464261124, 0.009658001913572675], 'SVM (RDF)', 'Decision Tree', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Agriculture and Food Security', [5, 3, 5, 4, 4, 6]), (u'X85', [5, 4, 3, 3, 3, 3]), (u'projectCode_748', [5, 5, 4, 6, 7, 4]), (u'projectCode_25', [3, 6, 7, 10]), (u"sector_Gender Equality and Women's Empowerment", [4, 7, 8, 5, 5]), (u'X67', [1, 8]), (u'sector_Emergency Response', [4, 9, 9, 9, 9]), (u'projectCode_3104', [3, 10, 13, 11]), (u'projectCode_4086', [3, 11, 11, 12]), (u'X63', [3, 12, 14, 12]), (u'X70', [2, 13, 9]), (u'X84', [3, 14, 13, 14]), (u'X88', [3, 15, 12, 14]), (u'X58', [1, 6]), (u'X2', [4, 10, 8, 13, 15]), (u'X11', [1, 15]), (u'X64', [3, 7, 8, 8]), (u'X71', [1, 10]), (u'X9', [1, 15]), (u'X78', [1, 6]), (u'X61', [1, 11]), (u'X89', [2, 15, 7]), (u'sector_Health', [1, 5]), (u'projectCode_2914', [1, 10]), (u'projectCode_1779', [1, 11]), (u'projectCode_1553', [1, 12]), (u'projectCode_27', [1, 13]), (u'X31', [1, 14])]), None), ([0.35535932830854733, 0.38938222985388404, 0.6688551726031733, 0.5067582166071591, 0.8309521285991874, 0.16904787140081257, 0.4932417833928408, 0.34130367115261373, 0.1766643954879249, 0.06825396825396826, 0.03757209557813788, 0.03757209557813788, 26.91151665679081, 0.009281355741340846], 'SVM (linear)', 'Decision Tree', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Agriculture and Food Security', [5, 3, 5, 4, 4, 6]), (u'X85', [5, 4, 3, 3, 3, 3]), (u'projectCode_748', [5, 5, 4, 6, 7, 4]), (u'projectCode_25', [3, 6, 7, 10]), (u"sector_Gender Equality and Women's Empowerment", [4, 7, 8, 5, 5]), (u'X67', [1, 8]), (u'sector_Emergency Response', [4, 9, 9, 9, 9]), (u'projectCode_3104', [3, 10, 13, 11]), (u'projectCode_4086', [3, 11, 11, 12]), (u'X63', [3, 12, 14, 12]), (u'X70', [2, 13, 9]), (u'X84', [3, 14, 13, 14]), (u'X88', [3, 15, 12, 14]), (u'X58', [1, 6]), (u'X2', [4, 10, 8, 13, 15]), (u'X11', [1, 15]), (u'X64', [3, 7, 8, 8]), (u'X71', [1, 10]), (u'X9', [1, 15]), (u'X78', [1, 6]), (u'X61', [1, 11]), (u'X89', [2, 15, 7]), (u'sector_Health', [1, 5]), (u'projectCode_2914', [1, 10]), (u'projectCode_1779', [1, 11]), (u'projectCode_1553', [1, 12]), (u'projectCode_27', [1, 13]), (u'X31', [1, 14])]), None), ([0.12502934768330856, 0.26975600955238871, 0.5272172676508913, 0.99091824590314, 0.06351628939864233, 0.9364837106013576, 0.009081754096859837, 0.005449052458115902, 0.041923940747470155, 0.0, 0.004842991852055297, 0.004842991852055297, 9.8880053779394, 0.004729744699667481], 'SVM (polynomial)', 'Decision Tree', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Agriculture and Food Security', [5, 3, 5, 4, 4, 6]), (u'X85', [5, 4, 3, 3, 3, 3]), (u'projectCode_748', [5, 5, 4, 6, 7, 4]), (u'projectCode_25', [3, 6, 7, 10]), (u"sector_Gender Equality and Women's Empowerment", [4, 7, 8, 5, 5]), (u'X67', [1, 8]), (u'sector_Emergency Response', [4, 9, 9, 9, 9]), (u'projectCode_3104', [3, 10, 13, 11]), (u'projectCode_4086', [3, 11, 11, 12]), (u'X63', [3, 12, 14, 12]), (u'X70', [2, 13, 9]), (u'X84', [3, 14, 13, 14]), (u'X88', [3, 15, 12, 14]), (u'X58', [1, 6]), (u'X2', [4, 10, 8, 13, 15]), (u'X11', [1, 15]), (u'X64', [3, 7, 8, 8]), (u'X71', [1, 10]), (u'X9', [1, 15]), (u'X78', [1, 6]), (u'X61', [1, 11]), (u'X89', [2, 15, 7]), (u'sector_Health', [1, 5]), (u'projectCode_2914', [1, 10]), (u'projectCode_1779', [1, 11]), (u'projectCode_1553', [1, 12]), (u'projectCode_27', [1, 13]), (u'X31', [1, 14])]), None)], 'Decision Tree'), ('Bernoulli Naive Bayes', [([0.16413986866911146, 0.26476676040791458, 0.5412875705198434, 0.993336995330953, 0.08923814570873394, 0.9107618542912661, 0.0066630046690469655, 0.0, 0.07811794988265576, 0.0, 0.0066630046690469655, 0.0066630046690469655, 3.873700831896228, 0.02860067905282706], 'AdaBoost', 'Bernoulli Naive Bayes', OrderedDict([(u'projectCode_3291', [1, 1]), (u'projectCode_1365', [3, 2, 10, 14]), (u'projectCode_3010', [2, 3, 3]), (u'projectCode_727', [3, 4, 13, 15]), (u'X90', [3, 5, 12, 3]), (u'projectCode_4077', [4, 6, 9, 4, 6]), (u'projectCode_3566', [2, 7, 12]), (u'projectCode_473', [2, 8, 15]), (u'projectCode_58', [4, 9, 11, 3, 8]), (u'X85', [2, 10, 8]), (u'projectCode_959', [3, 11, 7, 13]), (u'projectCode_1014', [2, 12, 5]), (u'projectCode_421', [2, 13, 14]), (u'projectCode_2370', [4, 14, 3, 2, 5]), (u'projectCode_2335', [3, 15, 9, 6]), (u'X87', [1, 1]), (u'projectCode_1674', [3, 2, 1, 9]), (u'projectCode_213', [3, 4, 5, 14]), (u'projectCode_3461', [1, 6]), (u'projectCode_3776', [4, 14, 6, 2, 10]), (u'projectCode_3640', [1, 15]), (u'projectCode_1556', [2, 7, 10]), (u'projectCode_1336', [2, 8, 15]), (u'projectCode_1555', [2, 10, 11]), (u'projectCode_320', [1, 11]), (u'projectCode_2264', [2, 12, 7]), (u'projectCode_371', [2, 13, 4]), (u'sector_Water, Sanitation, & Hygiene', [1, 1]), (u'projectCode_2759', [1, 4]), (u'projectCode_2058', [1, 8]), (u'projectCode_1539', [1, 12]), (u'projectCode_1456', [1, 13]), (u'projectCode_29', [1, 1]), (u'X88', [1, 2]), (u'projectCode_2745', [1, 5]), (u'projectCode_2756', [1, 7]), (u'projectCode_3911', [1, 9]), (u'projectCode_3571', [1, 11])]), None), ([0.16413986866911146, 0.27305148568165066, 0.5412875705198434, 0.993336995330953, 0.08923814570873394, 0.9107618542912661, 0.0066630046690469655, 0.0, 0.06478259772377419, 0.0, 0.0066630046690469655, 0.0066630046690469655, 15.612766931106169, 0.02860067905282706], 'Artificial neural network', 'Bernoulli Naive Bayes', OrderedDict([(u'projectCode_3291', [1, 1]), (u'projectCode_1365', [3, 2, 10, 14]), (u'projectCode_3010', [2, 3, 3]), (u'projectCode_727', [3, 4, 13, 15]), (u'X90', [3, 5, 12, 3]), (u'projectCode_4077', [4, 6, 9, 4, 6]), (u'projectCode_3566', [2, 7, 12]), (u'projectCode_473', [2, 8, 15]), (u'projectCode_58', [4, 9, 11, 3, 8]), (u'X85', [2, 10, 8]), (u'projectCode_959', [3, 11, 7, 13]), (u'projectCode_1014', [2, 12, 5]), (u'projectCode_421', [2, 13, 14]), (u'projectCode_2370', [4, 14, 3, 2, 5]), (u'projectCode_2335', [3, 15, 9, 6]), (u'X87', [1, 1]), (u'projectCode_1674', [3, 2, 1, 9]), (u'projectCode_213', [3, 4, 5, 14]), (u'projectCode_3461', [1, 6]), (u'projectCode_3776', [4, 14, 6, 2, 10]), (u'projectCode_3640', [1, 15]), (u'projectCode_1556', [2, 7, 10]), (u'projectCode_1336', [2, 8, 15]), (u'projectCode_1555', [2, 10, 11]), (u'projectCode_320', [1, 11]), (u'projectCode_2264', [2, 12, 7]), (u'projectCode_371', [2, 13, 4]), (u'sector_Water, Sanitation, & Hygiene', [1, 1]), (u'projectCode_2759', [1, 4]), (u'projectCode_2058', [1, 8]), (u'projectCode_1539', [1, 12]), (u'projectCode_1456', [1, 13]), (u'projectCode_29', [1, 1]), (u'X88', [1, 2]), (u'projectCode_2745', [1, 5]), (u'projectCode_2756', [1, 7]), (u'projectCode_3911', [1, 9]), (u'projectCode_3571', [1, 11])]), None), ([0.13736560936634973, 0.27165992320879673, 0.5304888726623221, 0.993336995330953, 0.06764074999369116, 0.9323592500063089, 0.0066630046690469655, 0.0, 0.0663709087238499, 0.0, 0.0042387622448045404, 0.0042387622448045404, 0.06214182413449976, 0.020326972801664834], 'Bernoulli Naive Bayes', 'Bernoulli Naive Bayes', OrderedDict([(u'projectCode_3291', [1, 1]), (u'projectCode_1365', [3, 2, 10, 14]), (u'projectCode_3010', [2, 3, 3]), (u'projectCode_727', [3, 4, 13, 15]), (u'X90', [3, 5, 12, 3]), (u'projectCode_4077', [4, 6, 9, 4, 6]), (u'projectCode_3566', [2, 7, 12]), (u'projectCode_473', [2, 8, 15]), (u'projectCode_58', [4, 9, 11, 3, 8]), (u'X85', [2, 10, 8]), (u'projectCode_959', [3, 11, 7, 13]), (u'projectCode_1014', [2, 12, 5]), (u'projectCode_421', [2, 13, 14]), (u'projectCode_2370', [4, 14, 3, 2, 5]), (u'projectCode_2335', [3, 15, 9, 6]), (u'X87', [1, 1]), (u'projectCode_1674', [3, 2, 1, 9]), (u'projectCode_213', [3, 4, 5, 14]), (u'projectCode_3461', [1, 6]), (u'projectCode_3776', [4, 14, 6, 2, 10]), (u'projectCode_3640', [1, 15]), (u'projectCode_1556', [2, 7, 10]), (u'projectCode_1336', [2, 8, 15]), (u'projectCode_1555', [2, 10, 11]), (u'projectCode_320', [1, 11]), (u'projectCode_2264', [2, 12, 7]), (u'projectCode_371', [2, 13, 4]), (u'sector_Water, Sanitation, & Hygiene', [1, 1]), (u'projectCode_2759', [1, 4]), (u'projectCode_2058', [1, 8]), (u'projectCode_1539', [1, 12]), (u'projectCode_1456', [1, 13]), (u'projectCode_29', [1, 1]), (u'X88', [1, 2]), (u'projectCode_2745', [1, 5]), (u'projectCode_2756', [1, 7]), (u'projectCode_3911', [1, 9]), (u'projectCode_3571', [1, 11])]), None), ([0.16413986866911146, 0.28768770305895042, 0.5412875705198434, 0.993336995330953, 0.08923814570873394, 0.9107618542912661, 0.0066630046690469655, 0.0, 0.08923814570873394, 0.0, 0.0066630046690469655, 0.0066630046690469655, 0.04733286987747218, 0.02860067905282706], 'Decision Tree', 'Bernoulli Naive Bayes', OrderedDict([(u'projectCode_3291', [1, 1]), (u'projectCode_1365', [3, 2, 10, 14]), (u'projectCode_3010', [2, 3, 3]), (u'projectCode_727', [3, 4, 13, 15]), (u'X90', [3, 5, 12, 3]), (u'projectCode_4077', [4, 6, 9, 4, 6]), (u'projectCode_3566', [2, 7, 12]), (u'projectCode_473', [2, 8, 15]), (u'projectCode_58', [4, 9, 11, 3, 8]), (u'X85', [2, 10, 8]), (u'projectCode_959', [3, 11, 7, 13]), (u'projectCode_1014', [2, 12, 5]), (u'projectCode_421', [2, 13, 14]), (u'projectCode_2370', [4, 14, 3, 2, 5]), (u'projectCode_2335', [3, 15, 9, 6]), (u'X87', [1, 1]), (u'projectCode_1674', [3, 2, 1, 9]), (u'projectCode_213', [3, 4, 5, 14]), (u'projectCode_3461', [1, 6]), (u'projectCode_3776', [4, 14, 6, 2, 10]), (u'projectCode_3640', [1, 15]), (u'projectCode_1556', [2, 7, 10]), (u'projectCode_1336', [2, 8, 15]), (u'projectCode_1555', [2, 10, 11]), (u'projectCode_320', [1, 11]), (u'projectCode_2264', [2, 12, 7]), (u'projectCode_371', [2, 13, 4]), (u'sector_Water, Sanitation, & Hygiene', [1, 1]), (u'projectCode_2759', [1, 4]), (u'projectCode_2058', [1, 8]), (u'projectCode_1539', [1, 12]), (u'projectCode_1456', [1, 13]), (u'projectCode_29', [1, 1]), (u'X88', [1, 2]), (u'projectCode_2745', [1, 5]), (u'projectCode_2756', [1, 7]), (u'projectCode_3911', [1, 9]), (u'projectCode_3571', [1, 11])]), None), ([0.15381515781487959, 0.27835967423594671, 0.5385045671734849, 0.9903121852970795, 0.08669694904989023, 0.9133030509501097, 0.009687814702920444, 0.0018145198205621166, 0.07875791758144698, 0.0015878062936886465, 0.009687814702920444, 0.009687814702920444, 2.2276166968476447, 0.026885721517621038], 'Extreme Learning Machine', 'Bernoulli Naive Bayes', OrderedDict([(u'projectCode_3291', [1, 1]), (u'projectCode_1365', [3, 2, 10, 14]), (u'projectCode_3010', [2, 3, 3]), (u'projectCode_727', [3, 4, 13, 15]), (u'X90', [3, 5, 12, 3]), (u'projectCode_4077', [4, 6, 9, 4, 6]), (u'projectCode_3566', [2, 7, 12]), (u'projectCode_473', [2, 8, 15]), (u'projectCode_58', [4, 9, 11, 3, 8]), (u'X85', [2, 10, 8]), (u'projectCode_959', [3, 11, 7, 13]), (u'projectCode_1014', [2, 12, 5]), (u'projectCode_421', [2, 13, 14]), (u'projectCode_2370', [4, 14, 3, 2, 5]), (u'projectCode_2335', [3, 15, 9, 6]), (u'X87', [1, 1]), (u'projectCode_1674', [3, 2, 1, 9]), (u'projectCode_213', [3, 4, 5, 14]), (u'projectCode_3461', [1, 6]), (u'projectCode_3776', [4, 14, 6, 2, 10]), (u'projectCode_3640', [1, 15]), (u'projectCode_1556', [2, 7, 10]), (u'projectCode_1336', [2, 8, 15]), (u'projectCode_1555', [2, 10, 11]), (u'projectCode_320', [1, 11]), (u'projectCode_2264', [2, 12, 7]), (u'projectCode_371', [2, 13, 4]), (u'sector_Water, Sanitation, & Hygiene', [1, 1]), (u'projectCode_2759', [1, 4]), (u'projectCode_2058', [1, 8]), (u'projectCode_1539', [1, 12]), (u'projectCode_1456', [1, 13]), (u'projectCode_29', [1, 1]), (u'X88', [1, 2]), (u'projectCode_2745', [1, 5]), (u'projectCode_2756', [1, 7]), (u'projectCode_3911', [1, 9]), (u'projectCode_3571', [1, 11])]), None), ([0.045577778102325626, -1.0, 0.5229614521937253, 0.3963672983612561, 0.6495556060261942, 0.3504443939738057, 0.6036327016387439, 0.3963672983612561, 0.24955560602619425, 0.3504443939738057, 0.20363270163874395, 0.20363270163874395, 0.011333639016987362, 0.029368401264746994], 'Gaussian Naive Bayes', 'Bernoulli Naive Bayes', OrderedDict([(u'projectCode_3291', [1, 1]), (u'projectCode_1365', [3, 2, 10, 14]), (u'projectCode_3010', [2, 3, 3]), (u'projectCode_727', [3, 4, 13, 15]), (u'X90', [3, 5, 12, 3]), (u'projectCode_4077', [4, 6, 9, 4, 6]), (u'projectCode_3566', [2, 7, 12]), (u'projectCode_473', [2, 8, 15]), (u'projectCode_58', [4, 9, 11, 3, 8]), (u'X85', [2, 10, 8]), (u'projectCode_959', [3, 11, 7, 13]), (u'projectCode_1014', [2, 12, 5]), (u'projectCode_421', [2, 13, 14]), (u'projectCode_2370', [4, 14, 3, 2, 5]), (u'projectCode_2335', [3, 15, 9, 6]), (u'X87', [1, 1]), (u'projectCode_1674', [3, 2, 1, 9]), (u'projectCode_213', [3, 4, 5, 14]), (u'projectCode_3461', [1, 6]), (u'projectCode_3776', [4, 14, 6, 2, 10]), (u'projectCode_3640', [1, 15]), (u'projectCode_1556', [2, 7, 10]), (u'projectCode_1336', [2, 8, 15]), (u'projectCode_1555', [2, 10, 11]), (u'projectCode_320', [1, 11]), (u'projectCode_2264', [2, 12, 7]), (u'projectCode_371', [2, 13, 4]), (u'sector_Water, Sanitation, & Hygiene', [1, 1]), (u'projectCode_2759', [1, 4]), (u'projectCode_2058', [1, 8]), (u'projectCode_1539', [1, 12]), (u'projectCode_1456', [1, 13]), (u'projectCode_29', [1, 1]), (u'X88', [1, 2]), (u'projectCode_2745', [1, 5]), (u'projectCode_2756', [1, 7]), (u'projectCode_3911', [1, 9]), (u'projectCode_3571', [1, 11])]), None), ([0.035808685051442662, 0.40574880233284738, 0.5182539682539683, 0.4, 0.6365079365079366, 0.3634920634920635, 0.6, 0.2, 0.4559048123754007, 0.1926984126984127, 0.4006060606060606, 0.4006060606060606, 0.23122030262681648, 0.028278926019927157], 'K-nearest neighbours', 'Bernoulli Naive Bayes', OrderedDict([(u'projectCode_3291', [1, 1]), (u'projectCode_1365', [3, 2, 10, 14]), (u'projectCode_3010', [2, 3, 3]), (u'projectCode_727', [3, 4, 13, 15]), (u'X90', [3, 5, 12, 3]), (u'projectCode_4077', [4, 6, 9, 4, 6]), (u'projectCode_3566', [2, 7, 12]), (u'projectCode_473', [2, 8, 15]), (u'projectCode_58', [4, 9, 11, 3, 8]), (u'X85', [2, 10, 8]), (u'projectCode_959', [3, 11, 7, 13]), (u'projectCode_1014', [2, 12, 5]), (u'projectCode_421', [2, 13, 14]), (u'projectCode_2370', [4, 14, 3, 2, 5]), (u'projectCode_2335', [3, 15, 9, 6]), (u'X87', [1, 1]), (u'projectCode_1674', [3, 2, 1, 9]), (u'projectCode_213', [3, 4, 5, 14]), (u'projectCode_3461', [1, 6]), (u'projectCode_3776', [4, 14, 6, 2, 10]), (u'projectCode_3640', [1, 15]), (u'projectCode_1556', [2, 7, 10]), (u'projectCode_1336', [2, 8, 15]), (u'projectCode_1555', [2, 10, 11]), (u'projectCode_320', [1, 11]), (u'projectCode_2264', [2, 12, 7]), (u'projectCode_371', [2, 13, 4]), (u'sector_Water, Sanitation, & Hygiene', [1, 1]), (u'projectCode_2759', [1, 4]), (u'projectCode_2058', [1, 8]), (u'projectCode_1539', [1, 12]), (u'projectCode_1456', [1, 13]), (u'projectCode_29', [1, 1]), (u'X88', [1, 2]), (u'projectCode_2745', [1, 5]), (u'projectCode_2756', [1, 7]), (u'projectCode_3911', [1, 9]), (u'projectCode_3571', [1, 11])]), None), ([0.16413986866911146, 0.26777879437566526, 0.5412875705198434, 0.993336995330953, 0.08923814570873394, 0.9107618542912661, 0.0066630046690469655, 0.0, 0.0492224998107351, 0.0, 0.0036345326375537856, 0.0036345326375537856, 0.1289805913016595, 0.02860067905282706], 'Logistic regression', 'Bernoulli Naive Bayes', OrderedDict([(u'projectCode_3291', [1, 1]), (u'projectCode_1365', [3, 2, 10, 14]), (u'projectCode_3010', [2, 3, 3]), (u'projectCode_727', [3, 4, 13, 15]), (u'X90', [3, 5, 12, 3]), (u'projectCode_4077', [4, 6, 9, 4, 6]), (u'projectCode_3566', [2, 7, 12]), (u'projectCode_473', [2, 8, 15]), (u'projectCode_58', [4, 9, 11, 3, 8]), (u'X85', [2, 10, 8]), (u'projectCode_959', [3, 11, 7, 13]), (u'projectCode_1014', [2, 12, 5]), (u'projectCode_421', [2, 13, 14]), (u'projectCode_2370', [4, 14, 3, 2, 5]), (u'projectCode_2335', [3, 15, 9, 6]), (u'X87', [1, 1]), (u'projectCode_1674', [3, 2, 1, 9]), (u'projectCode_213', [3, 4, 5, 14]), (u'projectCode_3461', [1, 6]), (u'projectCode_3776', [4, 14, 6, 2, 10]), (u'projectCode_3640', [1, 15]), (u'projectCode_1556', [2, 7, 10]), (u'projectCode_1336', [2, 8, 15]), (u'projectCode_1555', [2, 10, 11]), (u'projectCode_320', [1, 11]), (u'projectCode_2264', [2, 12, 7]), (u'projectCode_371', [2, 13, 4]), (u'sector_Water, Sanitation, & Hygiene', [1, 1]), (u'projectCode_2759', [1, 4]), (u'projectCode_2058', [1, 8]), (u'projectCode_1539', [1, 12]), (u'projectCode_1456', [1, 13]), (u'projectCode_29', [1, 1]), (u'X88', [1, 2]), (u'projectCode_2745', [1, 5]), (u'projectCode_2756', [1, 7]), (u'projectCode_3911', [1, 9]), (u'projectCode_3571', [1, 11])]), None), ([0.16413986866911146, 0.2870937505435644, 0.5412875705198434, 0.993336995330953, 0.08923814570873394, 0.9107618542912661, 0.0066630046690469655, 0.0, 0.08923814570873394, 0.0, 0.0066630046690469655, 0.0066630046690469655, 3.6471065351804315, 0.02860067905282706], 'Random forest', 'Bernoulli Naive Bayes', OrderedDict([(u'projectCode_3291', [1, 1]), (u'projectCode_1365', [3, 2, 10, 14]), (u'projectCode_3010', [2, 3, 3]), (u'projectCode_727', [3, 4, 13, 15]), (u'X90', [3, 5, 12, 3]), (u'projectCode_4077', [4, 6, 9, 4, 6]), (u'projectCode_3566', [2, 7, 12]), (u'projectCode_473', [2, 8, 15]), (u'projectCode_58', [4, 9, 11, 3, 8]), (u'X85', [2, 10, 8]), (u'projectCode_959', [3, 11, 7, 13]), (u'projectCode_1014', [2, 12, 5]), (u'projectCode_421', [2, 13, 14]), (u'projectCode_2370', [4, 14, 3, 2, 5]), (u'projectCode_2335', [3, 15, 9, 6]), (u'X87', [1, 1]), (u'projectCode_1674', [3, 2, 1, 9]), (u'projectCode_213', [3, 4, 5, 14]), (u'projectCode_3461', [1, 6]), (u'projectCode_3776', [4, 14, 6, 2, 10]), (u'projectCode_3640', [1, 15]), (u'projectCode_1556', [2, 7, 10]), (u'projectCode_1336', [2, 8, 15]), (u'projectCode_1555', [2, 10, 11]), (u'projectCode_320', [1, 11]), (u'projectCode_2264', [2, 12, 7]), (u'projectCode_371', [2, 13, 4]), (u'sector_Water, Sanitation, & Hygiene', [1, 1]), (u'projectCode_2759', [1, 4]), (u'projectCode_2058', [1, 8]), (u'projectCode_1539', [1, 12]), (u'projectCode_1456', [1, 13]), (u'projectCode_29', [1, 1]), (u'X88', [1, 2]), (u'projectCode_2745', [1, 5]), (u'projectCode_2756', [1, 7]), (u'projectCode_3911', [1, 9]), (u'projectCode_3571', [1, 11])]), None), ([0.12546317875131191, 0.2812198488363653, 0.5245411831852209, 0.9963672983612561, 0.05271506800918566, 0.9472849319908144, 0.003632701638743935, 0.0, 0.07621722562899033, 0.0, 0.007865970887118923, 0.007865970887118923, 9.979411632420135, 0.01399201466625601], 'SVM (RDF)', 'Bernoulli Naive Bayes', OrderedDict([(u'projectCode_3291', [1, 1]), (u'projectCode_1365', [3, 2, 10, 14]), (u'projectCode_3010', [2, 3, 3]), (u'projectCode_727', [3, 4, 13, 15]), (u'X90', [3, 5, 12, 3]), (u'projectCode_4077', [4, 6, 9, 4, 6]), (u'projectCode_3566', [2, 7, 12]), (u'projectCode_473', [2, 8, 15]), (u'projectCode_58', [4, 9, 11, 3, 8]), (u'X85', [2, 10, 8]), (u'projectCode_959', [3, 11, 7, 13]), (u'projectCode_1014', [2, 12, 5]), (u'projectCode_421', [2, 13, 14]), (u'projectCode_2370', [4, 14, 3, 2, 5]), (u'projectCode_2335', [3, 15, 9, 6]), (u'X87', [1, 1]), (u'projectCode_1674', [3, 2, 1, 9]), (u'projectCode_213', [3, 4, 5, 14]), (u'projectCode_3461', [1, 6]), (u'projectCode_3776', [4, 14, 6, 2, 10]), (u'projectCode_3640', [1, 15]), (u'projectCode_1556', [2, 7, 10]), (u'projectCode_1336', [2, 8, 15]), (u'projectCode_1555', [2, 10, 11]), (u'projectCode_320', [1, 11]), (u'projectCode_2264', [2, 12, 7]), (u'projectCode_371', [2, 13, 4]), (u'sector_Water, Sanitation, & Hygiene', [1, 1]), (u'projectCode_2759', [1, 4]), (u'projectCode_2058', [1, 8]), (u'projectCode_1539', [1, 12]), (u'projectCode_1456', [1, 13]), (u'projectCode_29', [1, 1]), (u'X88', [1, 2]), (u'projectCode_2745', [1, 5]), (u'projectCode_2756', [1, 7]), (u'projectCode_3911', [1, 9]), (u'projectCode_3571', [1, 11])]), None), ([0.12956020895100115, 0.28545656301280664, 0.5276307203924052, 0.993336995330953, 0.061924445453857224, 0.9380755545461428, 0.0066630046690469655, 0.0, 0.08923814570873394, 0.0, 0.0066630046690469655, 0.0066630046690469655, 22.597106127669313, 0.018005455660343134], 'SVM (linear)', 'Bernoulli Naive Bayes', OrderedDict([(u'projectCode_3291', [1, 1]), (u'projectCode_1365', [3, 2, 10, 14]), (u'projectCode_3010', [2, 3, 3]), (u'projectCode_727', [3, 4, 13, 15]), (u'X90', [3, 5, 12, 3]), (u'projectCode_4077', [4, 6, 9, 4, 6]), (u'projectCode_3566', [2, 7, 12]), (u'projectCode_473', [2, 8, 15]), (u'projectCode_58', [4, 9, 11, 3, 8]), (u'X85', [2, 10, 8]), (u'projectCode_959', [3, 11, 7, 13]), (u'projectCode_1014', [2, 12, 5]), (u'projectCode_421', [2, 13, 14]), (u'projectCode_2370', [4, 14, 3, 2, 5]), (u'projectCode_2335', [3, 15, 9, 6]), (u'X87', [1, 1]), (u'projectCode_1674', [3, 2, 1, 9]), (u'projectCode_213', [3, 4, 5, 14]), (u'projectCode_3461', [1, 6]), (u'projectCode_3776', [4, 14, 6, 2, 10]), (u'projectCode_3640', [1, 15]), (u'projectCode_1556', [2, 7, 10]), (u'projectCode_1336', [2, 8, 15]), (u'projectCode_1555', [2, 10, 11]), (u'projectCode_320', [1, 11]), (u'projectCode_2264', [2, 12, 7]), (u'projectCode_371', [2, 13, 4]), (u'sector_Water, Sanitation, & Hygiene', [1, 1]), (u'projectCode_2759', [1, 4]), (u'projectCode_2058', [1, 8]), (u'projectCode_1539', [1, 12]), (u'projectCode_1456', [1, 13]), (u'projectCode_29', [1, 1]), (u'X88', [1, 2]), (u'projectCode_2745', [1, 5]), (u'projectCode_2756', [1, 7]), (u'projectCode_3911', [1, 9]), (u'projectCode_3571', [1, 11])]), None), ([0.06482492480664237, 0.2519967517457623, 0.5068560233266115, 0.9987878787878788, 0.014924167865344335, 0.9850758321346558, 0.0012121212121212121, 0.0, 0.006032755444520151, 0.0, 0.0, 0.0, 10.687902021043874, 0.0040900379792579], 'SVM (polynomial)', 'Bernoulli Naive Bayes', OrderedDict([(u'projectCode_3291', [1, 1]), (u'projectCode_1365', [3, 2, 10, 14]), (u'projectCode_3010', [2, 3, 3]), (u'projectCode_727', [3, 4, 13, 15]), (u'X90', [3, 5, 12, 3]), (u'projectCode_4077', [4, 6, 9, 4, 6]), (u'projectCode_3566', [2, 7, 12]), (u'projectCode_473', [2, 8, 15]), (u'projectCode_58', [4, 9, 11, 3, 8]), (u'X85', [2, 10, 8]), (u'projectCode_959', [3, 11, 7, 13]), (u'projectCode_1014', [2, 12, 5]), (u'projectCode_421', [2, 13, 14]), (u'projectCode_2370', [4, 14, 3, 2, 5]), (u'projectCode_2335', [3, 15, 9, 6]), (u'X87', [1, 1]), (u'projectCode_1674', [3, 2, 1, 9]), (u'projectCode_213', [3, 4, 5, 14]), (u'projectCode_3461', [1, 6]), (u'projectCode_3776', [4, 14, 6, 2, 10]), (u'projectCode_3640', [1, 15]), (u'projectCode_1556', [2, 7, 10]), (u'projectCode_1336', [2, 8, 15]), (u'projectCode_1555', [2, 10, 11]), (u'projectCode_320', [1, 11]), (u'projectCode_2264', [2, 12, 7]), (u'projectCode_371', [2, 13, 4]), (u'sector_Water, Sanitation, & Hygiene', [1, 1]), (u'projectCode_2759', [1, 4]), (u'projectCode_2058', [1, 8]), (u'projectCode_1539', [1, 12]), (u'projectCode_1456', [1, 13]), (u'projectCode_29', [1, 1]), (u'X88', [1, 2]), (u'projectCode_2745', [1, 5]), (u'projectCode_2756', [1, 7]), (u'projectCode_3911', [1, 9]), (u'projectCode_3571', [1, 11])]), None)], 'Bernoulli Naive Bayes'), ('SVM (linear)', [([0.33131216198030222, 0.29883169765630668, 0.6415478126443117, 0.9776013915590955, 0.30549423372952783, 0.6945057662704721, 0.022398608440904515, 0.0157374347706674, 0.2492871022282787, 0.0006349206349206349, 0.013924745948915133, 0.013924745948915133, 5.362236940249518, 0.003834430863331175], 'AdaBoost', 'SVM (linear)', OrderedDict([(u'X70', [5, 1, 5, 5, 11, 6]), (u'X90', [5, 2, 2, 3, 4, 4]), (u'X85', [5, 3, 1, 1, 1, 2]), (u'projectCode_3988', [4, 4, 4, 4, 12]), (u'X74', [5, 5, 7, 9, 7, 13]), (u'X88', [5, 6, 8, 8, 8, 7]), (u'X67', [1, 7]), (u'projectCode_3461', [2, 8, 12]), (u'projectCode_2562', [4, 9, 10, 15, 10]), (u'X65', [4, 10, 11, 13, 14]), (u'projectCode_3776', [2, 11, 14]), (u'projectCode_2370', [3, 12, 15, 15]), (u'projectCode_1336', [1, 13]), (u'projectCode_743', [1, 14]), (u'X86', [5, 15, 13, 7, 13, 9]), (u'X87', [1, 3]), (u'X63', [1, 6]), (u'projectCode_4316', [4, 9, 6, 12, 15]), (u'projectCode_3432', [4, 12, 11, 6, 8]), (u'X84', [2, 2, 10]), (u'X79', [2, 10, 9]), (u'projectCode_2923', [1, 14]), (u'X78', [1, 2]), (u'X83', [1, 3]), (u'X58', [1, 5]), (u'X53', [1, 14]), (u'X69', [1, 1]), (u'X81', [1, 3]), (u'X77', [1, 5]), (u'X89', [1, 11])]), None), ([0.33197979912723535, 0.3506103067548173, 0.6415194573218387, 0.9788135127712166, 0.3042254018724607, 0.6957745981275393, 0.0211864872287833, 0.02422045225670603, 0.21943977591036418, 0.00031746031746031746, 0.01271262473679392, 0.01271262473679392, 113.79788414187063, 0.0045522325755366876], 'Artificial neural network', 'SVM (linear)', OrderedDict([(u'X70', [5, 1, 5, 5, 11, 6]), (u'X90', [5, 2, 2, 3, 4, 4]), (u'X85', [5, 3, 1, 1, 1, 2]), (u'projectCode_3988', [4, 4, 4, 4, 12]), (u'X74', [5, 5, 7, 9, 7, 13]), (u'X88', [5, 6, 8, 8, 8, 7]), (u'X67', [1, 7]), (u'projectCode_3461', [2, 8, 12]), (u'projectCode_2562', [4, 9, 10, 15, 10]), (u'X65', [4, 10, 11, 13, 14]), (u'projectCode_3776', [2, 11, 14]), (u'projectCode_2370', [3, 12, 15, 15]), (u'projectCode_1336', [1, 13]), (u'projectCode_743', [1, 14]), (u'X86', [5, 15, 13, 7, 13, 9]), (u'X87', [1, 3]), (u'X63', [1, 6]), (u'projectCode_4316', [4, 9, 6, 12, 15]), (u'projectCode_3432', [4, 12, 11, 6, 8]), (u'X84', [2, 2, 10]), (u'X79', [2, 10, 9]), (u'projectCode_2923', [1, 14]), (u'X78', [1, 2]), (u'X83', [1, 3]), (u'X58', [1, 5]), (u'X53', [1, 14]), (u'X69', [1, 1]), (u'X81', [1, 3]), (u'X77', [1, 5]), (u'X89', [1, 11])]), None), ([0.28888309539697515, 0.35189476170437228, 0.6123287167253757, 0.9842607342305227, 0.24039669922022866, 0.7596033007797713, 0.01573926576947725, 0.02422045225670603, 0.24039669922022866, 0.00031746031746031746, 0.01573926576947725, 0.01573926576947725, 0.012518741738446693, 0.006760785201941446], 'Bernoulli Naive Bayes', 'SVM (linear)', OrderedDict([(u'X70', [5, 1, 5, 5, 11, 6]), (u'X90', [5, 2, 2, 3, 4, 4]), (u'X85', [5, 3, 1, 1, 1, 2]), (u'projectCode_3988', [4, 4, 4, 4, 12]), (u'X74', [5, 5, 7, 9, 7, 13]), (u'X88', [5, 6, 8, 8, 8, 7]), (u'X67', [1, 7]), (u'projectCode_3461', [2, 8, 12]), (u'projectCode_2562', [4, 9, 10, 15, 10]), (u'X65', [4, 10, 11, 13, 14]), (u'projectCode_3776', [2, 11, 14]), (u'projectCode_2370', [3, 12, 15, 15]), (u'projectCode_1336', [1, 13]), (u'projectCode_743', [1, 14]), (u'X86', [5, 15, 13, 7, 13, 9]), (u'X87', [1, 3]), (u'X63', [1, 6]), (u'projectCode_4316', [4, 9, 6, 12, 15]), (u'projectCode_3432', [4, 12, 11, 6, 8]), (u'X84', [2, 2, 10]), (u'X79', [2, 10, 9]), (u'projectCode_2923', [1, 14]), (u'X78', [1, 2]), (u'X83', [1, 3]), (u'X58', [1, 5]), (u'X53', [1, 14]), (u'X69', [1, 1]), (u'X81', [1, 3]), (u'X77', [1, 5]), (u'X89', [1, 11])]), None), ([0.3308132678053084, 0.38793017149238851, 0.6412300999736578, 0.9776013915590955, 0.30485880838822016, 0.6951411916117799, 0.022398608440904515, 0.02422045225670603, 0.30104928457869634, 0.00349307290483761, 0.020582257621532547, 0.020582257621532547, 0.05713336148681629, 0.0042164941925275454], 'Decision Tree', 'SVM (linear)', OrderedDict([(u'X70', [5, 1, 5, 5, 11, 6]), (u'X90', [5, 2, 2, 3, 4, 4]), (u'X85', [5, 3, 1, 1, 1, 2]), (u'projectCode_3988', [4, 4, 4, 4, 12]), (u'X74', [5, 5, 7, 9, 7, 13]), (u'X88', [5, 6, 8, 8, 8, 7]), (u'X67', [1, 7]), (u'projectCode_3461', [2, 8, 12]), (u'projectCode_2562', [4, 9, 10, 15, 10]), (u'X65', [4, 10, 11, 13, 14]), (u'projectCode_3776', [2, 11, 14]), (u'projectCode_2370', [3, 12, 15, 15]), (u'projectCode_1336', [1, 13]), (u'projectCode_743', [1, 14]), (u'X86', [5, 15, 13, 7, 13, 9]), (u'X87', [1, 3]), (u'X63', [1, 6]), (u'projectCode_4316', [4, 9, 6, 12, 15]), (u'projectCode_3432', [4, 12, 11, 6, 8]), (u'X84', [2, 2, 10]), (u'X79', [2, 10, 9]), (u'projectCode_2923', [1, 14]), (u'X78', [1, 2]), (u'X83', [1, 3]), (u'X58', [1, 5]), (u'X53', [1, 14]), (u'X69', [1, 1]), (u'X81', [1, 3]), (u'X77', [1, 5]), (u'X89', [1, 11])]), None), ([0.3133052972049013, 0.32664057220185155, 0.6299425480978706, 0.978207452165156, 0.2816776440305852, 0.7183223559694148, 0.021792547834843905, 0.024826512862766638, 0.18958084134554723, 0.018735710500416385, 0.012102902133113614, 0.012102902133113614, 1.0151998630762744, 0.00555293991461271], 'Extreme Learning Machine', 'SVM (linear)', OrderedDict([(u'X70', [5, 1, 5, 5, 11, 6]), (u'X90', [5, 2, 2, 3, 4, 4]), (u'X85', [5, 3, 1, 1, 1, 2]), (u'projectCode_3988', [4, 4, 4, 4, 12]), (u'X74', [5, 5, 7, 9, 7, 13]), (u'X88', [5, 6, 8, 8, 8, 7]), (u'X67', [1, 7]), (u'projectCode_3461', [2, 8, 12]), (u'projectCode_2562', [4, 9, 10, 15, 10]), (u'X65', [4, 10, 11, 13, 14]), (u'projectCode_3776', [2, 11, 14]), (u'projectCode_2370', [3, 12, 15, 15]), (u'projectCode_1336', [1, 13]), (u'projectCode_743', [1, 14]), (u'X86', [5, 15, 13, 7, 13, 9]), (u'X87', [1, 3]), (u'X63', [1, 6]), (u'projectCode_4316', [4, 9, 6, 12, 15]), (u'projectCode_3432', [4, 12, 11, 6, 8]), (u'X84', [2, 2, 10]), (u'X79', [2, 10, 9]), (u'projectCode_2923', [1, 14]), (u'X78', [1, 2]), (u'X83', [1, 3]), (u'X58', [1, 5]), (u'X53', [1, 14]), (u'X69', [1, 1]), (u'X81', [1, 3]), (u'X77', [1, 5]), (u'X89', [1, 11])]), None), ([0.32282863883526663, 0.52822328681524677, 0.6354687389181791, 0.9794195733772773, 0.2915179044590809, 0.708482095540919, 0.020580426622722695, 0.9794195733772773, 0.2915179044590809, 0.708482095540919, 0.020580426622722695, 0.020580426622722695, 0.008412237045931192, 0.0037847877667633186], 'Gaussian Naive Bayes', 'SVM (linear)', OrderedDict([(u'X70', [5, 1, 5, 5, 11, 6]), (u'X90', [5, 2, 2, 3, 4, 4]), (u'X85', [5, 3, 1, 1, 1, 2]), (u'projectCode_3988', [4, 4, 4, 4, 12]), (u'X74', [5, 5, 7, 9, 7, 13]), (u'X88', [5, 6, 8, 8, 8, 7]), (u'X67', [1, 7]), (u'projectCode_3461', [2, 8, 12]), (u'projectCode_2562', [4, 9, 10, 15, 10]), (u'X65', [4, 10, 11, 13, 14]), (u'projectCode_3776', [2, 11, 14]), (u'projectCode_2370', [3, 12, 15, 15]), (u'projectCode_1336', [1, 13]), (u'projectCode_743', [1, 14]), (u'X86', [5, 15, 13, 7, 13, 9]), (u'X87', [1, 3]), (u'X63', [1, 6]), (u'projectCode_4316', [4, 9, 6, 12, 15]), (u'projectCode_3432', [4, 12, 11, 6, 8]), (u'X84', [2, 2, 10]), (u'X79', [2, 10, 9]), (u'projectCode_2923', [1, 14]), (u'X78', [1, 2]), (u'X83', [1, 3]), (u'X58', [1, 5]), (u'X53', [1, 14]), (u'X69', [1, 1]), (u'X81', [1, 3]), (u'X77', [1, 5]), (u'X89', [1, 11])]), None), ([0.094344884811979321, 0.43027702561966263, 0.5372184512365781, 0.21634166437791813, 0.858095238095238, 0.14190476190476192, 0.7836583356220819, 0.02422045225670603, 0.4407328336740102, 0.00031746031746031746, 0.2102773963196924, 0.2102773963196924, 0.15235814613228627, 0.0515760882664497], 'K-nearest neighbours', 'SVM (linear)', OrderedDict([(u'X70', [5, 1, 5, 5, 11, 6]), (u'X90', [5, 2, 2, 3, 4, 4]), (u'X85', [5, 3, 1, 1, 1, 2]), (u'projectCode_3988', [4, 4, 4, 4, 12]), (u'X74', [5, 5, 7, 9, 7, 13]), (u'X88', [5, 6, 8, 8, 8, 7]), (u'X67', [1, 7]), (u'projectCode_3461', [2, 8, 12]), (u'projectCode_2562', [4, 9, 10, 15, 10]), (u'X65', [4, 10, 11, 13, 14]), (u'projectCode_3776', [2, 11, 14]), (u'projectCode_2370', [3, 12, 15, 15]), (u'projectCode_1336', [1, 13]), (u'projectCode_743', [1, 14]), (u'X86', [5, 15, 13, 7, 13, 9]), (u'X87', [1, 3]), (u'X63', [1, 6]), (u'projectCode_4316', [4, 9, 6, 12, 15]), (u'projectCode_3432', [4, 12, 11, 6, 8]), (u'X84', [2, 2, 10]), (u'X79', [2, 10, 9]), (u'projectCode_2923', [1, 14]), (u'X78', [1, 2]), (u'X83', [1, 3]), (u'X58', [1, 5]), (u'X53', [1, 14]), (u'X69', [1, 1]), (u'X81', [1, 3]), (u'X77', [1, 5]), (u'X89', [1, 11])]), None), ([0.30583234960328498, 0.32252618725639903, 0.623818764122656, 0.9818419848027098, 0.26579554344260226, 0.7342044565573979, 0.01815801519729012, 0.02422045225670603, 0.1597304867893103, 0.00031746031746031746, 0.009687814702920444, 0.009687814702920444, 0.09125804117551796, 0.007410369331580054], 'Logistic regression', 'SVM (linear)', OrderedDict([(u'X70', [5, 1, 5, 5, 11, 6]), (u'X90', [5, 2, 2, 3, 4, 4]), (u'X85', [5, 3, 1, 1, 1, 2]), (u'projectCode_3988', [4, 4, 4, 4, 12]), (u'X74', [5, 5, 7, 9, 7, 13]), (u'X88', [5, 6, 8, 8, 8, 7]), (u'X67', [1, 7]), (u'projectCode_3461', [2, 8, 12]), (u'projectCode_2562', [4, 9, 10, 15, 10]), (u'X65', [4, 10, 11, 13, 14]), (u'projectCode_3776', [2, 11, 14]), (u'projectCode_2370', [3, 12, 15, 15]), (u'projectCode_1336', [1, 13]), (u'projectCode_743', [1, 14]), (u'X86', [5, 15, 13, 7, 13, 9]), (u'X87', [1, 3]), (u'X63', [1, 6]), (u'projectCode_4316', [4, 9, 6, 12, 15]), (u'projectCode_3432', [4, 12, 11, 6, 8]), (u'X84', [2, 2, 10]), (u'X79', [2, 10, 9]), (u'projectCode_2923', [1, 14]), (u'X78', [1, 2]), (u'X83', [1, 3]), (u'X58', [1, 5]), (u'X53', [1, 14]), (u'X69', [1, 1]), (u'X81', [1, 3]), (u'X77', [1, 5]), (u'X89', [1, 11])]), None), ([0.33131216198030222, 0.38543302688164494, 0.6415478126443117, 0.9776013915590955, 0.30549423372952783, 0.6945057662704721, 0.022398608440904515, 0.02422045225670603, 0.2991450273803215, 0.0012698412698412698, 0.019976197015471937, 0.019976197015471937, 3.66075091320225, 0.004156550852123378], 'Random forest', 'SVM (linear)', OrderedDict([(u'X70', [5, 1, 5, 5, 11, 6]), (u'X90', [5, 2, 2, 3, 4, 4]), (u'X85', [5, 3, 1, 1, 1, 2]), (u'projectCode_3988', [4, 4, 4, 4, 12]), (u'X74', [5, 5, 7, 9, 7, 13]), (u'X88', [5, 6, 8, 8, 8, 7]), (u'X67', [1, 7]), (u'projectCode_3461', [2, 8, 12]), (u'projectCode_2562', [4, 9, 10, 15, 10]), (u'X65', [4, 10, 11, 13, 14]), (u'projectCode_3776', [2, 11, 14]), (u'projectCode_2370', [3, 12, 15, 15]), (u'projectCode_1336', [1, 13]), (u'projectCode_743', [1, 14]), (u'X86', [5, 15, 13, 7, 13, 9]), (u'X87', [1, 3]), (u'X63', [1, 6]), (u'projectCode_4316', [4, 9, 6, 12, 15]), (u'projectCode_3432', [4, 12, 11, 6, 8]), (u'X84', [2, 2, 10]), (u'X79', [2, 10, 9]), (u'projectCode_2923', [1, 14]), (u'X78', [1, 2]), (u'X83', [1, 3]), (u'X58', [1, 5]), (u'X53', [1, 14]), (u'X69', [1, 1]), (u'X81', [1, 3]), (u'X77', [1, 5]), (u'X89', [1, 11])]), None), ([0.23667118812179919, 0.35750892765924952, 0.5798306330259414, 0.9884976654765174, 0.17116360057536528, 0.8288363994246346, 0.011502334523482559, 0.007267234276297721, 0.24230751760163524, 0.0, 0.014528975556165887, 0.014528975556165887, 9.68585661705998, 0.004367456569158498], 'SVM (RDF)', 'SVM (linear)', OrderedDict([(u'X70', [5, 1, 5, 5, 11, 6]), (u'X90', [5, 2, 2, 3, 4, 4]), (u'X85', [5, 3, 1, 1, 1, 2]), (u'projectCode_3988', [4, 4, 4, 4, 12]), (u'X74', [5, 5, 7, 9, 7, 13]), (u'X88', [5, 6, 8, 8, 8, 7]), (u'X67', [1, 7]), (u'projectCode_3461', [2, 8, 12]), (u'projectCode_2562', [4, 9, 10, 15, 10]), (u'X65', [4, 10, 11, 13, 14]), (u'projectCode_3776', [2, 11, 14]), (u'projectCode_2370', [3, 12, 15, 15]), (u'projectCode_1336', [1, 13]), (u'projectCode_743', [1, 14]), (u'X86', [5, 15, 13, 7, 13, 9]), (u'X87', [1, 3]), (u'X63', [1, 6]), (u'projectCode_4316', [4, 9, 6, 12, 15]), (u'projectCode_3432', [4, 12, 11, 6, 8]), (u'X84', [2, 2, 10]), (u'X79', [2, 10, 9]), (u'projectCode_2923', [1, 14]), (u'X78', [1, 2]), (u'X83', [1, 3]), (u'X58', [1, 5]), (u'X53', [1, 14]), (u'X69', [1, 1]), (u'X81', [1, 3]), (u'X77', [1, 5]), (u'X89', [1, 11])]), None), ([0.26727692279334297, 0.36174003976280306, 0.5979617970394583, 0.9872855442643962, 0.20863804981452044, 0.7913619501854796, 0.012714455735603772, 0.007267234276297721, 0.2635778635778635, 0.0, 0.016949555982788612, 0.016949555982788612, 28.951475990199214, 0.0036556268040255787], 'SVM (linear)', 'SVM (linear)', OrderedDict([(u'X70', [5, 1, 5, 5, 11, 6]), (u'X90', [5, 2, 2, 3, 4, 4]), (u'X85', [5, 3, 1, 1, 1, 2]), (u'projectCode_3988', [4, 4, 4, 4, 12]), (u'X74', [5, 5, 7, 9, 7, 13]), (u'X88', [5, 6, 8, 8, 8, 7]), (u'X67', [1, 7]), (u'projectCode_3461', [2, 8, 12]), (u'projectCode_2562', [4, 9, 10, 15, 10]), (u'X65', [4, 10, 11, 13, 14]), (u'projectCode_3776', [2, 11, 14]), (u'projectCode_2370', [3, 12, 15, 15]), (u'projectCode_1336', [1, 13]), (u'projectCode_743', [1, 14]), (u'X86', [5, 15, 13, 7, 13, 9]), (u'X87', [1, 3]), (u'X63', [1, 6]), (u'projectCode_4316', [4, 9, 6, 12, 15]), (u'projectCode_3432', [4, 12, 11, 6, 8]), (u'X84', [2, 2, 10]), (u'X79', [2, 10, 9]), (u'projectCode_2923', [1, 14]), (u'X78', [1, 2]), (u'X83', [1, 3]), (u'X58', [1, 5]), (u'X53', [1, 14]), (u'X69', [1, 1]), (u'X81', [1, 3]), (u'X77', [1, 5]), (u'X89', [1, 11])]), None), ([0.14445868371117751, 0.27821459078366545, 0.5318590608869621, 0.9957594067563857, 0.06795871501753854, 0.9320412849824615, 0.004240593243614392, 0.0, 0.0685946450652333, 0.0, 0.004240593243614392, 0.004240593243614392, 7.398141688901163, 0.0032620198431309966], 'SVM (polynomial)', 'SVM (linear)', OrderedDict([(u'X70', [5, 1, 5, 5, 11, 6]), (u'X90', [5, 2, 2, 3, 4, 4]), (u'X85', [5, 3, 1, 1, 1, 2]), (u'projectCode_3988', [4, 4, 4, 4, 12]), (u'X74', [5, 5, 7, 9, 7, 13]), (u'X88', [5, 6, 8, 8, 8, 7]), (u'X67', [1, 7]), (u'projectCode_3461', [2, 8, 12]), (u'projectCode_2562', [4, 9, 10, 15, 10]), (u'X65', [4, 10, 11, 13, 14]), (u'projectCode_3776', [2, 11, 14]), (u'projectCode_2370', [3, 12, 15, 15]), (u'projectCode_1336', [1, 13]), (u'projectCode_743', [1, 14]), (u'X86', [5, 15, 13, 7, 13, 9]), (u'X87', [1, 3]), (u'X63', [1, 6]), (u'projectCode_4316', [4, 9, 6, 12, 15]), (u'projectCode_3432', [4, 12, 11, 6, 8]), (u'X84', [2, 2, 10]), (u'X79', [2, 10, 9]), (u'projectCode_2923', [1, 14]), (u'X78', [1, 2]), (u'X83', [1, 3]), (u'X58', [1, 5]), (u'X53', [1, 14]), (u'X69', [1, 1]), (u'X81', [1, 3]), (u'X77', [1, 5]), (u'X89', [1, 11])]), None)], 'SVM (linear)'), ('Random forest', [([0.31953141375043653, 0.3244521368211073, 0.6657599098686713, 0.633201501419024, 0.6983183183183183, 0.3016816816816817, 0.3667984985809759, 0.24397143641856633, 0.27056249526837767, 0.03588462411991823, 0.08171015288840064, 0.08171015288840064, 6.245486210578205, 0.01366757129199368], 'AdaBoost', 'Random forest', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Health', [5, 3, 3, 3, 3, 6]), (u'X2', [5, 4, 5, 6, 4, 4]), (u'X3', [5, 5, 6, 4, 5, 5]), (u'projectCode_2914', [5, 6, 7, 7, 7, 8]), (u'projectCode_748', [5, 7, 4, 5, 6, 3]), (u'X78', [4, 8, 13, 13, 8]), (u'X5', [2, 9, 8]), (u'X64', [3, 10, 9, 11]), (u'projectCode_1779', [3, 11, 10, 9]), (u'X7', [4, 12, 14, 10, 15]), (u'projectCode_27', [4, 13, 8, 12, 10]), (u'X71', [2, 14, 14]), (u'X4', [3, 15, 15, 13]), (u'X85', [4, 9, 11, 9, 14]), (u'sector_Economic Development', [3, 11, 13, 12]), (u'X6', [2, 12, 11]), (u'X63', [1, 15]), (u'projectCode_1553', [3, 12, 10, 7]), (u'X79', [2, 14, 15])]), None), ([0.34896853714382575, 0.40731219013351011, 0.6789458891058323, 0.621766913851506, 0.7361248643601584, 0.26387513563984155, 0.378233086148494, 0.4140931978394214, 0.2578676155146743, 0.07938980997804526, 0.03388995697152797, 0.03388995697152797, 31.690988540485325, 0.011566448094981457], 'Artificial neural network', 'Random forest', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Health', [5, 3, 3, 3, 3, 6]), (u'X2', [5, 4, 5, 6, 4, 4]), (u'X3', [5, 5, 6, 4, 5, 5]), (u'projectCode_2914', [5, 6, 7, 7, 7, 8]), (u'projectCode_748', [5, 7, 4, 5, 6, 3]), (u'X78', [4, 8, 13, 13, 8]), (u'X5', [2, 9, 8]), (u'X64', [3, 10, 9, 11]), (u'projectCode_1779', [3, 11, 10, 9]), (u'X7', [4, 12, 14, 10, 15]), (u'projectCode_27', [4, 13, 8, 12, 10]), (u'X71', [2, 14, 14]), (u'X4', [3, 15, 15, 13]), (u'X85', [4, 9, 11, 9, 14]), (u'sector_Economic Development', [3, 11, 13, 12]), (u'X6', [2, 12, 11]), (u'X63', [1, 15]), (u'projectCode_1553', [3, 12, 10, 7]), (u'X79', [2, 14, 15])]), None), ([0.31811381480735895, 0.42002857953076417, 0.6600797192817808, 0.5630705850041198, 0.7570888535594419, 0.24291114644055822, 0.4369294149958803, 0.31055204614117005, 0.24579958109369873, 0.059699194993312645, 0.026023986084409045, 0.026023986084409045, 0.07330944010084295, 0.015232055546887861], 'Bernoulli Naive Bayes', 'Random forest', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Health', [5, 3, 3, 3, 3, 6]), (u'X2', [5, 4, 5, 6, 4, 4]), (u'X3', [5, 5, 6, 4, 5, 5]), (u'projectCode_2914', [5, 6, 7, 7, 7, 8]), (u'projectCode_748', [5, 7, 4, 5, 6, 3]), (u'X78', [4, 8, 13, 13, 8]), (u'X5', [2, 9, 8]), (u'X64', [3, 10, 9, 11]), (u'projectCode_1779', [3, 11, 10, 9]), (u'X7', [4, 12, 14, 10, 15]), (u'projectCode_27', [4, 13, 8, 12, 10]), (u'X71', [2, 14, 14]), (u'X4', [3, 15, 15, 13]), (u'X85', [4, 9, 11, 9, 14]), (u'sector_Economic Development', [3, 11, 13, 12]), (u'X6', [2, 12, 11]), (u'X63', [1, 15]), (u'projectCode_1553', [3, 12, 10, 7]), (u'X79', [2, 14, 15])]), None), ([0.30584240254828332, 0.52690716378945979, 0.6592973517462587, 0.63742378467454, 0.6811709188179776, 0.31882908118202236, 0.36257621532546, 0.4461411700082395, 0.46267797208973677, 0.13972998208292325, 0.20030577680124506, 0.20030577680124506, 0.09615904163043196, 0.014956839588172779], 'Decision Tree', 'Random forest', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Health', [5, 3, 3, 3, 3, 6]), (u'X2', [5, 4, 5, 6, 4, 4]), (u'X3', [5, 5, 6, 4, 5, 5]), (u'projectCode_2914', [5, 6, 7, 7, 7, 8]), (u'projectCode_748', [5, 7, 4, 5, 6, 3]), (u'X78', [4, 8, 13, 13, 8]), (u'X5', [2, 9, 8]), (u'X64', [3, 10, 9, 11]), (u'projectCode_1779', [3, 11, 10, 9]), (u'X7', [4, 12, 14, 10, 15]), (u'projectCode_27', [4, 13, 8, 12, 10]), (u'X71', [2, 14, 14]), (u'X4', [3, 15, 15, 13]), (u'X85', [4, 9, 11, 9, 14]), (u'sector_Economic Development', [3, 11, 13, 12]), (u'X6', [2, 12, 11]), (u'X63', [1, 15]), (u'projectCode_1553', [3, 12, 10, 7]), (u'X79', [2, 14, 15])]), None), ([0.36116677042083972, 0.41787163176657094, 0.6682143036825816, 0.48791723885379473, 0.8485113685113685, 0.1514886314886315, 0.5120827611462052, 0.3517312093747139, 0.27596487243546064, 0.07493678552502082, 0.052053465165247635, 0.052053465165247635, 0.8760858284836972, 0.010009653102905866], 'Extreme Learning Machine', 'Random forest', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Health', [5, 3, 3, 3, 3, 6]), (u'X2', [5, 4, 5, 6, 4, 4]), (u'X3', [5, 5, 6, 4, 5, 5]), (u'projectCode_2914', [5, 6, 7, 7, 7, 8]), (u'projectCode_748', [5, 7, 4, 5, 6, 3]), (u'X78', [4, 8, 13, 13, 8]), (u'X5', [2, 9, 8]), (u'X64', [3, 10, 9, 11]), (u'projectCode_1779', [3, 11, 10, 9]), (u'X7', [4, 12, 14, 10, 15]), (u'projectCode_27', [4, 13, 8, 12, 10]), (u'X71', [2, 14, 14]), (u'X4', [3, 15, 15, 13]), (u'X85', [4, 9, 11, 9, 14]), (u'sector_Economic Development', [3, 11, 13, 12]), (u'X6', [2, 12, 11]), (u'X63', [1, 15]), (u'projectCode_1553', [3, 12, 10, 7]), (u'X79', [2, 14, 15])]), None), ([0.30065604263978019, 0.51719623536721671, 0.6250599282001451, 0.9703469742744668, 0.2797728821258233, 0.7202271178741767, 0.02965302572553328, 0.9703469742744668, 0.2797728821258233, 0.7202271178741767, 0.02965302572553328, 0.02965302572553328, 0.011820841205594235, 0.007959593067132136], 'Gaussian Naive Bayes', 'Random forest', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Health', [5, 3, 3, 3, 3, 6]), (u'X2', [5, 4, 5, 6, 4, 4]), (u'X3', [5, 5, 6, 4, 5, 5]), (u'projectCode_2914', [5, 6, 7, 7, 7, 8]), (u'projectCode_748', [5, 7, 4, 5, 6, 3]), (u'X78', [4, 8, 13, 13, 8]), (u'X5', [2, 9, 8]), (u'X64', [3, 10, 9, 11]), (u'projectCode_1779', [3, 11, 10, 9]), (u'X7', [4, 12, 14, 10, 15]), (u'projectCode_27', [4, 13, 8, 12, 10]), (u'X71', [2, 14, 14]), (u'X4', [3, 15, 15, 13]), (u'X85', [4, 9, 11, 9, 14]), (u'sector_Economic Development', [3, 11, 13, 12]), (u'X6', [2, 12, 11]), (u'X63', [1, 15]), (u'projectCode_1553', [3, 12, 10, 7]), (u'X79', [2, 14, 15])]), None), ([0.24358442531671756, 0.5002707769214747, 0.62249606632937, 0.5133571363178613, 0.7316349963408787, 0.2683650036591213, 0.48664286368213866, 0.30634990387256245, 0.526185176773412, 0.09462992404168874, 0.26755653208825414, 0.26755653208825414, 0.15696694601805916, 0.00554891281249344], 'K-nearest neighbours', 'Random forest', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Health', [5, 3, 3, 3, 3, 6]), (u'X2', [5, 4, 5, 6, 4, 4]), (u'X3', [5, 5, 6, 4, 5, 5]), (u'projectCode_2914', [5, 6, 7, 7, 7, 8]), (u'projectCode_748', [5, 7, 4, 5, 6, 3]), (u'X78', [4, 8, 13, 13, 8]), (u'X5', [2, 9, 8]), (u'X64', [3, 10, 9, 11]), (u'projectCode_1779', [3, 11, 10, 9]), (u'X7', [4, 12, 14, 10, 15]), (u'projectCode_27', [4, 13, 8, 12, 10]), (u'X71', [2, 14, 14]), (u'X4', [3, 15, 15, 13]), (u'X85', [4, 9, 11, 9, 14]), (u'sector_Economic Development', [3, 11, 13, 12]), (u'X6', [2, 12, 11]), (u'X63', [1, 15]), (u'projectCode_1553', [3, 12, 10, 7]), (u'X79', [2, 14, 15])]), None), ([0.32089122622537836, 0.37988529731991993, 0.6631656439777996, 0.5848979218163508, 0.7414333661392485, 0.2585666338607515, 0.41510207818364925, 0.4237553785590039, 0.21309763545057664, 0.08700835289070583, 0.02723061430010071, 0.02723061430010071, 0.19427323107721883, 0.007201525342614748], 'Logistic regression', 'Random forest', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Health', [5, 3, 3, 3, 3, 6]), (u'X2', [5, 4, 5, 6, 4, 4]), (u'X3', [5, 5, 6, 4, 5, 5]), (u'projectCode_2914', [5, 6, 7, 7, 7, 8]), (u'projectCode_748', [5, 7, 4, 5, 6, 3]), (u'X78', [4, 8, 13, 13, 8]), (u'X5', [2, 9, 8]), (u'X64', [3, 10, 9, 11]), (u'projectCode_1779', [3, 11, 10, 9]), (u'X7', [4, 12, 14, 10, 15]), (u'projectCode_27', [4, 13, 8, 12, 10]), (u'X71', [2, 14, 14]), (u'X4', [3, 15, 15, 13]), (u'X85', [4, 9, 11, 9, 14]), (u'sector_Economic Development', [3, 11, 13, 12]), (u'X6', [2, 12, 11]), (u'X63', [1, 15]), (u'projectCode_1553', [3, 12, 10, 7]), (u'X79', [2, 14, 15])]), None), ([0.32539680266743021, 0.47836606734517612, 0.669564356465014, 0.6525624828343861, 0.6865662300956419, 0.3134337699043582, 0.34743751716561383, 0.4158765906802161, 0.4258394528982764, 0.11622580563757035, 0.14823766364551863, 0.14823766364551863, 4.420803533453498, 0.01419568074975325], 'Random forest', 'Random forest', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Health', [5, 3, 3, 3, 3, 6]), (u'X2', [5, 4, 5, 6, 4, 4]), (u'X3', [5, 5, 6, 4, 5, 5]), (u'projectCode_2914', [5, 6, 7, 7, 7, 8]), (u'projectCode_748', [5, 7, 4, 5, 6, 3]), (u'X78', [4, 8, 13, 13, 8]), (u'X5', [2, 9, 8]), (u'X64', [3, 10, 9, 11]), (u'projectCode_1779', [3, 11, 10, 9]), (u'X7', [4, 12, 14, 10, 15]), (u'projectCode_27', [4, 13, 8, 12, 10]), (u'X71', [2, 14, 14]), (u'X4', [3, 15, 15, 13]), (u'X85', [4, 9, 11, 9, 14]), (u'sector_Economic Development', [3, 11, 13, 12]), (u'X6', [2, 12, 11]), (u'X63', [1, 15]), (u'projectCode_1553', [3, 12, 10, 7]), (u'X79', [2, 14, 15])]), None), ([0.32405251812331226, 0.35762951709759638, 0.6563511693812032, 0.5055607433855168, 0.8071415953768895, 0.1928584046231105, 0.4944392566144833, 0.3534523482559736, 0.053035051858581275, 0.08635324400030284, 0.0024224114254325735, 0.0024224114254325735, 10.903832506286989, 0.006117186813003621], 'SVM (RDF)', 'Random forest', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Health', [5, 3, 3, 3, 3, 6]), (u'X2', [5, 4, 5, 6, 4, 4]), (u'X3', [5, 5, 6, 4, 5, 5]), (u'projectCode_2914', [5, 6, 7, 7, 7, 8]), (u'projectCode_748', [5, 7, 4, 5, 6, 3]), (u'X78', [4, 8, 13, 13, 8]), (u'X5', [2, 9, 8]), (u'X64', [3, 10, 9, 11]), (u'projectCode_1779', [3, 11, 10, 9]), (u'X7', [4, 12, 14, 10, 15]), (u'projectCode_27', [4, 13, 8, 12, 10]), (u'X71', [2, 14, 14]), (u'X4', [3, 15, 15, 13]), (u'X85', [4, 9, 11, 9, 14]), (u'sector_Economic Development', [3, 11, 13, 12]), (u'X6', [2, 12, 11]), (u'X63', [1, 15]), (u'projectCode_1553', [3, 12, 10, 7]), (u'X79', [2, 14, 15])]), None), ([0.39475224934354441, 0.37697639712815006, 0.66785286446207, 0.4255717293783759, 0.9101339995457642, 0.08986600045423575, 0.574428270621624, 0.4255717293783759, 0.060977616271733925, 0.08954803543038838, 0.002422411425432573, 0.002422411425432573, 26.19606718560441, 0.011452728206554477], 'SVM (linear)', 'Random forest', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Health', [5, 3, 3, 3, 3, 6]), (u'X2', [5, 4, 5, 6, 4, 4]), (u'X3', [5, 5, 6, 4, 5, 5]), (u'projectCode_2914', [5, 6, 7, 7, 7, 8]), (u'projectCode_748', [5, 7, 4, 5, 6, 3]), (u'X78', [4, 8, 13, 13, 8]), (u'X5', [2, 9, 8]), (u'X64', [3, 10, 9, 11]), (u'projectCode_1779', [3, 11, 10, 9]), (u'X7', [4, 12, 14, 10, 15]), (u'projectCode_27', [4, 13, 8, 12, 10]), (u'X71', [2, 14, 14]), (u'X4', [3, 15, 15, 13]), (u'X85', [4, 9, 11, 9, 14]), (u'sector_Economic Development', [3, 11, 13, 12]), (u'X6', [2, 12, 11]), (u'X63', [1, 15]), (u'projectCode_1553', [3, 12, 10, 7]), (u'X79', [2, 14, 15])]), None), ([0.09527301662063474, 0.26355738899933745, 0.5415418778738488, 0.2726100888034423, 0.8104736669442552, 0.18952633305574482, 0.7273899111965576, 0.02360157465897647, 0.01048123754006107, 0.0022222222222222222, 0.0006060606060606061, 0.0006060606060606061, 10.614133753603076, 0.003921521224875769], 'SVM (polynomial)', 'Random forest', OrderedDict([(u'X1', [5, 1, 1, 1, 1, 1]), (u'sector_No info', [5, 2, 2, 2, 2, 2]), (u'sector_Health', [5, 3, 3, 3, 3, 6]), (u'X2', [5, 4, 5, 6, 4, 4]), (u'X3', [5, 5, 6, 4, 5, 5]), (u'projectCode_2914', [5, 6, 7, 7, 7, 8]), (u'projectCode_748', [5, 7, 4, 5, 6, 3]), (u'X78', [4, 8, 13, 13, 8]), (u'X5', [2, 9, 8]), (u'X64', [3, 10, 9, 11]), (u'projectCode_1779', [3, 11, 10, 9]), (u'X7', [4, 12, 14, 10, 15]), (u'projectCode_27', [4, 13, 8, 12, 10]), (u'X71', [2, 14, 14]), (u'X4', [3, 15, 15, 13]), (u'X85', [4, 9, 11, 9, 14]), (u'sector_Economic Development', [3, 11, 13, 12]), (u'X6', [2, 12, 11]), (u'X63', [1, 15]), (u'projectCode_1553', [3, 12, 10, 7]), (u'X79', [2, 14, 15])]), None)], 'Random forest')], [(None, [([0.40670651554472259, 0.27784865846020373, 0.7183333333333333, 0.7166666666666666, 0.72, 0.27999999999999997, 0.2833333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3637441276892339, 0.031040168548061443], 'AdaBoost', None, OrderedDict([(u'Attribute 2', [5, 1, 1, 1, 1, 1]), (u'Attribute 5', [5, 2, 2, 2, 2, 2]), (u'Attribute 8', [5, 3, 3, 3, 3, 3]), (u'Attribute 11', [5, 4, 4, 4, 4, 4]), (u'Attribute 13', [5, 5, 5, 5, 5, 5]), (u'Attribute 16', [5, 6, 6, 6, 6, 6]), (u'Attribute 18', [5, 7, 7, 7, 7, 7]), (u'Attribute 1_A11', [5, 8, 8, 8, 8, 8]), (u'Attribute 1_A12', [5, 9, 9, 9, 9, 9]), (u'Attribute 1_A13', [5, 10, 10, 10, 10, 10]), (u'Attribute 1_A14', [5, 11, 11, 11, 11, 11]), (u'Attribute 3_A30', [5, 12, 12, 12, 12, 12]), (u'Attribute 3_A31', [5, 13, 13, 13, 13, 13]), (u'Attribute 3_A32', [5, 14, 14, 14, 14, 14]), (u'Attribute 3_A33', [5, 15, 15, 15, 15, 15]), (u'Attribute 3_A34', [5, 16, 16, 16, 16, 16]), (u'Attribute 4_A40', [5, 17, 17, 17, 17, 17]), (u'Attribute 4_A41', [5, 18, 18, 18, 18, 18]), (u'Attribute 4_A410', [5, 19, 19, 19, 19, 19]), (u'Attribute 4_A42', [5, 20, 20, 20, 20, 20]), (u'Attribute 4_A43', [5, 21, 21, 21, 21, 21]), (u'Attribute 4_A44', [5, 22, 22, 22, 22, 22]), (u'Attribute 4_A45', [5, 23, 23, 23, 23, 23]), (u'Attribute 4_A46', [5, 24, 24, 24, 24, 24]), (u'Attribute 4_A48', [5, 25, 25, 25, 25, 25]), (u'Attribute 4_A49', [5, 26, 26, 26, 26, 26]), (u'Attribute 6_A61', [5, 27, 27, 27, 27, 27]), (u'Attribute 6_A62', [5, 28, 28, 28, 28, 28]), (u'Attribute 6_A63', [5, 29, 29, 29, 29, 29]), (u'Attribute 6_A64', [5, 30, 30, 30, 30, 30]), (u'Attribute 6_A65', [5, 31, 31, 31, 31, 31]), (u'Attribute 7_A71', [5, 32, 32, 32, 32, 32]), (u'Attribute 7_A72', [5, 33, 33, 33, 33, 33]), (u'Attribute 7_A73', [5, 34, 34, 34, 34, 34]), (u'Attribute 7_A74', [5, 35, 35, 35, 35, 35]), (u'Attribute 7_A75', [5, 36, 36, 36, 36, 36]), (u'Attribute 9_A91', [5, 37, 37, 37, 37, 37]), (u'Attribute 9_A92', [5, 38, 38, 38, 38, 38]), (u'Attribute 9_A93', [5, 39, 39, 39, 39, 39]), (u'Attribute 9_A94', [5, 40, 40, 40, 40, 40]), (u'Attribute 10_A101', [5, 41, 41, 41, 41, 41]), (u'Attribute 10_A102', [5, 42, 42, 42, 42, 42]), (u'Attribute 10_A103', [5, 43, 43, 43, 43, 43]), (u'Attribute 12_A121', [5, 44, 44, 44, 44, 44]), (u'Attribute 12_A122', [5, 45, 45, 45, 45, 45]), (u'Attribute 12_A123', [5, 46, 46, 46, 46, 46]), (u'Attribute 12_A124', [5, 47, 47, 47, 47, 47]), (u'Attribute 14_A141', [5, 48, 48, 48, 48, 48]), (u'Attribute 14_A142', [5, 49, 49, 49, 49, 49]), (u'Attribute 14_A143', [5, 50, 50, 50, 50, 50]), (u'Attribute 15_A151', [5, 51, 51, 51, 51, 51]), (u'Attribute 15_A152', [5, 52, 52, 52, 52, 52]), (u'Attribute 15_A153', [5, 53, 53, 53, 53, 53]), (u'Attribute 17_A171', [5, 54, 54, 54, 54, 54]), (u'Attribute 17_A172', [5, 55, 55, 55, 55, 55]), (u'Attribute 17_A173', [5, 56, 56, 56, 56, 56]), (u'Attribute 17_A174', [5, 57, 57, 57, 57, 57]), (u'Attribute 19', [5, 58, 58, 58, 58, 58]), (u'Attribute 20', [5, 59, 59, 59, 59, 59])]), None), ([0.40653284904435966, 0.50074925255625036, 0.7207142857142859, 0.76, 0.6814285714285714, 0.31857142857142856, 0.24, 0.5900000000000001, 0.5142857142857142, 0.18857142857142856, 0.13333333333333336, 0.13333333333333336, 5.653172111870559, 0.026175320290117755], 'Artificial neural network', None, OrderedDict([(u'Attribute 2', [5, 1, 1, 1, 1, 1]), (u'Attribute 5', [5, 2, 2, 2, 2, 2]), (u'Attribute 8', [5, 3, 3, 3, 3, 3]), (u'Attribute 11', [5, 4, 4, 4, 4, 4]), (u'Attribute 13', [5, 5, 5, 5, 5, 5]), (u'Attribute 16', [5, 6, 6, 6, 6, 6]), (u'Attribute 18', [5, 7, 7, 7, 7, 7]), (u'Attribute 1_A11', [5, 8, 8, 8, 8, 8]), (u'Attribute 1_A12', [5, 9, 9, 9, 9, 9]), (u'Attribute 1_A13', [5, 10, 10, 10, 10, 10]), (u'Attribute 1_A14', [5, 11, 11, 11, 11, 11]), (u'Attribute 3_A30', [5, 12, 12, 12, 12, 12]), (u'Attribute 3_A31', [5, 13, 13, 13, 13, 13]), (u'Attribute 3_A32', [5, 14, 14, 14, 14, 14]), (u'Attribute 3_A33', [5, 15, 15, 15, 15, 15]), (u'Attribute 3_A34', [5, 16, 16, 16, 16, 16]), (u'Attribute 4_A40', [5, 17, 17, 17, 17, 17]), (u'Attribute 4_A41', [5, 18, 18, 18, 18, 18]), (u'Attribute 4_A410', [5, 19, 19, 19, 19, 19]), (u'Attribute 4_A42', [5, 20, 20, 20, 20, 20]), (u'Attribute 4_A43', [5, 21, 21, 21, 21, 21]), (u'Attribute 4_A44', [5, 22, 22, 22, 22, 22]), (u'Attribute 4_A45', [5, 23, 23, 23, 23, 23]), (u'Attribute 4_A46', [5, 24, 24, 24, 24, 24]), (u'Attribute 4_A48', [5, 25, 25, 25, 25, 25]), (u'Attribute 4_A49', [5, 26, 26, 26, 26, 26]), (u'Attribute 6_A61', [5, 27, 27, 27, 27, 27]), (u'Attribute 6_A62', [5, 28, 28, 28, 28, 28]), (u'Attribute 6_A63', [5, 29, 29, 29, 29, 29]), (u'Attribute 6_A64', [5, 30, 30, 30, 30, 30]), (u'Attribute 6_A65', [5, 31, 31, 31, 31, 31]), (u'Attribute 7_A71', [5, 32, 32, 32, 32, 32]), (u'Attribute 7_A72', [5, 33, 33, 33, 33, 33]), (u'Attribute 7_A73', [5, 34, 34, 34, 34, 34]), (u'Attribute 7_A74', [5, 35, 35, 35, 35, 35]), (u'Attribute 7_A75', [5, 36, 36, 36, 36, 36]), (u'Attribute 9_A91', [5, 37, 37, 37, 37, 37]), (u'Attribute 9_A92', [5, 38, 38, 38, 38, 38]), (u'Attribute 9_A93', [5, 39, 39, 39, 39, 39]), (u'Attribute 9_A94', [5, 40, 40, 40, 40, 40]), (u'Attribute 10_A101', [5, 41, 41, 41, 41, 41]), (u'Attribute 10_A102', [5, 42, 42, 42, 42, 42]), (u'Attribute 10_A103', [5, 43, 43, 43, 43, 43]), (u'Attribute 12_A121', [5, 44, 44, 44, 44, 44]), (u'Attribute 12_A122', [5, 45, 45, 45, 45, 45]), (u'Attribute 12_A123', [5, 46, 46, 46, 46, 46]), (u'Attribute 12_A124', [5, 47, 47, 47, 47, 47]), (u'Attribute 14_A141', [5, 48, 48, 48, 48, 48]), (u'Attribute 14_A142', [5, 49, 49, 49, 49, 49]), (u'Attribute 14_A143', [5, 50, 50, 50, 50, 50]), (u'Attribute 15_A151', [5, 51, 51, 51, 51, 51]), (u'Attribute 15_A152', [5, 52, 52, 52, 52, 52]), (u'Attribute 15_A153', [5, 53, 53, 53, 53, 53]), (u'Attribute 17_A171', [5, 54, 54, 54, 54, 54]), (u'Attribute 17_A172', [5, 55, 55, 55, 55, 55]), (u'Attribute 17_A173', [5, 56, 56, 56, 56, 56]), (u'Attribute 17_A174', [5, 57, 57, 57, 57, 57]), (u'Attribute 19', [5, 58, 58, 58, 58, 58]), (u'Attribute 20', [5, 59, 59, 59, 59, 59])]), None), ([0.37226187828028595, 0.5279976421812973, 0.7016666666666667, 0.7233333333333333, 0.68, 0.32, 0.27666666666666667, 0.5966666666666667, 0.5614285714285715, 0.1942857142857143, 0.16666666666666666, 0.16666666666666666, 0.05531978605364163, 0.0373862598597915], 'Bernoulli Naive Bayes', None, OrderedDict([(u'Attribute 2', [5, 1, 1, 1, 1, 1]), (u'Attribute 5', [5, 2, 2, 2, 2, 2]), (u'Attribute 8', [5, 3, 3, 3, 3, 3]), (u'Attribute 11', [5, 4, 4, 4, 4, 4]), (u'Attribute 13', [5, 5, 5, 5, 5, 5]), (u'Attribute 16', [5, 6, 6, 6, 6, 6]), (u'Attribute 18', [5, 7, 7, 7, 7, 7]), (u'Attribute 1_A11', [5, 8, 8, 8, 8, 8]), (u'Attribute 1_A12', [5, 9, 9, 9, 9, 9]), (u'Attribute 1_A13', [5, 10, 10, 10, 10, 10]), (u'Attribute 1_A14', [5, 11, 11, 11, 11, 11]), (u'Attribute 3_A30', [5, 12, 12, 12, 12, 12]), (u'Attribute 3_A31', [5, 13, 13, 13, 13, 13]), (u'Attribute 3_A32', [5, 14, 14, 14, 14, 14]), (u'Attribute 3_A33', [5, 15, 15, 15, 15, 15]), (u'Attribute 3_A34', [5, 16, 16, 16, 16, 16]), (u'Attribute 4_A40', [5, 17, 17, 17, 17, 17]), (u'Attribute 4_A41', [5, 18, 18, 18, 18, 18]), (u'Attribute 4_A410', [5, 19, 19, 19, 19, 19]), (u'Attribute 4_A42', [5, 20, 20, 20, 20, 20]), (u'Attribute 4_A43', [5, 21, 21, 21, 21, 21]), (u'Attribute 4_A44', [5, 22, 22, 22, 22, 22]), (u'Attribute 4_A45', [5, 23, 23, 23, 23, 23]), (u'Attribute 4_A46', [5, 24, 24, 24, 24, 24]), (u'Attribute 4_A48', [5, 25, 25, 25, 25, 25]), (u'Attribute 4_A49', [5, 26, 26, 26, 26, 26]), (u'Attribute 6_A61', [5, 27, 27, 27, 27, 27]), (u'Attribute 6_A62', [5, 28, 28, 28, 28, 28]), (u'Attribute 6_A63', [5, 29, 29, 29, 29, 29]), (u'Attribute 6_A64', [5, 30, 30, 30, 30, 30]), (u'Attribute 6_A65', [5, 31, 31, 31, 31, 31]), (u'Attribute 7_A71', [5, 32, 32, 32, 32, 32]), (u'Attribute 7_A72', [5, 33, 33, 33, 33, 33]), (u'Attribute 7_A73', [5, 34, 34, 34, 34, 34]), (u'Attribute 7_A74', [5, 35, 35, 35, 35, 35]), (u'Attribute 7_A75', [5, 36, 36, 36, 36, 36]), (u'Attribute 9_A91', [5, 37, 37, 37, 37, 37]), (u'Attribute 9_A92', [5, 38, 38, 38, 38, 38]), (u'Attribute 9_A93', [5, 39, 39, 39, 39, 39]), (u'Attribute 9_A94', [5, 40, 40, 40, 40, 40]), (u'Attribute 10_A101', [5, 41, 41, 41, 41, 41]), (u'Attribute 10_A102', [5, 42, 42, 42, 42, 42]), (u'Attribute 10_A103', [5, 43, 43, 43, 43, 43]), (u'Attribute 12_A121', [5, 44, 44, 44, 44, 44]), (u'Attribute 12_A122', [5, 45, 45, 45, 45, 45]), (u'Attribute 12_A123', [5, 46, 46, 46, 46, 46]), (u'Attribute 12_A124', [5, 47, 47, 47, 47, 47]), (u'Attribute 14_A141', [5, 48, 48, 48, 48, 48]), (u'Attribute 14_A142', [5, 49, 49, 49, 49, 49]), (u'Attribute 14_A143', [5, 50, 50, 50, 50, 50]), (u'Attribute 15_A151', [5, 51, 51, 51, 51, 51]), (u'Attribute 15_A152', [5, 52, 52, 52, 52, 52]), (u'Attribute 15_A153', [5, 53, 53, 53, 53, 53]), (u'Attribute 17_A171', [5, 54, 54, 54, 54, 54]), (u'Attribute 17_A172', [5, 55, 55, 55, 55, 55]), (u'Attribute 17_A173', [5, 56, 56, 56, 56, 56]), (u'Attribute 17_A174', [5, 57, 57, 57, 57, 57]), (u'Attribute 19', [5, 58, 58, 58, 58, 58]), (u'Attribute 20', [5, 59, 59, 59, 59, 59])]), None), ([0.26377819509217398, 0.42461754407322133, 0.6438095238095237, 0.6833333333333333, 0.6042857142857143, 0.39571428571428574, 0.31666666666666665, 0.32666666666666666, 0.44571428571428573, 0.17428571428571427, 0.1733333333333333, 0.1733333333333333, 0.008034006350532821, 0.048406583012143754], 'Decision Tree', None, OrderedDict([(u'Attribute 2', [5, 1, 1, 1, 1, 1]), (u'Attribute 5', [5, 2, 2, 2, 2, 2]), (u'Attribute 8', [5, 3, 3, 3, 3, 3]), (u'Attribute 11', [5, 4, 4, 4, 4, 4]), (u'Attribute 13', [5, 5, 5, 5, 5, 5]), (u'Attribute 16', [5, 6, 6, 6, 6, 6]), (u'Attribute 18', [5, 7, 7, 7, 7, 7]), (u'Attribute 1_A11', [5, 8, 8, 8, 8, 8]), (u'Attribute 1_A12', [5, 9, 9, 9, 9, 9]), (u'Attribute 1_A13', [5, 10, 10, 10, 10, 10]), (u'Attribute 1_A14', [5, 11, 11, 11, 11, 11]), (u'Attribute 3_A30', [5, 12, 12, 12, 12, 12]), (u'Attribute 3_A31', [5, 13, 13, 13, 13, 13]), (u'Attribute 3_A32', [5, 14, 14, 14, 14, 14]), (u'Attribute 3_A33', [5, 15, 15, 15, 15, 15]), (u'Attribute 3_A34', [5, 16, 16, 16, 16, 16]), (u'Attribute 4_A40', [5, 17, 17, 17, 17, 17]), (u'Attribute 4_A41', [5, 18, 18, 18, 18, 18]), (u'Attribute 4_A410', [5, 19, 19, 19, 19, 19]), (u'Attribute 4_A42', [5, 20, 20, 20, 20, 20]), (u'Attribute 4_A43', [5, 21, 21, 21, 21, 21]), (u'Attribute 4_A44', [5, 22, 22, 22, 22, 22]), (u'Attribute 4_A45', [5, 23, 23, 23, 23, 23]), (u'Attribute 4_A46', [5, 24, 24, 24, 24, 24]), (u'Attribute 4_A48', [5, 25, 25, 25, 25, 25]), (u'Attribute 4_A49', [5, 26, 26, 26, 26, 26]), (u'Attribute 6_A61', [5, 27, 27, 27, 27, 27]), (u'Attribute 6_A62', [5, 28, 28, 28, 28, 28]), (u'Attribute 6_A63', [5, 29, 29, 29, 29, 29]), (u'Attribute 6_A64', [5, 30, 30, 30, 30, 30]), (u'Attribute 6_A65', [5, 31, 31, 31, 31, 31]), (u'Attribute 7_A71', [5, 32, 32, 32, 32, 32]), (u'Attribute 7_A72', [5, 33, 33, 33, 33, 33]), (u'Attribute 7_A73', [5, 34, 34, 34, 34, 34]), (u'Attribute 7_A74', [5, 35, 35, 35, 35, 35]), (u'Attribute 7_A75', [5, 36, 36, 36, 36, 36]), (u'Attribute 9_A91', [5, 37, 37, 37, 37, 37]), (u'Attribute 9_A92', [5, 38, 38, 38, 38, 38]), (u'Attribute 9_A93', [5, 39, 39, 39, 39, 39]), (u'Attribute 9_A94', [5, 40, 40, 40, 40, 40]), (u'Attribute 10_A101', [5, 41, 41, 41, 41, 41]), (u'Attribute 10_A102', [5, 42, 42, 42, 42, 42]), (u'Attribute 10_A103', [5, 43, 43, 43, 43, 43]), (u'Attribute 12_A121', [5, 44, 44, 44, 44, 44]), (u'Attribute 12_A122', [5, 45, 45, 45, 45, 45]), (u'Attribute 12_A123', [5, 46, 46, 46, 46, 46]), (u'Attribute 12_A124', [5, 47, 47, 47, 47, 47]), (u'Attribute 14_A141', [5, 48, 48, 48, 48, 48]), (u'Attribute 14_A142', [5, 49, 49, 49, 49, 49]), (u'Attribute 14_A143', [5, 50, 50, 50, 50, 50]), (u'Attribute 15_A151', [5, 51, 51, 51, 51, 51]), (u'Attribute 15_A152', [5, 52, 52, 52, 52, 52]), (u'Attribute 15_A153', [5, 53, 53, 53, 53, 53]), (u'Attribute 17_A171', [5, 54, 54, 54, 54, 54]), (u'Attribute 17_A172', [5, 55, 55, 55, 55, 55]), (u'Attribute 17_A173', [5, 56, 56, 56, 56, 56]), (u'Attribute 17_A174', [5, 57, 57, 57, 57, 57]), (u'Attribute 19', [5, 58, 58, 58, 58, 58]), (u'Attribute 20', [5, 59, 59, 59, 59, 59])]), None), ([0.41113963906361511, 0.48822868865545765, 0.7209523809523809, 0.7233333333333333, 0.7185714285714285, 0.2814285714285714, 0.27666666666666667, 0.43999999999999995, 0.4828571428571428, 0.10857142857142857, 0.12000000000000002, 0.12000000000000002, 0.06142641571628538, 0.01474653577828769], 'Extreme Learning Machine', None, OrderedDict([(u'Attribute 2', [5, 1, 1, 1, 1, 1]), (u'Attribute 5', [5, 2, 2, 2, 2, 2]), (u'Attribute 8', [5, 3, 3, 3, 3, 3]), (u'Attribute 11', [5, 4, 4, 4, 4, 4]), (u'Attribute 13', [5, 5, 5, 5, 5, 5]), (u'Attribute 16', [5, 6, 6, 6, 6, 6]), (u'Attribute 18', [5, 7, 7, 7, 7, 7]), (u'Attribute 1_A11', [5, 8, 8, 8, 8, 8]), (u'Attribute 1_A12', [5, 9, 9, 9, 9, 9]), (u'Attribute 1_A13', [5, 10, 10, 10, 10, 10]), (u'Attribute 1_A14', [5, 11, 11, 11, 11, 11]), (u'Attribute 3_A30', [5, 12, 12, 12, 12, 12]), (u'Attribute 3_A31', [5, 13, 13, 13, 13, 13]), (u'Attribute 3_A32', [5, 14, 14, 14, 14, 14]), (u'Attribute 3_A33', [5, 15, 15, 15, 15, 15]), (u'Attribute 3_A34', [5, 16, 16, 16, 16, 16]), (u'Attribute 4_A40', [5, 17, 17, 17, 17, 17]), (u'Attribute 4_A41', [5, 18, 18, 18, 18, 18]), (u'Attribute 4_A410', [5, 19, 19, 19, 19, 19]), (u'Attribute 4_A42', [5, 20, 20, 20, 20, 20]), (u'Attribute 4_A43', [5, 21, 21, 21, 21, 21]), (u'Attribute 4_A44', [5, 22, 22, 22, 22, 22]), (u'Attribute 4_A45', [5, 23, 23, 23, 23, 23]), (u'Attribute 4_A46', [5, 24, 24, 24, 24, 24]), (u'Attribute 4_A48', [5, 25, 25, 25, 25, 25]), (u'Attribute 4_A49', [5, 26, 26, 26, 26, 26]), (u'Attribute 6_A61', [5, 27, 27, 27, 27, 27]), (u'Attribute 6_A62', [5, 28, 28, 28, 28, 28]), (u'Attribute 6_A63', [5, 29, 29, 29, 29, 29]), (u'Attribute 6_A64', [5, 30, 30, 30, 30, 30]), (u'Attribute 6_A65', [5, 31, 31, 31, 31, 31]), (u'Attribute 7_A71', [5, 32, 32, 32, 32, 32]), (u'Attribute 7_A72', [5, 33, 33, 33, 33, 33]), (u'Attribute 7_A73', [5, 34, 34, 34, 34, 34]), (u'Attribute 7_A74', [5, 35, 35, 35, 35, 35]), (u'Attribute 7_A75', [5, 36, 36, 36, 36, 36]), (u'Attribute 9_A91', [5, 37, 37, 37, 37, 37]), (u'Attribute 9_A92', [5, 38, 38, 38, 38, 38]), (u'Attribute 9_A93', [5, 39, 39, 39, 39, 39]), (u'Attribute 9_A94', [5, 40, 40, 40, 40, 40]), (u'Attribute 10_A101', [5, 41, 41, 41, 41, 41]), (u'Attribute 10_A102', [5, 42, 42, 42, 42, 42]), (u'Attribute 10_A103', [5, 43, 43, 43, 43, 43]), (u'Attribute 12_A121', [5, 44, 44, 44, 44, 44]), (u'Attribute 12_A122', [5, 45, 45, 45, 45, 45]), (u'Attribute 12_A123', [5, 46, 46, 46, 46, 46]), (u'Attribute 12_A124', [5, 47, 47, 47, 47, 47]), (u'Attribute 14_A141', [5, 48, 48, 48, 48, 48]), (u'Attribute 14_A142', [5, 49, 49, 49, 49, 49]), (u'Attribute 14_A143', [5, 50, 50, 50, 50, 50]), (u'Attribute 15_A151', [5, 51, 51, 51, 51, 51]), (u'Attribute 15_A152', [5, 52, 52, 52, 52, 52]), (u'Attribute 15_A153', [5, 53, 53, 53, 53, 53]), (u'Attribute 17_A171', [5, 54, 54, 54, 54, 54]), (u'Attribute 17_A172', [5, 55, 55, 55, 55, 55]), (u'Attribute 17_A173', [5, 56, 56, 56, 56, 56]), (u'Attribute 17_A174', [5, 57, 57, 57, 57, 57]), (u'Attribute 19', [5, 58, 58, 58, 58, 58]), (u'Attribute 20', [5, 59, 59, 59, 59, 59])]), None), ([0.34707465007943444, 0.62514262105170304, 0.6890476190476191, 0.7366666666666667, 0.6414285714285713, 0.35857142857142854, 0.2633333333333333, 0.7, 0.61, 0.3242857142857143, 0.22000000000000003, 0.22000000000000003, 0.0056879497149395775, 0.03762658152407959], 'Gaussian Naive Bayes', None, OrderedDict([(u'Attribute 2', [5, 1, 1, 1, 1, 1]), (u'Attribute 5', [5, 2, 2, 2, 2, 2]), (u'Attribute 8', [5, 3, 3, 3, 3, 3]), (u'Attribute 11', [5, 4, 4, 4, 4, 4]), (u'Attribute 13', [5, 5, 5, 5, 5, 5]), (u'Attribute 16', [5, 6, 6, 6, 6, 6]), (u'Attribute 18', [5, 7, 7, 7, 7, 7]), (u'Attribute 1_A11', [5, 8, 8, 8, 8, 8]), (u'Attribute 1_A12', [5, 9, 9, 9, 9, 9]), (u'Attribute 1_A13', [5, 10, 10, 10, 10, 10]), (u'Attribute 1_A14', [5, 11, 11, 11, 11, 11]), (u'Attribute 3_A30', [5, 12, 12, 12, 12, 12]), (u'Attribute 3_A31', [5, 13, 13, 13, 13, 13]), (u'Attribute 3_A32', [5, 14, 14, 14, 14, 14]), (u'Attribute 3_A33', [5, 15, 15, 15, 15, 15]), (u'Attribute 3_A34', [5, 16, 16, 16, 16, 16]), (u'Attribute 4_A40', [5, 17, 17, 17, 17, 17]), (u'Attribute 4_A41', [5, 18, 18, 18, 18, 18]), (u'Attribute 4_A410', [5, 19, 19, 19, 19, 19]), (u'Attribute 4_A42', [5, 20, 20, 20, 20, 20]), (u'Attribute 4_A43', [5, 21, 21, 21, 21, 21]), (u'Attribute 4_A44', [5, 22, 22, 22, 22, 22]), (u'Attribute 4_A45', [5, 23, 23, 23, 23, 23]), (u'Attribute 4_A46', [5, 24, 24, 24, 24, 24]), (u'Attribute 4_A48', [5, 25, 25, 25, 25, 25]), (u'Attribute 4_A49', [5, 26, 26, 26, 26, 26]), (u'Attribute 6_A61', [5, 27, 27, 27, 27, 27]), (u'Attribute 6_A62', [5, 28, 28, 28, 28, 28]), (u'Attribute 6_A63', [5, 29, 29, 29, 29, 29]), (u'Attribute 6_A64', [5, 30, 30, 30, 30, 30]), (u'Attribute 6_A65', [5, 31, 31, 31, 31, 31]), (u'Attribute 7_A71', [5, 32, 32, 32, 32, 32]), (u'Attribute 7_A72', [5, 33, 33, 33, 33, 33]), (u'Attribute 7_A73', [5, 34, 34, 34, 34, 34]), (u'Attribute 7_A74', [5, 35, 35, 35, 35, 35]), (u'Attribute 7_A75', [5, 36, 36, 36, 36, 36]), (u'Attribute 9_A91', [5, 37, 37, 37, 37, 37]), (u'Attribute 9_A92', [5, 38, 38, 38, 38, 38]), (u'Attribute 9_A93', [5, 39, 39, 39, 39, 39]), (u'Attribute 9_A94', [5, 40, 40, 40, 40, 40]), (u'Attribute 10_A101', [5, 41, 41, 41, 41, 41]), (u'Attribute 10_A102', [5, 42, 42, 42, 42, 42]), (u'Attribute 10_A103', [5, 43, 43, 43, 43, 43]), (u'Attribute 12_A121', [5, 44, 44, 44, 44, 44]), (u'Attribute 12_A122', [5, 45, 45, 45, 45, 45]), (u'Attribute 12_A123', [5, 46, 46, 46, 46, 46]), (u'Attribute 12_A124', [5, 47, 47, 47, 47, 47]), (u'Attribute 14_A141', [5, 48, 48, 48, 48, 48]), (u'Attribute 14_A142', [5, 49, 49, 49, 49, 49]), (u'Attribute 14_A143', [5, 50, 50, 50, 50, 50]), (u'Attribute 15_A151', [5, 51, 51, 51, 51, 51]), (u'Attribute 15_A152', [5, 52, 52, 52, 52, 52]), (u'Attribute 15_A153', [5, 53, 53, 53, 53, 53]), (u'Attribute 17_A171', [5, 54, 54, 54, 54, 54]), (u'Attribute 17_A172', [5, 55, 55, 55, 55, 55]), (u'Attribute 17_A173', [5, 56, 56, 56, 56, 56]), (u'Attribute 17_A174', [5, 57, 57, 57, 57, 57]), (u'Attribute 19', [5, 58, 58, 58, 58, 58]), (u'Attribute 20', [5, 59, 59, 59, 59, 59])]), None), ([0.38610863881495933, 0.41278660230200909, 0.7078571428571427, 0.71, 0.7057142857142857, 0.2942857142857143, 0.2899999999999999, 0.3466666666666667, 0.38428571428571423, 0.10285714285714284, 0.06333333333333332, 0.06333333333333332, 0.005402088207746125, 0.024276375421963592], 'K-nearest neighbours', None, OrderedDict([(u'Attribute 2', [5, 1, 1, 1, 1, 1]), (u'Attribute 5', [5, 2, 2, 2, 2, 2]), (u'Attribute 8', [5, 3, 3, 3, 3, 3]), (u'Attribute 11', [5, 4, 4, 4, 4, 4]), (u'Attribute 13', [5, 5, 5, 5, 5, 5]), (u'Attribute 16', [5, 6, 6, 6, 6, 6]), (u'Attribute 18', [5, 7, 7, 7, 7, 7]), (u'Attribute 1_A11', [5, 8, 8, 8, 8, 8]), (u'Attribute 1_A12', [5, 9, 9, 9, 9, 9]), (u'Attribute 1_A13', [5, 10, 10, 10, 10, 10]), (u'Attribute 1_A14', [5, 11, 11, 11, 11, 11]), (u'Attribute 3_A30', [5, 12, 12, 12, 12, 12]), (u'Attribute 3_A31', [5, 13, 13, 13, 13, 13]), (u'Attribute 3_A32', [5, 14, 14, 14, 14, 14]), (u'Attribute 3_A33', [5, 15, 15, 15, 15, 15]), (u'Attribute 3_A34', [5, 16, 16, 16, 16, 16]), (u'Attribute 4_A40', [5, 17, 17, 17, 17, 17]), (u'Attribute 4_A41', [5, 18, 18, 18, 18, 18]), (u'Attribute 4_A410', [5, 19, 19, 19, 19, 19]), (u'Attribute 4_A42', [5, 20, 20, 20, 20, 20]), (u'Attribute 4_A43', [5, 21, 21, 21, 21, 21]), (u'Attribute 4_A44', [5, 22, 22, 22, 22, 22]), (u'Attribute 4_A45', [5, 23, 23, 23, 23, 23]), (u'Attribute 4_A46', [5, 24, 24, 24, 24, 24]), (u'Attribute 4_A48', [5, 25, 25, 25, 25, 25]), (u'Attribute 4_A49', [5, 26, 26, 26, 26, 26]), (u'Attribute 6_A61', [5, 27, 27, 27, 27, 27]), (u'Attribute 6_A62', [5, 28, 28, 28, 28, 28]), (u'Attribute 6_A63', [5, 29, 29, 29, 29, 29]), (u'Attribute 6_A64', [5, 30, 30, 30, 30, 30]), (u'Attribute 6_A65', [5, 31, 31, 31, 31, 31]), (u'Attribute 7_A71', [5, 32, 32, 32, 32, 32]), (u'Attribute 7_A72', [5, 33, 33, 33, 33, 33]), (u'Attribute 7_A73', [5, 34, 34, 34, 34, 34]), (u'Attribute 7_A74', [5, 35, 35, 35, 35, 35]), (u'Attribute 7_A75', [5, 36, 36, 36, 36, 36]), (u'Attribute 9_A91', [5, 37, 37, 37, 37, 37]), (u'Attribute 9_A92', [5, 38, 38, 38, 38, 38]), (u'Attribute 9_A93', [5, 39, 39, 39, 39, 39]), (u'Attribute 9_A94', [5, 40, 40, 40, 40, 40]), (u'Attribute 10_A101', [5, 41, 41, 41, 41, 41]), (u'Attribute 10_A102', [5, 42, 42, 42, 42, 42]), (u'Attribute 10_A103', [5, 43, 43, 43, 43, 43]), (u'Attribute 12_A121', [5, 44, 44, 44, 44, 44]), (u'Attribute 12_A122', [5, 45, 45, 45, 45, 45]), (u'Attribute 12_A123', [5, 46, 46, 46, 46, 46]), (u'Attribute 12_A124', [5, 47, 47, 47, 47, 47]), (u'Attribute 14_A141', [5, 48, 48, 48, 48, 48]), (u'Attribute 14_A142', [5, 49, 49, 49, 49, 49]), (u'Attribute 14_A143', [5, 50, 50, 50, 50, 50]), (u'Attribute 15_A151', [5, 51, 51, 51, 51, 51]), (u'Attribute 15_A152', [5, 52, 52, 52, 52, 52]), (u'Attribute 15_A153', [5, 53, 53, 53, 53, 53]), (u'Attribute 17_A171', [5, 54, 54, 54, 54, 54]), (u'Attribute 17_A172', [5, 55, 55, 55, 55, 55]), (u'Attribute 17_A173', [5, 56, 56, 56, 56, 56]), (u'Attribute 17_A174', [5, 57, 57, 57, 57, 57]), (u'Attribute 19', [5, 58, 58, 58, 58, 58]), (u'Attribute 20', [5, 59, 59, 59, 59, 59])]), None), ([0.40354370624199165, 0.51559817986115308, 0.719047619047619, 0.7566666666666666, 0.6814285714285714, 0.3185714285714286, 0.24333333333333332, 0.5900000000000001, 0.5357142857142858, 0.19714285714285712, 0.13999999999999999, 0.13999999999999999, 0.021828710698193282, 0.019934700656128082], 'Logistic regression', None, OrderedDict([(u'Attribute 2', [5, 1, 1, 1, 1, 1]), (u'Attribute 5', [5, 2, 2, 2, 2, 2]), (u'Attribute 8', [5, 3, 3, 3, 3, 3]), (u'Attribute 11', [5, 4, 4, 4, 4, 4]), (u'Attribute 13', [5, 5, 5, 5, 5, 5]), (u'Attribute 16', [5, 6, 6, 6, 6, 6]), (u'Attribute 18', [5, 7, 7, 7, 7, 7]), (u'Attribute 1_A11', [5, 8, 8, 8, 8, 8]), (u'Attribute 1_A12', [5, 9, 9, 9, 9, 9]), (u'Attribute 1_A13', [5, 10, 10, 10, 10, 10]), (u'Attribute 1_A14', [5, 11, 11, 11, 11, 11]), (u'Attribute 3_A30', [5, 12, 12, 12, 12, 12]), (u'Attribute 3_A31', [5, 13, 13, 13, 13, 13]), (u'Attribute 3_A32', [5, 14, 14, 14, 14, 14]), (u'Attribute 3_A33', [5, 15, 15, 15, 15, 15]), (u'Attribute 3_A34', [5, 16, 16, 16, 16, 16]), (u'Attribute 4_A40', [5, 17, 17, 17, 17, 17]), (u'Attribute 4_A41', [5, 18, 18, 18, 18, 18]), (u'Attribute 4_A410', [5, 19, 19, 19, 19, 19]), (u'Attribute 4_A42', [5, 20, 20, 20, 20, 20]), (u'Attribute 4_A43', [5, 21, 21, 21, 21, 21]), (u'Attribute 4_A44', [5, 22, 22, 22, 22, 22]), (u'Attribute 4_A45', [5, 23, 23, 23, 23, 23]), (u'Attribute 4_A46', [5, 24, 24, 24, 24, 24]), (u'Attribute 4_A48', [5, 25, 25, 25, 25, 25]), (u'Attribute 4_A49', [5, 26, 26, 26, 26, 26]), (u'Attribute 6_A61', [5, 27, 27, 27, 27, 27]), (u'Attribute 6_A62', [5, 28, 28, 28, 28, 28]), (u'Attribute 6_A63', [5, 29, 29, 29, 29, 29]), (u'Attribute 6_A64', [5, 30, 30, 30, 30, 30]), (u'Attribute 6_A65', [5, 31, 31, 31, 31, 31]), (u'Attribute 7_A71', [5, 32, 32, 32, 32, 32]), (u'Attribute 7_A72', [5, 33, 33, 33, 33, 33]), (u'Attribute 7_A73', [5, 34, 34, 34, 34, 34]), (u'Attribute 7_A74', [5, 35, 35, 35, 35, 35]), (u'Attribute 7_A75', [5, 36, 36, 36, 36, 36]), (u'Attribute 9_A91', [5, 37, 37, 37, 37, 37]), (u'Attribute 9_A92', [5, 38, 38, 38, 38, 38]), (u'Attribute 9_A93', [5, 39, 39, 39, 39, 39]), (u'Attribute 9_A94', [5, 40, 40, 40, 40, 40]), (u'Attribute 10_A101', [5, 41, 41, 41, 41, 41]), (u'Attribute 10_A102', [5, 42, 42, 42, 42, 42]), (u'Attribute 10_A103', [5, 43, 43, 43, 43, 43]), (u'Attribute 12_A121', [5, 44, 44, 44, 44, 44]), (u'Attribute 12_A122', [5, 45, 45, 45, 45, 45]), (u'Attribute 12_A123', [5, 46, 46, 46, 46, 46]), (u'Attribute 12_A124', [5, 47, 47, 47, 47, 47]), (u'Attribute 14_A141', [5, 48, 48, 48, 48, 48]), (u'Attribute 14_A142', [5, 49, 49, 49, 49, 49]), (u'Attribute 14_A143', [5, 50, 50, 50, 50, 50]), (u'Attribute 15_A151', [5, 51, 51, 51, 51, 51]), (u'Attribute 15_A152', [5, 52, 52, 52, 52, 52]), (u'Attribute 15_A153', [5, 53, 53, 53, 53, 53]), (u'Attribute 17_A171', [5, 54, 54, 54, 54, 54]), (u'Attribute 17_A172', [5, 55, 55, 55, 55, 55]), (u'Attribute 17_A173', [5, 56, 56, 56, 56, 56]), (u'Attribute 17_A174', [5, 57, 57, 57, 57, 57]), (u'Attribute 19', [5, 58, 58, 58, 58, 58]), (u'Attribute 20', [5, 59, 59, 59, 59, 59])]), None), ([0.37719925512590896, 0.45652775086505187, 0.7011904761904763, 0.6766666666666666, 0.7257142857142856, 0.27428571428571435, 0.32333333333333336, 0.38333333333333336, 0.4871428571428572, 0.07714285714285714, 0.16, 0.16, 2.1458295160609175, 0.03260253318483137], 'Random forest', None, OrderedDict([(u'Attribute 2', [5, 1, 1, 1, 1, 1]), (u'Attribute 5', [5, 2, 2, 2, 2, 2]), (u'Attribute 8', [5, 3, 3, 3, 3, 3]), (u'Attribute 11', [5, 4, 4, 4, 4, 4]), (u'Attribute 13', [5, 5, 5, 5, 5, 5]), (u'Attribute 16', [5, 6, 6, 6, 6, 6]), (u'Attribute 18', [5, 7, 7, 7, 7, 7]), (u'Attribute 1_A11', [5, 8, 8, 8, 8, 8]), (u'Attribute 1_A12', [5, 9, 9, 9, 9, 9]), (u'Attribute 1_A13', [5, 10, 10, 10, 10, 10]), (u'Attribute 1_A14', [5, 11, 11, 11, 11, 11]), (u'Attribute 3_A30', [5, 12, 12, 12, 12, 12]), (u'Attribute 3_A31', [5, 13, 13, 13, 13, 13]), (u'Attribute 3_A32', [5, 14, 14, 14, 14, 14]), (u'Attribute 3_A33', [5, 15, 15, 15, 15, 15]), (u'Attribute 3_A34', [5, 16, 16, 16, 16, 16]), (u'Attribute 4_A40', [5, 17, 17, 17, 17, 17]), (u'Attribute 4_A41', [5, 18, 18, 18, 18, 18]), (u'Attribute 4_A410', [5, 19, 19, 19, 19, 19]), (u'Attribute 4_A42', [5, 20, 20, 20, 20, 20]), (u'Attribute 4_A43', [5, 21, 21, 21, 21, 21]), (u'Attribute 4_A44', [5, 22, 22, 22, 22, 22]), (u'Attribute 4_A45', [5, 23, 23, 23, 23, 23]), (u'Attribute 4_A46', [5, 24, 24, 24, 24, 24]), (u'Attribute 4_A48', [5, 25, 25, 25, 25, 25]), (u'Attribute 4_A49', [5, 26, 26, 26, 26, 26]), (u'Attribute 6_A61', [5, 27, 27, 27, 27, 27]), (u'Attribute 6_A62', [5, 28, 28, 28, 28, 28]), (u'Attribute 6_A63', [5, 29, 29, 29, 29, 29]), (u'Attribute 6_A64', [5, 30, 30, 30, 30, 30]), (u'Attribute 6_A65', [5, 31, 31, 31, 31, 31]), (u'Attribute 7_A71', [5, 32, 32, 32, 32, 32]), (u'Attribute 7_A72', [5, 33, 33, 33, 33, 33]), (u'Attribute 7_A73', [5, 34, 34, 34, 34, 34]), (u'Attribute 7_A74', [5, 35, 35, 35, 35, 35]), (u'Attribute 7_A75', [5, 36, 36, 36, 36, 36]), (u'Attribute 9_A91', [5, 37, 37, 37, 37, 37]), (u'Attribute 9_A92', [5, 38, 38, 38, 38, 38]), (u'Attribute 9_A93', [5, 39, 39, 39, 39, 39]), (u'Attribute 9_A94', [5, 40, 40, 40, 40, 40]), (u'Attribute 10_A101', [5, 41, 41, 41, 41, 41]), (u'Attribute 10_A102', [5, 42, 42, 42, 42, 42]), (u'Attribute 10_A103', [5, 43, 43, 43, 43, 43]), (u'Attribute 12_A121', [5, 44, 44, 44, 44, 44]), (u'Attribute 12_A122', [5, 45, 45, 45, 45, 45]), (u'Attribute 12_A123', [5, 46, 46, 46, 46, 46]), (u'Attribute 12_A124', [5, 47, 47, 47, 47, 47]), (u'Attribute 14_A141', [5, 48, 48, 48, 48, 48]), (u'Attribute 14_A142', [5, 49, 49, 49, 49, 49]), (u'Attribute 14_A143', [5, 50, 50, 50, 50, 50]), (u'Attribute 15_A151', [5, 51, 51, 51, 51, 51]), (u'Attribute 15_A152', [5, 52, 52, 52, 52, 52]), (u'Attribute 15_A153', [5, 53, 53, 53, 53, 53]), (u'Attribute 17_A171', [5, 54, 54, 54, 54, 54]), (u'Attribute 17_A172', [5, 55, 55, 55, 55, 55]), (u'Attribute 17_A173', [5, 56, 56, 56, 56, 56]), (u'Attribute 17_A174', [5, 57, 57, 57, 57, 57]), (u'Attribute 19', [5, 58, 58, 58, 58, 58]), (u'Attribute 20', [5, 59, 59, 59, 59, 59])]), None), ([0.40839596298403236, 0.51029002602305673, 0.7204761904761904, 0.7366666666666666, 0.7042857142857143, 0.2957142857142857, 0.2633333333333333, 0.19666666666666666, 0.6757142857142858, 0.02857142857142857, 0.24, 0.24, 1.3653605884822873, 0.026846755843485597], 'SVM (RDF)', None, OrderedDict([(u'Attribute 2', [5, 1, 1, 1, 1, 1]), (u'Attribute 5', [5, 2, 2, 2, 2, 2]), (u'Attribute 8', [5, 3, 3, 3, 3, 3]), (u'Attribute 11', [5, 4, 4, 4, 4, 4]), (u'Attribute 13', [5, 5, 5, 5, 5, 5]), (u'Attribute 16', [5, 6, 6, 6, 6, 6]), (u'Attribute 18', [5, 7, 7, 7, 7, 7]), (u'Attribute 1_A11', [5, 8, 8, 8, 8, 8]), (u'Attribute 1_A12', [5, 9, 9, 9, 9, 9]), (u'Attribute 1_A13', [5, 10, 10, 10, 10, 10]), (u'Attribute 1_A14', [5, 11, 11, 11, 11, 11]), (u'Attribute 3_A30', [5, 12, 12, 12, 12, 12]), (u'Attribute 3_A31', [5, 13, 13, 13, 13, 13]), (u'Attribute 3_A32', [5, 14, 14, 14, 14, 14]), (u'Attribute 3_A33', [5, 15, 15, 15, 15, 15]), (u'Attribute 3_A34', [5, 16, 16, 16, 16, 16]), (u'Attribute 4_A40', [5, 17, 17, 17, 17, 17]), (u'Attribute 4_A41', [5, 18, 18, 18, 18, 18]), (u'Attribute 4_A410', [5, 19, 19, 19, 19, 19]), (u'Attribute 4_A42', [5, 20, 20, 20, 20, 20]), (u'Attribute 4_A43', [5, 21, 21, 21, 21, 21]), (u'Attribute 4_A44', [5, 22, 22, 22, 22, 22]), (u'Attribute 4_A45', [5, 23, 23, 23, 23, 23]), (u'Attribute 4_A46', [5, 24, 24, 24, 24, 24]), (u'Attribute 4_A48', [5, 25, 25, 25, 25, 25]), (u'Attribute 4_A49', [5, 26, 26, 26, 26, 26]), (u'Attribute 6_A61', [5, 27, 27, 27, 27, 27]), (u'Attribute 6_A62', [5, 28, 28, 28, 28, 28]), (u'Attribute 6_A63', [5, 29, 29, 29, 29, 29]), (u'Attribute 6_A64', [5, 30, 30, 30, 30, 30]), (u'Attribute 6_A65', [5, 31, 31, 31, 31, 31]), (u'Attribute 7_A71', [5, 32, 32, 32, 32, 32]), (u'Attribute 7_A72', [5, 33, 33, 33, 33, 33]), (u'Attribute 7_A73', [5, 34, 34, 34, 34, 34]), (u'Attribute 7_A74', [5, 35, 35, 35, 35, 35]), (u'Attribute 7_A75', [5, 36, 36, 36, 36, 36]), (u'Attribute 9_A91', [5, 37, 37, 37, 37, 37]), (u'Attribute 9_A92', [5, 38, 38, 38, 38, 38]), (u'Attribute 9_A93', [5, 39, 39, 39, 39, 39]), (u'Attribute 9_A94', [5, 40, 40, 40, 40, 40]), (u'Attribute 10_A101', [5, 41, 41, 41, 41, 41]), (u'Attribute 10_A102', [5, 42, 42, 42, 42, 42]), (u'Attribute 10_A103', [5, 43, 43, 43, 43, 43]), (u'Attribute 12_A121', [5, 44, 44, 44, 44, 44]), (u'Attribute 12_A122', [5, 45, 45, 45, 45, 45]), (u'Attribute 12_A123', [5, 46, 46, 46, 46, 46]), (u'Attribute 12_A124', [5, 47, 47, 47, 47, 47]), (u'Attribute 14_A141', [5, 48, 48, 48, 48, 48]), (u'Attribute 14_A142', [5, 49, 49, 49, 49, 49]), (u'Attribute 14_A143', [5, 50, 50, 50, 50, 50]), (u'Attribute 15_A151', [5, 51, 51, 51, 51, 51]), (u'Attribute 15_A152', [5, 52, 52, 52, 52, 52]), (u'Attribute 15_A153', [5, 53, 53, 53, 53, 53]), (u'Attribute 17_A171', [5, 54, 54, 54, 54, 54]), (u'Attribute 17_A172', [5, 55, 55, 55, 55, 55]), (u'Attribute 17_A173', [5, 56, 56, 56, 56, 56]), (u'Attribute 17_A174', [5, 57, 57, 57, 57, 57]), (u'Attribute 19', [5, 58, 58, 58, 58, 58]), (u'Attribute 20', [5, 59, 59, 59, 59, 59])]), None), ([0.36740102365700661, 0.48633523810696805, 0.6985714285714286, 0.71, 0.6871428571428572, 0.31285714285714283, 0.29, 0.13666666666666666, 0.6599999999999999, 0.02, 0.25666666666666665, 0.25666666666666665, 1.388049902302982, 0.03380952380952382], 'SVM (linear)', None, OrderedDict([(u'Attribute 2', [5, 1, 1, 1, 1, 1]), (u'Attribute 5', [5, 2, 2, 2, 2, 2]), (u'Attribute 8', [5, 3, 3, 3, 3, 3]), (u'Attribute 11', [5, 4, 4, 4, 4, 4]), (u'Attribute 13', [5, 5, 5, 5, 5, 5]), (u'Attribute 16', [5, 6, 6, 6, 6, 6]), (u'Attribute 18', [5, 7, 7, 7, 7, 7]), (u'Attribute 1_A11', [5, 8, 8, 8, 8, 8]), (u'Attribute 1_A12', [5, 9, 9, 9, 9, 9]), (u'Attribute 1_A13', [5, 10, 10, 10, 10, 10]), (u'Attribute 1_A14', [5, 11, 11, 11, 11, 11]), (u'Attribute 3_A30', [5, 12, 12, 12, 12, 12]), (u'Attribute 3_A31', [5, 13, 13, 13, 13, 13]), (u'Attribute 3_A32', [5, 14, 14, 14, 14, 14]), (u'Attribute 3_A33', [5, 15, 15, 15, 15, 15]), (u'Attribute 3_A34', [5, 16, 16, 16, 16, 16]), (u'Attribute 4_A40', [5, 17, 17, 17, 17, 17]), (u'Attribute 4_A41', [5, 18, 18, 18, 18, 18]), (u'Attribute 4_A410', [5, 19, 19, 19, 19, 19]), (u'Attribute 4_A42', [5, 20, 20, 20, 20, 20]), (u'Attribute 4_A43', [5, 21, 21, 21, 21, 21]), (u'Attribute 4_A44', [5, 22, 22, 22, 22, 22]), (u'Attribute 4_A45', [5, 23, 23, 23, 23, 23]), (u'Attribute 4_A46', [5, 24, 24, 24, 24, 24]), (u'Attribute 4_A48', [5, 25, 25, 25, 25, 25]), (u'Attribute 4_A49', [5, 26, 26, 26, 26, 26]), (u'Attribute 6_A61', [5, 27, 27, 27, 27, 27]), (u'Attribute 6_A62', [5, 28, 28, 28, 28, 28]), (u'Attribute 6_A63', [5, 29, 29, 29, 29, 29]), (u'Attribute 6_A64', [5, 30, 30, 30, 30, 30]), (u'Attribute 6_A65', [5, 31, 31, 31, 31, 31]), (u'Attribute 7_A71', [5, 32, 32, 32, 32, 32]), (u'Attribute 7_A72', [5, 33, 33, 33, 33, 33]), (u'Attribute 7_A73', [5, 34, 34, 34, 34, 34]), (u'Attribute 7_A74', [5, 35, 35, 35, 35, 35]), (u'Attribute 7_A75', [5, 36, 36, 36, 36, 36]), (u'Attribute 9_A91', [5, 37, 37, 37, 37, 37]), (u'Attribute 9_A92', [5, 38, 38, 38, 38, 38]), (u'Attribute 9_A93', [5, 39, 39, 39, 39, 39]), (u'Attribute 9_A94', [5, 40, 40, 40, 40, 40]), (u'Attribute 10_A101', [5, 41, 41, 41, 41, 41]), (u'Attribute 10_A102', [5, 42, 42, 42, 42, 42]), (u'Attribute 10_A103', [5, 43, 43, 43, 43, 43]), (u'Attribute 12_A121', [5, 44, 44, 44, 44, 44]), (u'Attribute 12_A122', [5, 45, 45, 45, 45, 45]), (u'Attribute 12_A123', [5, 46, 46, 46, 46, 46]), (u'Attribute 12_A124', [5, 47, 47, 47, 47, 47]), (u'Attribute 14_A141', [5, 48, 48, 48, 48, 48]), (u'Attribute 14_A142', [5, 49, 49, 49, 49, 49]), (u'Attribute 14_A143', [5, 50, 50, 50, 50, 50]), (u'Attribute 15_A151', [5, 51, 51, 51, 51, 51]), (u'Attribute 15_A152', [5, 52, 52, 52, 52, 52]), (u'Attribute 15_A153', [5, 53, 53, 53, 53, 53]), (u'Attribute 17_A171', [5, 54, 54, 54, 54, 54]), (u'Attribute 17_A172', [5, 55, 55, 55, 55, 55]), (u'Attribute 17_A173', [5, 56, 56, 56, 56, 56]), (u'Attribute 17_A174', [5, 57, 57, 57, 57, 57]), (u'Attribute 19', [5, 58, 58, 58, 58, 58]), (u'Attribute 20', [5, 59, 59, 59, 59, 59])]), None), ([0.40444347036066469, 0.51409285489438161, 0.7190476190476189, 0.7466666666666666, 0.6914285714285715, 0.30857142857142855, 0.2533333333333333, 0.5266666666666667, 0.5728571428571428, 0.16571428571428573, 0.16, 0.16, 0.707824485260624, 0.02284970116954301], 'SVM (polynomial)', None, OrderedDict([(u'Attribute 2', [5, 1, 1, 1, 1, 1]), (u'Attribute 5', [5, 2, 2, 2, 2, 2]), (u'Attribute 8', [5, 3, 3, 3, 3, 3]), (u'Attribute 11', [5, 4, 4, 4, 4, 4]), (u'Attribute 13', [5, 5, 5, 5, 5, 5]), (u'Attribute 16', [5, 6, 6, 6, 6, 6]), (u'Attribute 18', [5, 7, 7, 7, 7, 7]), (u'Attribute 1_A11', [5, 8, 8, 8, 8, 8]), (u'Attribute 1_A12', [5, 9, 9, 9, 9, 9]), (u'Attribute 1_A13', [5, 10, 10, 10, 10, 10]), (u'Attribute 1_A14', [5, 11, 11, 11, 11, 11]), (u'Attribute 3_A30', [5, 12, 12, 12, 12, 12]), (u'Attribute 3_A31', [5, 13, 13, 13, 13, 13]), (u'Attribute 3_A32', [5, 14, 14, 14, 14, 14]), (u'Attribute 3_A33', [5, 15, 15, 15, 15, 15]), (u'Attribute 3_A34', [5, 16, 16, 16, 16, 16]), (u'Attribute 4_A40', [5, 17, 17, 17, 17, 17]), (u'Attribute 4_A41', [5, 18, 18, 18, 18, 18]), (u'Attribute 4_A410', [5, 19, 19, 19, 19, 19]), (u'Attribute 4_A42', [5, 20, 20, 20, 20, 20]), (u'Attribute 4_A43', [5, 21, 21, 21, 21, 21]), (u'Attribute 4_A44', [5, 22, 22, 22, 22, 22]), (u'Attribute 4_A45', [5, 23, 23, 23, 23, 23]), (u'Attribute 4_A46', [5, 24, 24, 24, 24, 24]), (u'Attribute 4_A48', [5, 25, 25, 25, 25, 25]), (u'Attribute 4_A49', [5, 26, 26, 26, 26, 26]), (u'Attribute 6_A61', [5, 27, 27, 27, 27, 27]), (u'Attribute 6_A62', [5, 28, 28, 28, 28, 28]), (u'Attribute 6_A63', [5, 29, 29, 29, 29, 29]), (u'Attribute 6_A64', [5, 30, 30, 30, 30, 30]), (u'Attribute 6_A65', [5, 31, 31, 31, 31, 31]), (u'Attribute 7_A71', [5, 32, 32, 32, 32, 32]), (u'Attribute 7_A72', [5, 33, 33, 33, 33, 33]), (u'Attribute 7_A73', [5, 34, 34, 34, 34, 34]), (u'Attribute 7_A74', [5, 35, 35, 35, 35, 35]), (u'Attribute 7_A75', [5, 36, 36, 36, 36, 36]), (u'Attribute 9_A91', [5, 37, 37, 37, 37, 37]), (u'Attribute 9_A92', [5, 38, 38, 38, 38, 38]), (u'Attribute 9_A93', [5, 39, 39, 39, 39, 39]), (u'Attribute 9_A94', [5, 40, 40, 40, 40, 40]), (u'Attribute 10_A101', [5, 41, 41, 41, 41, 41]), (u'Attribute 10_A102', [5, 42, 42, 42, 42, 42]), (u'Attribute 10_A103', [5, 43, 43, 43, 43, 43]), (u'Attribute 12_A121', [5, 44, 44, 44, 44, 44]), (u'Attribute 12_A122', [5, 45, 45, 45, 45, 45]), (u'Attribute 12_A123', [5, 46, 46, 46, 46, 46]), (u'Attribute 12_A124', [5, 47, 47, 47, 47, 47]), (u'Attribute 14_A141', [5, 48, 48, 48, 48, 48]), (u'Attribute 14_A142', [5, 49, 49, 49, 49, 49]), (u'Attribute 14_A143', [5, 50, 50, 50, 50, 50]), (u'Attribute 15_A151', [5, 51, 51, 51, 51, 51]), (u'Attribute 15_A152', [5, 52, 52, 52, 52, 52]), (u'Attribute 15_A153', [5, 53, 53, 53, 53, 53]), (u'Attribute 17_A171', [5, 54, 54, 54, 54, 54]), (u'Attribute 17_A172', [5, 55, 55, 55, 55, 55]), (u'Attribute 17_A173', [5, 56, 56, 56, 56, 56]), (u'Attribute 17_A174', [5, 57, 57, 57, 57, 57]), (u'Attribute 19', [5, 58, 58, 58, 58, 58]), (u'Attribute 20', [5, 59, 59, 59, 59, 59])]), None)], None), ('Logistic regression', [([0.31753393088133275, 0.26594511078926303, 0.6716666666666666, 0.6733333333333333, 0.67, 0.33, 0.32666666666666666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18125279786572848, 0.025134558515041223], 'AdaBoost', 'Logistic regression', OrderedDict([(u'Attribute 1_A14', [5, 1, 1, 3, 1, 2]), (u'Attribute 3_A34', [5, 2, 6, 2, 2, 1]), (u'Attribute 20', [4, 3, 12, 1, 5]), (u'Attribute 4_A46', [4, 4, 9, 14, 5]), (u'Attribute 4_A41', [5, 5, 2, 4, 4, 4]), (u'Attribute 10_A103', [5, 6, 5, 5, 13, 3]), (u'Attribute 1_A11', [5, 7, 4, 6, 8, 6]), (u'Attribute 6_A61', [4, 8, 15, 11, 12]), (u'Attribute 4_A40', [5, 9, 3, 11, 6, 8]), (u'Attribute 3_A30', [2, 10, 12]), (u'Attribute 3_A31', [4, 11, 14, 7, 7]), (u'Attribute 7_A74', [4, 12, 7, 7, 9]), (u'Attribute 9_A93', [3, 13, 11, 9]), (u'Attribute 14_A143', [3, 14, 13, 9]), (u'Attribute 3_A33', [1, 15]), (u'Attribute 4_A410', [2, 8, 13]), (u'Attribute 6_A64', [3, 10, 10, 3]), (u'Attribute 8', [1, 13]), (u'Attribute 4_A45', [2, 15, 12]), (u'Attribute 6_A65', [2, 8, 10]), (u'Attribute 4_A48', [1, 10]), (u'Attribute 12_A121', [2, 14, 15]), (u'Attribute 19', [1, 15]), (u'Attribute 1_A13', [1, 11]), (u'Attribute 1_A12', [1, 14])]), None), ([0.33038254658304644, 0.45380659230093218, 0.6802380952380951, 0.7533333333333332, 0.6071428571428571, 0.39285714285714285, 0.24666666666666667, 0.57, 0.46571428571428575, 0.24142857142857138, 0.13333333333333333, 0.13333333333333333, 3.831422005540341, 0.024543450294955492], 'Artificial neural network', 'Logistic regression', OrderedDict([(u'Attribute 1_A14', [5, 1, 1, 3, 1, 2]), (u'Attribute 3_A34', [5, 2, 6, 2, 2, 1]), (u'Attribute 20', [4, 3, 12, 1, 5]), (u'Attribute 4_A46', [4, 4, 9, 14, 5]), (u'Attribute 4_A41', [5, 5, 2, 4, 4, 4]), (u'Attribute 10_A103', [5, 6, 5, 5, 13, 3]), (u'Attribute 1_A11', [5, 7, 4, 6, 8, 6]), (u'Attribute 6_A61', [4, 8, 15, 11, 12]), (u'Attribute 4_A40', [5, 9, 3, 11, 6, 8]), (u'Attribute 3_A30', [2, 10, 12]), (u'Attribute 3_A31', [4, 11, 14, 7, 7]), (u'Attribute 7_A74', [4, 12, 7, 7, 9]), (u'Attribute 9_A93', [3, 13, 11, 9]), (u'Attribute 14_A143', [3, 14, 13, 9]), (u'Attribute 3_A33', [1, 15]), (u'Attribute 4_A410', [2, 8, 13]), (u'Attribute 6_A64', [3, 10, 10, 3]), (u'Attribute 8', [1, 13]), (u'Attribute 4_A45', [2, 15, 12]), (u'Attribute 6_A65', [2, 8, 10]), (u'Attribute 4_A48', [1, 10]), (u'Attribute 12_A121', [2, 14, 15]), (u'Attribute 19', [1, 15]), (u'Attribute 1_A13', [1, 11]), (u'Attribute 1_A12', [1, 14])]), None), ([0.32428803283919411, 0.43460267020463161, 0.6764285714285714, 0.71, 0.6428571428571429, 0.35714285714285715, 0.29, 0.4533333333333333, 0.46142857142857147, 0.1814285714285714, 0.14333333333333334, 0.14333333333333334, 0.008819446310107892, 0.019451084062381035], 'Bernoulli Naive Bayes', 'Logistic regression', OrderedDict([(u'Attribute 1_A14', [5, 1, 1, 3, 1, 2]), (u'Attribute 3_A34', [5, 2, 6, 2, 2, 1]), (u'Attribute 20', [4, 3, 12, 1, 5]), (u'Attribute 4_A46', [4, 4, 9, 14, 5]), (u'Attribute 4_A41', [5, 5, 2, 4, 4, 4]), (u'Attribute 10_A103', [5, 6, 5, 5, 13, 3]), (u'Attribute 1_A11', [5, 7, 4, 6, 8, 6]), (u'Attribute 6_A61', [4, 8, 15, 11, 12]), (u'Attribute 4_A40', [5, 9, 3, 11, 6, 8]), (u'Attribute 3_A30', [2, 10, 12]), (u'Attribute 3_A31', [4, 11, 14, 7, 7]), (u'Attribute 7_A74', [4, 12, 7, 7, 9]), (u'Attribute 9_A93', [3, 13, 11, 9]), (u'Attribute 14_A143', [3, 14, 13, 9]), (u'Attribute 3_A33', [1, 15]), (u'Attribute 4_A410', [2, 8, 13]), (u'Attribute 6_A64', [3, 10, 10, 3]), (u'Attribute 8', [1, 13]), (u'Attribute 4_A45', [2, 15, 12]), (u'Attribute 6_A65', [2, 8, 10]), (u'Attribute 4_A48', [1, 10]), (u'Attribute 12_A121', [2, 14, 15]), (u'Attribute 19', [1, 15]), (u'Attribute 1_A13', [1, 11]), (u'Attribute 1_A12', [1, 14])]), None), ([0.31443802887249822, 0.42454104810229637, 0.6707142857142857, 0.6900000000000001, 0.6514285714285715, 0.3485714285714286, 0.31000000000000005, 0.4166666666666667, 0.39142857142857135, 0.13857142857142857, 0.12, 0.12, 0.006563343981950861, 0.03486774493981808], 'Decision Tree', 'Logistic regression', OrderedDict([(u'Attribute 1_A14', [5, 1, 1, 3, 1, 2]), (u'Attribute 3_A34', [5, 2, 6, 2, 2, 1]), (u'Attribute 20', [4, 3, 12, 1, 5]), (u'Attribute 4_A46', [4, 4, 9, 14, 5]), (u'Attribute 4_A41', [5, 5, 2, 4, 4, 4]), (u'Attribute 10_A103', [5, 6, 5, 5, 13, 3]), (u'Attribute 1_A11', [5, 7, 4, 6, 8, 6]), (u'Attribute 6_A61', [4, 8, 15, 11, 12]), (u'Attribute 4_A40', [5, 9, 3, 11, 6, 8]), (u'Attribute 3_A30', [2, 10, 12]), (u'Attribute 3_A31', [4, 11, 14, 7, 7]), (u'Attribute 7_A74', [4, 12, 7, 7, 9]), (u'Attribute 9_A93', [3, 13, 11, 9]), (u'Attribute 14_A143', [3, 14, 13, 9]), (u'Attribute 3_A33', [1, 15]), (u'Attribute 4_A410', [2, 8, 13]), (u'Attribute 6_A64', [3, 10, 10, 3]), (u'Attribute 8', [1, 13]), (u'Attribute 4_A45', [2, 15, 12]), (u'Attribute 6_A65', [2, 8, 10]), (u'Attribute 4_A48', [1, 10]), (u'Attribute 12_A121', [2, 14, 15]), (u'Attribute 19', [1, 15]), (u'Attribute 1_A13', [1, 11]), (u'Attribute 1_A12', [1, 14])]), None), ([0.33652496780689661, 0.44711710379462899, 0.6835714285714285, 0.75, 0.6171428571428572, 0.3828571428571429, 0.25, 0.49000000000000005, 0.41999999999999993, 0.19857142857142857, 0.11666666666666667, 0.11666666666666667, 0.02308625984177098, 0.028165771027905007], 'Extreme Learning Machine', 'Logistic regression', OrderedDict([(u'Attribute 1_A14', [5, 1, 1, 3, 1, 2]), (u'Attribute 3_A34', [5, 2, 6, 2, 2, 1]), (u'Attribute 20', [4, 3, 12, 1, 5]), (u'Attribute 4_A46', [4, 4, 9, 14, 5]), (u'Attribute 4_A41', [5, 5, 2, 4, 4, 4]), (u'Attribute 10_A103', [5, 6, 5, 5, 13, 3]), (u'Attribute 1_A11', [5, 7, 4, 6, 8, 6]), (u'Attribute 6_A61', [4, 8, 15, 11, 12]), (u'Attribute 4_A40', [5, 9, 3, 11, 6, 8]), (u'Attribute 3_A30', [2, 10, 12]), (u'Attribute 3_A31', [4, 11, 14, 7, 7]), (u'Attribute 7_A74', [4, 12, 7, 7, 9]), (u'Attribute 9_A93', [3, 13, 11, 9]), (u'Attribute 14_A143', [3, 14, 13, 9]), (u'Attribute 3_A33', [1, 15]), (u'Attribute 4_A410', [2, 8, 13]), (u'Attribute 6_A64', [3, 10, 10, 3]), (u'Attribute 8', [1, 13]), (u'Attribute 4_A45', [2, 15, 12]), (u'Attribute 6_A65', [2, 8, 10]), (u'Attribute 4_A48', [1, 10]), (u'Attribute 12_A121', [2, 14, 15]), (u'Attribute 19', [1, 15]), (u'Attribute 1_A13', [1, 11]), (u'Attribute 1_A12', [1, 14])]), None), ([0.25820395085350439, 0.54386849606732923, 0.6402380952380952, 0.7433333333333334, 0.5371428571428571, 0.4628571428571428, 0.2566666666666667, 0.7066666666666667, 0.5057142857142857, 0.42857142857142855, 0.23666666666666666, 0.23666666666666666, 0.004864475383763001, 0.06599749187840674], 'Gaussian Naive Bayes', 'Logistic regression', OrderedDict([(u'Attribute 1_A14', [5, 1, 1, 3, 1, 2]), (u'Attribute 3_A34', [5, 2, 6, 2, 2, 1]), (u'Attribute 20', [4, 3, 12, 1, 5]), (u'Attribute 4_A46', [4, 4, 9, 14, 5]), (u'Attribute 4_A41', [5, 5, 2, 4, 4, 4]), (u'Attribute 10_A103', [5, 6, 5, 5, 13, 3]), (u'Attribute 1_A11', [5, 7, 4, 6, 8, 6]), (u'Attribute 6_A61', [4, 8, 15, 11, 12]), (u'Attribute 4_A40', [5, 9, 3, 11, 6, 8]), (u'Attribute 3_A30', [2, 10, 12]), (u'Attribute 3_A31', [4, 11, 14, 7, 7]), (u'Attribute 7_A74', [4, 12, 7, 7, 9]), (u'Attribute 9_A93', [3, 13, 11, 9]), (u'Attribute 14_A143', [3, 14, 13, 9]), (u'Attribute 3_A33', [1, 15]), (u'Attribute 4_A410', [2, 8, 13]), (u'Attribute 6_A64', [3, 10, 10, 3]), (u'Attribute 8', [1, 13]), (u'Attribute 4_A45', [2, 15, 12]), (u'Attribute 6_A65', [2, 8, 10]), (u'Attribute 4_A48', [1, 10]), (u'Attribute 12_A121', [2, 14, 15]), (u'Attribute 19', [1, 15]), (u'Attribute 1_A13', [1, 11]), (u'Attribute 1_A12', [1, 14])]), None), ([0.29206646266304287, 0.50403878837435767, 0.6569047619047619, 0.8066666666666666, 0.5071428571428571, 0.4928571428571429, 0.1933333333333333, 0.76, 0.39571428571428574, 0.4357142857142858, 0.12333333333333334, 0.12333333333333334, 0.004047340114520015, 0.02942572031188049], 'K-nearest neighbours', 'Logistic regression', OrderedDict([(u'Attribute 1_A14', [5, 1, 1, 3, 1, 2]), (u'Attribute 3_A34', [5, 2, 6, 2, 2, 1]), (u'Attribute 20', [4, 3, 12, 1, 5]), (u'Attribute 4_A46', [4, 4, 9, 14, 5]), (u'Attribute 4_A41', [5, 5, 2, 4, 4, 4]), (u'Attribute 10_A103', [5, 6, 5, 5, 13, 3]), (u'Attribute 1_A11', [5, 7, 4, 6, 8, 6]), (u'Attribute 6_A61', [4, 8, 15, 11, 12]), (u'Attribute 4_A40', [5, 9, 3, 11, 6, 8]), (u'Attribute 3_A30', [2, 10, 12]), (u'Attribute 3_A31', [4, 11, 14, 7, 7]), (u'Attribute 7_A74', [4, 12, 7, 7, 9]), (u'Attribute 9_A93', [3, 13, 11, 9]), (u'Attribute 14_A143', [3, 14, 13, 9]), (u'Attribute 3_A33', [1, 15]), (u'Attribute 4_A410', [2, 8, 13]), (u'Attribute 6_A64', [3, 10, 10, 3]), (u'Attribute 8', [1, 13]), (u'Attribute 4_A45', [2, 15, 12]), (u'Attribute 6_A65', [2, 8, 10]), (u'Attribute 4_A48', [1, 10]), (u'Attribute 12_A121', [2, 14, 15]), (u'Attribute 19', [1, 15]), (u'Attribute 1_A13', [1, 11]), (u'Attribute 1_A12', [1, 14])]), None), ([0.32385866777379457, 0.4593991318903326, 0.6766666666666665, 0.7533333333333332, 0.6, 0.39999999999999997, 0.24666666666666667, 0.6033333333333333, 0.45285714285714285, 0.27428571428571424, 0.12, 0.12, 0.007139896757811433, 0.028666508463414134], 'Logistic regression', 'Logistic regression', OrderedDict([(u'Attribute 1_A14', [5, 1, 1, 3, 1, 2]), (u'Attribute 3_A34', [5, 2, 6, 2, 2, 1]), (u'Attribute 20', [4, 3, 12, 1, 5]), (u'Attribute 4_A46', [4, 4, 9, 14, 5]), (u'Attribute 4_A41', [5, 5, 2, 4, 4, 4]), (u'Attribute 10_A103', [5, 6, 5, 5, 13, 3]), (u'Attribute 1_A11', [5, 7, 4, 6, 8, 6]), (u'Attribute 6_A61', [4, 8, 15, 11, 12]), (u'Attribute 4_A40', [5, 9, 3, 11, 6, 8]), (u'Attribute 3_A30', [2, 10, 12]), (u'Attribute 3_A31', [4, 11, 14, 7, 7]), (u'Attribute 7_A74', [4, 12, 7, 7, 9]), (u'Attribute 9_A93', [3, 13, 11, 9]), (u'Attribute 14_A143', [3, 14, 13, 9]), (u'Attribute 3_A33', [1, 15]), (u'Attribute 4_A410', [2, 8, 13]), (u'Attribute 6_A64', [3, 10, 10, 3]), (u'Attribute 8', [1, 13]), (u'Attribute 4_A45', [2, 15, 12]), (u'Attribute 6_A65', [2, 8, 10]), (u'Attribute 4_A48', [1, 10]), (u'Attribute 12_A121', [2, 14, 15]), (u'Attribute 19', [1, 15]), (u'Attribute 1_A13', [1, 11]), (u'Attribute 1_A12', [1, 14])]), None), ([0.2336092084109874, 0.49997063645911161, 0.6264285714285716, 0.74, 0.5128571428571429, 0.4871428571428572, 0.25999999999999995, 0.6599999999999999, 0.4471428571428572, 0.3985714285714286, 0.1933333333333333, 0.1933333333333333, 1.811201605412715, 0.03347249861102853], 'Random forest', 'Logistic regression', OrderedDict([(u'Attribute 1_A14', [5, 1, 1, 3, 1, 2]), (u'Attribute 3_A34', [5, 2, 6, 2, 2, 1]), (u'Attribute 20', [4, 3, 12, 1, 5]), (u'Attribute 4_A46', [4, 4, 9, 14, 5]), (u'Attribute 4_A41', [5, 5, 2, 4, 4, 4]), (u'Attribute 10_A103', [5, 6, 5, 5, 13, 3]), (u'Attribute 1_A11', [5, 7, 4, 6, 8, 6]), (u'Attribute 6_A61', [4, 8, 15, 11, 12]), (u'Attribute 4_A40', [5, 9, 3, 11, 6, 8]), (u'Attribute 3_A30', [2, 10, 12]), (u'Attribute 3_A31', [4, 11, 14, 7, 7]), (u'Attribute 7_A74', [4, 12, 7, 7, 9]), (u'Attribute 9_A93', [3, 13, 11, 9]), (u'Attribute 14_A143', [3, 14, 13, 9]), (u'Attribute 3_A33', [1, 15]), (u'Attribute 4_A410', [2, 8, 13]), (u'Attribute 6_A64', [3, 10, 10, 3]), (u'Attribute 8', [1, 13]), (u'Attribute 4_A45', [2, 15, 12]), (u'Attribute 6_A65', [2, 8, 10]), (u'Attribute 4_A48', [1, 10]), (u'Attribute 12_A121', [2, 14, 15]), (u'Attribute 19', [1, 15]), (u'Attribute 1_A13', [1, 11]), (u'Attribute 1_A12', [1, 14])]), None), ([0.32333958052764195, 0.46683262863568459, 0.6754761904761903, 0.7966666666666666, 0.5542857142857143, 0.44571428571428573, 0.2033333333333333, 0.026666666666666665, 0.5757142857142857, 0.004285714285714286, 0.21999999999999997, 0.21999999999999997, 0.8081633835859955, 0.03179797338056487], 'SVM (RDF)', 'Logistic regression', OrderedDict([(u'Attribute 1_A14', [5, 1, 1, 3, 1, 2]), (u'Attribute 3_A34', [5, 2, 6, 2, 2, 1]), (u'Attribute 20', [4, 3, 12, 1, 5]), (u'Attribute 4_A46', [4, 4, 9, 14, 5]), (u'Attribute 4_A41', [5, 5, 2, 4, 4, 4]), (u'Attribute 10_A103', [5, 6, 5, 5, 13, 3]), (u'Attribute 1_A11', [5, 7, 4, 6, 8, 6]), (u'Attribute 6_A61', [4, 8, 15, 11, 12]), (u'Attribute 4_A40', [5, 9, 3, 11, 6, 8]), (u'Attribute 3_A30', [2, 10, 12]), (u'Attribute 3_A31', [4, 11, 14, 7, 7]), (u'Attribute 7_A74', [4, 12, 7, 7, 9]), (u'Attribute 9_A93', [3, 13, 11, 9]), (u'Attribute 14_A143', [3, 14, 13, 9]), (u'Attribute 3_A33', [1, 15]), (u'Attribute 4_A410', [2, 8, 13]), (u'Attribute 6_A64', [3, 10, 10, 3]), (u'Attribute 8', [1, 13]), (u'Attribute 4_A45', [2, 15, 12]), (u'Attribute 6_A65', [2, 8, 10]), (u'Attribute 4_A48', [1, 10]), (u'Attribute 12_A121', [2, 14, 15]), (u'Attribute 19', [1, 15]), (u'Attribute 1_A13', [1, 11]), (u'Attribute 1_A12', [1, 14])]), None), ([0.31607054649096045, 0.45201344277739836, 0.6723809523809524, 0.7533333333333334, 0.5914285714285714, 0.40857142857142864, 0.24666666666666667, 0.01, 0.6057142857142858, 0.005714285714285714, 0.26666666666666666, 0.26666666666666666, 0.48212490185773704, 0.023027637934524187], 'SVM (linear)', 'Logistic regression', OrderedDict([(u'Attribute 1_A14', [5, 1, 1, 3, 1, 2]), (u'Attribute 3_A34', [5, 2, 6, 2, 2, 1]), (u'Attribute 20', [4, 3, 12, 1, 5]), (u'Attribute 4_A46', [4, 4, 9, 14, 5]), (u'Attribute 4_A41', [5, 5, 2, 4, 4, 4]), (u'Attribute 10_A103', [5, 6, 5, 5, 13, 3]), (u'Attribute 1_A11', [5, 7, 4, 6, 8, 6]), (u'Attribute 6_A61', [4, 8, 15, 11, 12]), (u'Attribute 4_A40', [5, 9, 3, 11, 6, 8]), (u'Attribute 3_A30', [2, 10, 12]), (u'Attribute 3_A31', [4, 11, 14, 7, 7]), (u'Attribute 7_A74', [4, 12, 7, 7, 9]), (u'Attribute 9_A93', [3, 13, 11, 9]), (u'Attribute 14_A143', [3, 14, 13, 9]), (u'Attribute 3_A33', [1, 15]), (u'Attribute 4_A410', [2, 8, 13]), (u'Attribute 6_A64', [3, 10, 10, 3]), (u'Attribute 8', [1, 13]), (u'Attribute 4_A45', [2, 15, 12]), (u'Attribute 6_A65', [2, 8, 10]), (u'Attribute 4_A48', [1, 10]), (u'Attribute 12_A121', [2, 14, 15]), (u'Attribute 19', [1, 15]), (u'Attribute 1_A13', [1, 11]), (u'Attribute 1_A12', [1, 14])]), None), ([0.18665129258626412, 0.3208709922289591, 0.5992857142857143, 0.75, 0.44857142857142857, 0.5514285714285714, 0.25, 0.18666666666666668, 0.16142857142857142, 0.0642857142857143, 0.013333333333333332, 0.013333333333333332, 0.3449934843499127, 0.057447600101045264], 'SVM (polynomial)', 'Logistic regression', OrderedDict([(u'Attribute 1_A14', [5, 1, 1, 3, 1, 2]), (u'Attribute 3_A34', [5, 2, 6, 2, 2, 1]), (u'Attribute 20', [4, 3, 12, 1, 5]), (u'Attribute 4_A46', [4, 4, 9, 14, 5]), (u'Attribute 4_A41', [5, 5, 2, 4, 4, 4]), (u'Attribute 10_A103', [5, 6, 5, 5, 13, 3]), (u'Attribute 1_A11', [5, 7, 4, 6, 8, 6]), (u'Attribute 6_A61', [4, 8, 15, 11, 12]), (u'Attribute 4_A40', [5, 9, 3, 11, 6, 8]), (u'Attribute 3_A30', [2, 10, 12]), (u'Attribute 3_A31', [4, 11, 14, 7, 7]), (u'Attribute 7_A74', [4, 12, 7, 7, 9]), (u'Attribute 9_A93', [3, 13, 11, 9]), (u'Attribute 14_A143', [3, 14, 13, 9]), (u'Attribute 3_A33', [1, 15]), (u'Attribute 4_A410', [2, 8, 13]), (u'Attribute 6_A64', [3, 10, 10, 3]), (u'Attribute 8', [1, 13]), (u'Attribute 4_A45', [2, 15, 12]), (u'Attribute 6_A65', [2, 8, 10]), (u'Attribute 4_A48', [1, 10]), (u'Attribute 12_A121', [2, 14, 15]), (u'Attribute 19', [1, 15]), (u'Attribute 1_A13', [1, 11]), (u'Attribute 1_A12', [1, 14])]), None)], 'Logistic regression'), ('Decision Tree', [([0.36172570649660796, 0.26817951630572429, 0.6957142857142857, 0.7100000000000001, 0.6814285714285713, 0.31857142857142856, 0.29, 0.0, 0.0, 0.0, 0.0, 0.0, 0.20672013011377421, 0.01356516146023248], 'AdaBoost', 'Decision Tree', OrderedDict([(u'Attribute 5', [5, 1, 4, 1, 3, 2]), (u'Attribute 1_A14', [5, 2, 1, 2, 2, 1]), (u'Attribute 13', [5, 3, 2, 3, 1, 4]), (u'Attribute 2', [5, 4, 3, 4, 4, 3]), (u'Attribute 4_A46', [1, 5]), (u'Attribute 12_A122', [3, 6, 11, 9]), (u'Attribute 6_A61', [4, 7, 7, 8, 11]), (u'Attribute 11', [3, 8, 5, 5]), (u'Attribute 4_A43', [1, 9]), (u'Attribute 16', [3, 10, 13, 13]), (u'Attribute 3_A31', [1, 11]), (u'Attribute 3_A32', [2, 12, 13]), (u'Attribute 14_A143', [3, 13, 7, 5]), (u'Attribute 3_A30', [1, 14]), (u'Attribute 17_A173', [2, 15, 12]), (u'Attribute 7_A74', [3, 6, 6, 8]), (u'Attribute 14_A141', [1, 8]), (u'Attribute 4_A41', [2, 9, 7]), (u'Attribute 8', [3, 10, 6, 6]), (u'Attribute 3_A33', [1, 14]), (u'Attribute 1_A13', [2, 15, 15]), (u'Attribute 7_A75', [2, 10, 12]), (u'Attribute 4_A40', [1, 11]), (u'Attribute 9_A93', [2, 12, 10]), (u'Attribute 6_A65', [1, 13]), (u'Attribute 17_A174', [3, 14, 15, 9]), (u'Attribute 6_A64', [1, 15]), (u'Attribute 1_A12', [1, 7]), (u'Attribute 9_A92', [1, 8]), (u'Attribute 6_A63', [1, 9]), (u'Attribute 3_A34', [1, 12]), (u'Attribute 12_A121', [2, 14, 5]), (u'Attribute 7_A71', [1, 10]), (u'Attribute 7_A73', [1, 11]), (u'Attribute 10_A103', [1, 14])]), None), ([0.32994808963209604, 0.44944046053018699, 0.6799999999999999, 0.75, 0.61, 0.39, 0.25, 0.5533333333333333, 0.4342857142857143, 0.22142857142857145, 0.12333333333333332, 0.12333333333333332, 3.651673678373505, 0.028205996371206563], 'Artificial neural network', 'Decision Tree', OrderedDict([(u'Attribute 5', [5, 1, 4, 1, 3, 2]), (u'Attribute 1_A14', [5, 2, 1, 2, 2, 1]), (u'Attribute 13', [5, 3, 2, 3, 1, 4]), (u'Attribute 2', [5, 4, 3, 4, 4, 3]), (u'Attribute 4_A46', [1, 5]), (u'Attribute 12_A122', [3, 6, 11, 9]), (u'Attribute 6_A61', [4, 7, 7, 8, 11]), (u'Attribute 11', [3, 8, 5, 5]), (u'Attribute 4_A43', [1, 9]), (u'Attribute 16', [3, 10, 13, 13]), (u'Attribute 3_A31', [1, 11]), (u'Attribute 3_A32', [2, 12, 13]), (u'Attribute 14_A143', [3, 13, 7, 5]), (u'Attribute 3_A30', [1, 14]), (u'Attribute 17_A173', [2, 15, 12]), (u'Attribute 7_A74', [3, 6, 6, 8]), (u'Attribute 14_A141', [1, 8]), (u'Attribute 4_A41', [2, 9, 7]), (u'Attribute 8', [3, 10, 6, 6]), (u'Attribute 3_A33', [1, 14]), (u'Attribute 1_A13', [2, 15, 15]), (u'Attribute 7_A75', [2, 10, 12]), (u'Attribute 4_A40', [1, 11]), (u'Attribute 9_A93', [2, 12, 10]), (u'Attribute 6_A65', [1, 13]), (u'Attribute 17_A174', [3, 14, 15, 9]), (u'Attribute 6_A64', [1, 15]), (u'Attribute 1_A12', [1, 7]), (u'Attribute 9_A92', [1, 8]), (u'Attribute 6_A63', [1, 9]), (u'Attribute 3_A34', [1, 12]), (u'Attribute 12_A121', [2, 14, 5]), (u'Attribute 7_A71', [1, 10]), (u'Attribute 7_A73', [1, 11]), (u'Attribute 10_A103', [1, 14])]), None), ([0.34452460201314866, 0.40150311227358154, 0.6873809523809523, 0.7233333333333334, 0.6514285714285715, 0.3485714285714286, 0.27666666666666667, 0.36, 0.4128571428571428, 0.13714285714285718, 0.11333333333333333, 0.11333333333333333, 0.007640682650561281, 0.02428804844058396], 'Bernoulli Naive Bayes', 'Decision Tree', OrderedDict([(u'Attribute 5', [5, 1, 4, 1, 3, 2]), (u'Attribute 1_A14', [5, 2, 1, 2, 2, 1]), (u'Attribute 13', [5, 3, 2, 3, 1, 4]), (u'Attribute 2', [5, 4, 3, 4, 4, 3]), (u'Attribute 4_A46', [1, 5]), (u'Attribute 12_A122', [3, 6, 11, 9]), (u'Attribute 6_A61', [4, 7, 7, 8, 11]), (u'Attribute 11', [3, 8, 5, 5]), (u'Attribute 4_A43', [1, 9]), (u'Attribute 16', [3, 10, 13, 13]), (u'Attribute 3_A31', [1, 11]), (u'Attribute 3_A32', [2, 12, 13]), (u'Attribute 14_A143', [3, 13, 7, 5]), (u'Attribute 3_A30', [1, 14]), (u'Attribute 17_A173', [2, 15, 12]), (u'Attribute 7_A74', [3, 6, 6, 8]), (u'Attribute 14_A141', [1, 8]), (u'Attribute 4_A41', [2, 9, 7]), (u'Attribute 8', [3, 10, 6, 6]), (u'Attribute 3_A33', [1, 14]), (u'Attribute 1_A13', [2, 15, 15]), (u'Attribute 7_A75', [2, 10, 12]), (u'Attribute 4_A40', [1, 11]), (u'Attribute 9_A93', [2, 12, 10]), (u'Attribute 6_A65', [1, 13]), (u'Attribute 17_A174', [3, 14, 15, 9]), (u'Attribute 6_A64', [1, 15]), (u'Attribute 1_A12', [1, 7]), (u'Attribute 9_A92', [1, 8]), (u'Attribute 6_A63', [1, 9]), (u'Attribute 3_A34', [1, 12]), (u'Attribute 12_A121', [2, 14, 5]), (u'Attribute 7_A71', [1, 10]), (u'Attribute 7_A73', [1, 11]), (u'Attribute 10_A103', [1, 14])]), None), ([0.17545981731140889, 0.40829934210921531, 0.5957142857142858, 0.64, 0.5514285714285714, 0.44857142857142857, 0.36, 0.37333333333333335, 0.40285714285714286, 0.19857142857142857, 0.16666666666666666, 0.16666666666666666, 0.006575418385634374, 0.055126118028470776], 'Decision Tree', 'Decision Tree', OrderedDict([(u'Attribute 5', [5, 1, 4, 1, 3, 2]), (u'Attribute 1_A14', [5, 2, 1, 2, 2, 1]), (u'Attribute 13', [5, 3, 2, 3, 1, 4]), (u'Attribute 2', [5, 4, 3, 4, 4, 3]), (u'Attribute 4_A46', [1, 5]), (u'Attribute 12_A122', [3, 6, 11, 9]), (u'Attribute 6_A61', [4, 7, 7, 8, 11]), (u'Attribute 11', [3, 8, 5, 5]), (u'Attribute 4_A43', [1, 9]), (u'Attribute 16', [3, 10, 13, 13]), (u'Attribute 3_A31', [1, 11]), (u'Attribute 3_A32', [2, 12, 13]), (u'Attribute 14_A143', [3, 13, 7, 5]), (u'Attribute 3_A30', [1, 14]), (u'Attribute 17_A173', [2, 15, 12]), (u'Attribute 7_A74', [3, 6, 6, 8]), (u'Attribute 14_A141', [1, 8]), (u'Attribute 4_A41', [2, 9, 7]), (u'Attribute 8', [3, 10, 6, 6]), (u'Attribute 3_A33', [1, 14]), (u'Attribute 1_A13', [2, 15, 15]), (u'Attribute 7_A75', [2, 10, 12]), (u'Attribute 4_A40', [1, 11]), (u'Attribute 9_A93', [2, 12, 10]), (u'Attribute 6_A65', [1, 13]), (u'Attribute 17_A174', [3, 14, 15, 9]), (u'Attribute 6_A64', [1, 15]), (u'Attribute 1_A12', [1, 7]), (u'Attribute 9_A92', [1, 8]), (u'Attribute 6_A63', [1, 9]), (u'Attribute 3_A34', [1, 12]), (u'Attribute 12_A121', [2, 14, 5]), (u'Attribute 7_A71', [1, 10]), (u'Attribute 7_A73', [1, 11]), (u'Attribute 10_A103', [1, 14])]), None), ([0.32263804399748475, 0.45597694746148681, 0.6735714285714285, 0.6599999999999999, 0.6871428571428572, 0.31285714285714283, 0.34, 0.30333333333333334, 0.4257142857142857, 0.09857142857142856, 0.12333333333333334, 0.12333333333333334, 0.02627088381314493, 0.03765670207126954], 'Extreme Learning Machine', 'Decision Tree', OrderedDict([(u'Attribute 5', [5, 1, 4, 1, 3, 2]), (u'Attribute 1_A14', [5, 2, 1, 2, 2, 1]), (u'Attribute 13', [5, 3, 2, 3, 1, 4]), (u'Attribute 2', [5, 4, 3, 4, 4, 3]), (u'Attribute 4_A46', [1, 5]), (u'Attribute 12_A122', [3, 6, 11, 9]), (u'Attribute 6_A61', [4, 7, 7, 8, 11]), (u'Attribute 11', [3, 8, 5, 5]), (u'Attribute 4_A43', [1, 9]), (u'Attribute 16', [3, 10, 13, 13]), (u'Attribute 3_A31', [1, 11]), (u'Attribute 3_A32', [2, 12, 13]), (u'Attribute 14_A143', [3, 13, 7, 5]), (u'Attribute 3_A30', [1, 14]), (u'Attribute 17_A173', [2, 15, 12]), (u'Attribute 7_A74', [3, 6, 6, 8]), (u'Attribute 14_A141', [1, 8]), (u'Attribute 4_A41', [2, 9, 7]), (u'Attribute 8', [3, 10, 6, 6]), (u'Attribute 3_A33', [1, 14]), (u'Attribute 1_A13', [2, 15, 15]), (u'Attribute 7_A75', [2, 10, 12]), (u'Attribute 4_A40', [1, 11]), (u'Attribute 9_A93', [2, 12, 10]), (u'Attribute 6_A65', [1, 13]), (u'Attribute 17_A174', [3, 14, 15, 9]), (u'Attribute 6_A64', [1, 15]), (u'Attribute 1_A12', [1, 7]), (u'Attribute 9_A92', [1, 8]), (u'Attribute 6_A63', [1, 9]), (u'Attribute 3_A34', [1, 12]), (u'Attribute 12_A121', [2, 14, 5]), (u'Attribute 7_A71', [1, 10]), (u'Attribute 7_A73', [1, 11]), (u'Attribute 10_A103', [1, 14])]), None), ([0.30314866627905623, 0.56818144938550996, 0.6626190476190477, 0.6366666666666666, 0.6885714285714285, 0.3114285714285714, 0.3633333333333333, 0.5133333333333334, 0.6171428571428571, 0.24714285714285716, 0.2966666666666667, 0.2966666666666667, 0.004822214970871208, 0.034573855352316475], 'Gaussian Naive Bayes', 'Decision Tree', OrderedDict([(u'Attribute 5', [5, 1, 4, 1, 3, 2]), (u'Attribute 1_A14', [5, 2, 1, 2, 2, 1]), (u'Attribute 13', [5, 3, 2, 3, 1, 4]), (u'Attribute 2', [5, 4, 3, 4, 4, 3]), (u'Attribute 4_A46', [1, 5]), (u'Attribute 12_A122', [3, 6, 11, 9]), (u'Attribute 6_A61', [4, 7, 7, 8, 11]), (u'Attribute 11', [3, 8, 5, 5]), (u'Attribute 4_A43', [1, 9]), (u'Attribute 16', [3, 10, 13, 13]), (u'Attribute 3_A31', [1, 11]), (u'Attribute 3_A32', [2, 12, 13]), (u'Attribute 14_A143', [3, 13, 7, 5]), (u'Attribute 3_A30', [1, 14]), (u'Attribute 17_A173', [2, 15, 12]), (u'Attribute 7_A74', [3, 6, 6, 8]), (u'Attribute 14_A141', [1, 8]), (u'Attribute 4_A41', [2, 9, 7]), (u'Attribute 8', [3, 10, 6, 6]), (u'Attribute 3_A33', [1, 14]), (u'Attribute 1_A13', [2, 15, 15]), (u'Attribute 7_A75', [2, 10, 12]), (u'Attribute 4_A40', [1, 11]), (u'Attribute 9_A93', [2, 12, 10]), (u'Attribute 6_A65', [1, 13]), (u'Attribute 17_A174', [3, 14, 15, 9]), (u'Attribute 6_A64', [1, 15]), (u'Attribute 1_A12', [1, 7]), (u'Attribute 9_A92', [1, 8]), (u'Attribute 6_A63', [1, 9]), (u'Attribute 3_A34', [1, 12]), (u'Attribute 12_A121', [2, 14, 5]), (u'Attribute 7_A71', [1, 10]), (u'Attribute 7_A73', [1, 11]), (u'Attribute 10_A103', [1, 14])]), None), ([0.32302708942898878, 0.39860145257190438, 0.6761904761904762, 0.7566666666666666, 0.5957142857142858, 0.40428571428571425, 0.24333333333333332, 0.49000000000000005, 0.3342857142857143, 0.17714285714285713, 0.07666666666666666, 0.07666666666666666, 0.003626547146169834, 0.01595415768357231], 'K-nearest neighbours', 'Decision Tree', OrderedDict([(u'Attribute 5', [5, 1, 4, 1, 3, 2]), (u'Attribute 1_A14', [5, 2, 1, 2, 2, 1]), (u'Attribute 13', [5, 3, 2, 3, 1, 4]), (u'Attribute 2', [5, 4, 3, 4, 4, 3]), (u'Attribute 4_A46', [1, 5]), (u'Attribute 12_A122', [3, 6, 11, 9]), (u'Attribute 6_A61', [4, 7, 7, 8, 11]), (u'Attribute 11', [3, 8, 5, 5]), (u'Attribute 4_A43', [1, 9]), (u'Attribute 16', [3, 10, 13, 13]), (u'Attribute 3_A31', [1, 11]), (u'Attribute 3_A32', [2, 12, 13]), (u'Attribute 14_A143', [3, 13, 7, 5]), (u'Attribute 3_A30', [1, 14]), (u'Attribute 17_A173', [2, 15, 12]), (u'Attribute 7_A74', [3, 6, 6, 8]), (u'Attribute 14_A141', [1, 8]), (u'Attribute 4_A41', [2, 9, 7]), (u'Attribute 8', [3, 10, 6, 6]), (u'Attribute 3_A33', [1, 14]), (u'Attribute 1_A13', [2, 15, 15]), (u'Attribute 7_A75', [2, 10, 12]), (u'Attribute 4_A40', [1, 11]), (u'Attribute 9_A93', [2, 12, 10]), (u'Attribute 6_A65', [1, 13]), (u'Attribute 17_A174', [3, 14, 15, 9]), (u'Attribute 6_A64', [1, 15]), (u'Attribute 1_A12', [1, 7]), (u'Attribute 9_A92', [1, 8]), (u'Attribute 6_A63', [1, 9]), (u'Attribute 3_A34', [1, 12]), (u'Attribute 12_A121', [2, 14, 5]), (u'Attribute 7_A71', [1, 10]), (u'Attribute 7_A73', [1, 11]), (u'Attribute 10_A103', [1, 14])]), None), ([0.30861009567943115, 0.46020236816501281, 0.6683333333333333, 0.7266666666666667, 0.61, 0.39, 0.2733333333333333, 0.6, 0.4428571428571429, 0.23714285714285716, 0.13999999999999999, 0.13999999999999999, 0.00982131995569897, 0.029282810541293315], 'Logistic regression', 'Decision Tree', OrderedDict([(u'Attribute 5', [5, 1, 4, 1, 3, 2]), (u'Attribute 1_A14', [5, 2, 1, 2, 2, 1]), (u'Attribute 13', [5, 3, 2, 3, 1, 4]), (u'Attribute 2', [5, 4, 3, 4, 4, 3]), (u'Attribute 4_A46', [1, 5]), (u'Attribute 12_A122', [3, 6, 11, 9]), (u'Attribute 6_A61', [4, 7, 7, 8, 11]), (u'Attribute 11', [3, 8, 5, 5]), (u'Attribute 4_A43', [1, 9]), (u'Attribute 16', [3, 10, 13, 13]), (u'Attribute 3_A31', [1, 11]), (u'Attribute 3_A32', [2, 12, 13]), (u'Attribute 14_A143', [3, 13, 7, 5]), (u'Attribute 3_A30', [1, 14]), (u'Attribute 17_A173', [2, 15, 12]), (u'Attribute 7_A74', [3, 6, 6, 8]), (u'Attribute 14_A141', [1, 8]), (u'Attribute 4_A41', [2, 9, 7]), (u'Attribute 8', [3, 10, 6, 6]), (u'Attribute 3_A33', [1, 14]), (u'Attribute 1_A13', [2, 15, 15]), (u'Attribute 7_A75', [2, 10, 12]), (u'Attribute 4_A40', [1, 11]), (u'Attribute 9_A93', [2, 12, 10]), (u'Attribute 6_A65', [1, 13]), (u'Attribute 17_A174', [3, 14, 15, 9]), (u'Attribute 6_A64', [1, 15]), (u'Attribute 1_A12', [1, 7]), (u'Attribute 9_A92', [1, 8]), (u'Attribute 6_A63', [1, 9]), (u'Attribute 3_A34', [1, 12]), (u'Attribute 12_A121', [2, 14, 5]), (u'Attribute 7_A71', [1, 10]), (u'Attribute 7_A73', [1, 11]), (u'Attribute 10_A103', [1, 14])]), None), ([0.32158468456819755, 0.45131667820069205, 0.6745238095238095, 0.6933333333333334, 0.6557142857142857, 0.34428571428571425, 0.3066666666666667, 0.47333333333333333, 0.4585714285714285, 0.16285714285714287, 0.15, 0.15, 1.8532962971124352, 0.026817177288678717], 'Random forest', 'Decision Tree', OrderedDict([(u'Attribute 5', [5, 1, 4, 1, 3, 2]), (u'Attribute 1_A14', [5, 2, 1, 2, 2, 1]), (u'Attribute 13', [5, 3, 2, 3, 1, 4]), (u'Attribute 2', [5, 4, 3, 4, 4, 3]), (u'Attribute 4_A46', [1, 5]), (u'Attribute 12_A122', [3, 6, 11, 9]), (u'Attribute 6_A61', [4, 7, 7, 8, 11]), (u'Attribute 11', [3, 8, 5, 5]), (u'Attribute 4_A43', [1, 9]), (u'Attribute 16', [3, 10, 13, 13]), (u'Attribute 3_A31', [1, 11]), (u'Attribute 3_A32', [2, 12, 13]), (u'Attribute 14_A143', [3, 13, 7, 5]), (u'Attribute 3_A30', [1, 14]), (u'Attribute 17_A173', [2, 15, 12]), (u'Attribute 7_A74', [3, 6, 6, 8]), (u'Attribute 14_A141', [1, 8]), (u'Attribute 4_A41', [2, 9, 7]), (u'Attribute 8', [3, 10, 6, 6]), (u'Attribute 3_A33', [1, 14]), (u'Attribute 1_A13', [2, 15, 15]), (u'Attribute 7_A75', [2, 10, 12]), (u'Attribute 4_A40', [1, 11]), (u'Attribute 9_A93', [2, 12, 10]), (u'Attribute 6_A65', [1, 13]), (u'Attribute 17_A174', [3, 14, 15, 9]), (u'Attribute 6_A64', [1, 15]), (u'Attribute 1_A12', [1, 7]), (u'Attribute 9_A92', [1, 8]), (u'Attribute 6_A63', [1, 9]), (u'Attribute 3_A34', [1, 12]), (u'Attribute 12_A121', [2, 14, 5]), (u'Attribute 7_A71', [1, 10]), (u'Attribute 7_A73', [1, 11]), (u'Attribute 10_A103', [1, 14])]), None), ([0.31906582550822493, 0.47988185440602776, 0.674047619047619, 0.7366666666666666, 0.6114285714285714, 0.38857142857142857, 0.2633333333333333, 0.12333333333333334, 0.6185714285714285, 0.034285714285714294, 0.26, 0.26, 0.7376657702428137, 0.029789511006164456], 'SVM (RDF)', 'Decision Tree', OrderedDict([(u'Attribute 5', [5, 1, 4, 1, 3, 2]), (u'Attribute 1_A14', [5, 2, 1, 2, 2, 1]), (u'Attribute 13', [5, 3, 2, 3, 1, 4]), (u'Attribute 2', [5, 4, 3, 4, 4, 3]), (u'Attribute 4_A46', [1, 5]), (u'Attribute 12_A122', [3, 6, 11, 9]), (u'Attribute 6_A61', [4, 7, 7, 8, 11]), (u'Attribute 11', [3, 8, 5, 5]), (u'Attribute 4_A43', [1, 9]), (u'Attribute 16', [3, 10, 13, 13]), (u'Attribute 3_A31', [1, 11]), (u'Attribute 3_A32', [2, 12, 13]), (u'Attribute 14_A143', [3, 13, 7, 5]), (u'Attribute 3_A30', [1, 14]), (u'Attribute 17_A173', [2, 15, 12]), (u'Attribute 7_A74', [3, 6, 6, 8]), (u'Attribute 14_A141', [1, 8]), (u'Attribute 4_A41', [2, 9, 7]), (u'Attribute 8', [3, 10, 6, 6]), (u'Attribute 3_A33', [1, 14]), (u'Attribute 1_A13', [2, 15, 15]), (u'Attribute 7_A75', [2, 10, 12]), (u'Attribute 4_A40', [1, 11]), (u'Attribute 9_A93', [2, 12, 10]), (u'Attribute 6_A65', [1, 13]), (u'Attribute 17_A174', [3, 14, 15, 9]), (u'Attribute 6_A64', [1, 15]), (u'Attribute 1_A12', [1, 7]), (u'Attribute 9_A92', [1, 8]), (u'Attribute 6_A63', [1, 9]), (u'Attribute 3_A34', [1, 12]), (u'Attribute 12_A121', [2, 14, 5]), (u'Attribute 7_A71', [1, 10]), (u'Attribute 7_A73', [1, 11]), (u'Attribute 10_A103', [1, 14])]), None), ([0.31685491147209222, 0.45785364863436812, 0.6728571428571428, 0.74, 0.6057142857142856, 0.39428571428571424, 0.25999999999999995, 0.08666666666666667, 0.6028571428571429, 0.02571428571428571, 0.24666666666666667, 0.24666666666666667, 0.5115257729655915, 0.023550977178815716], 'SVM (linear)', 'Decision Tree', OrderedDict([(u'Attribute 5', [5, 1, 4, 1, 3, 2]), (u'Attribute 1_A14', [5, 2, 1, 2, 2, 1]), (u'Attribute 13', [5, 3, 2, 3, 1, 4]), (u'Attribute 2', [5, 4, 3, 4, 4, 3]), (u'Attribute 4_A46', [1, 5]), (u'Attribute 12_A122', [3, 6, 11, 9]), (u'Attribute 6_A61', [4, 7, 7, 8, 11]), (u'Attribute 11', [3, 8, 5, 5]), (u'Attribute 4_A43', [1, 9]), (u'Attribute 16', [3, 10, 13, 13]), (u'Attribute 3_A31', [1, 11]), (u'Attribute 3_A32', [2, 12, 13]), (u'Attribute 14_A143', [3, 13, 7, 5]), (u'Attribute 3_A30', [1, 14]), (u'Attribute 17_A173', [2, 15, 12]), (u'Attribute 7_A74', [3, 6, 6, 8]), (u'Attribute 14_A141', [1, 8]), (u'Attribute 4_A41', [2, 9, 7]), (u'Attribute 8', [3, 10, 6, 6]), (u'Attribute 3_A33', [1, 14]), (u'Attribute 1_A13', [2, 15, 15]), (u'Attribute 7_A75', [2, 10, 12]), (u'Attribute 4_A40', [1, 11]), (u'Attribute 9_A93', [2, 12, 10]), (u'Attribute 6_A65', [1, 13]), (u'Attribute 17_A174', [3, 14, 15, 9]), (u'Attribute 6_A64', [1, 15]), (u'Attribute 1_A12', [1, 7]), (u'Attribute 9_A92', [1, 8]), (u'Attribute 6_A63', [1, 9]), (u'Attribute 3_A34', [1, 12]), (u'Attribute 12_A121', [2, 14, 5]), (u'Attribute 7_A71', [1, 10]), (u'Attribute 7_A73', [1, 11]), (u'Attribute 10_A103', [1, 14])]), None), ([0.24691548034293342, 0.37678834637622777, 0.6121428571428571, 0.38, 0.8442857142857143, 0.15571428571428572, 0.62, 0.20333333333333337, 0.27571428571428575, 0.07, 0.06, 0.06, 0.3575671646251367, 0.05516107109341093], 'SVM (polynomial)', 'Decision Tree', OrderedDict([(u'Attribute 5', [5, 1, 4, 1, 3, 2]), (u'Attribute 1_A14', [5, 2, 1, 2, 2, 1]), (u'Attribute 13', [5, 3, 2, 3, 1, 4]), (u'Attribute 2', [5, 4, 3, 4, 4, 3]), (u'Attribute 4_A46', [1, 5]), (u'Attribute 12_A122', [3, 6, 11, 9]), (u'Attribute 6_A61', [4, 7, 7, 8, 11]), (u'Attribute 11', [3, 8, 5, 5]), (u'Attribute 4_A43', [1, 9]), (u'Attribute 16', [3, 10, 13, 13]), (u'Attribute 3_A31', [1, 11]), (u'Attribute 3_A32', [2, 12, 13]), (u'Attribute 14_A143', [3, 13, 7, 5]), (u'Attribute 3_A30', [1, 14]), (u'Attribute 17_A173', [2, 15, 12]), (u'Attribute 7_A74', [3, 6, 6, 8]), (u'Attribute 14_A141', [1, 8]), (u'Attribute 4_A41', [2, 9, 7]), (u'Attribute 8', [3, 10, 6, 6]), (u'Attribute 3_A33', [1, 14]), (u'Attribute 1_A13', [2, 15, 15]), (u'Attribute 7_A75', [2, 10, 12]), (u'Attribute 4_A40', [1, 11]), (u'Attribute 9_A93', [2, 12, 10]), (u'Attribute 6_A65', [1, 13]), (u'Attribute 17_A174', [3, 14, 15, 9]), (u'Attribute 6_A64', [1, 15]), (u'Attribute 1_A12', [1, 7]), (u'Attribute 9_A92', [1, 8]), (u'Attribute 6_A63', [1, 9]), (u'Attribute 3_A34', [1, 12]), (u'Attribute 12_A121', [2, 14, 5]), (u'Attribute 7_A71', [1, 10]), (u'Attribute 7_A73', [1, 11]), (u'Attribute 10_A103', [1, 14])]), None)], 'Decision Tree'), ('Bernoulli Naive Bayes', [([0.10930278333485711, 0.25179932907417396, 0.5578571428571428, 0.4600000000000001, 0.6557142857142858, 0.3442857142857143, 0.54, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3018483195297743, 0.020600398472688825], 'AdaBoost', 'Bernoulli Naive Bayes', OrderedDict([(u'Attribute 4_A48', [5, 1, 1, 1, 1, 1]), (u'Attribute 4_A410', [5, 2, 3, 4, 4, 3]), (u'Attribute 4_A44', [5, 3, 2, 3, 3, 2]), (u'Attribute 6_A64', [5, 4, 4, 2, 2, 4]), (u'Attribute 6_A63', [5, 5, 9, 8, 8, 8]), (u'Attribute 17_A171', [5, 6, 6, 5, 5, 5]), (u'Attribute 10_A103', [5, 7, 7, 6, 7, 7]), (u'Attribute 4_A45', [5, 8, 5, 7, 6, 6]), (u'Attribute 1_A13', [5, 9, 10, 9, 9, 9]), (u'Attribute 4_A41', [5, 10, 11, 10, 12, 10]), (u'Attribute 10_A102', [5, 11, 12, 12, 10, 11]), (u'Attribute 9_A91', [5, 12, 13, 15, 11, 15]), (u'Attribute 14_A142', [5, 13, 8, 11, 15, 14]), (u'Attribute 7_A71', [2, 14, 13]), (u'Attribute 4_A46', [5, 15, 15, 14, 14, 13]), (u'Attribute 3_A30', [2, 14, 12]), (u'Attribute 9_A94', [1, 13])]), None), ([0.10397285363243021, 0.30359074677559988, 0.5457142857142856, 0.86, 0.2314285714285714, 0.7685714285714285, 0.13999999999999999, 0.8466666666666667, 0.1442857142857143, 0.7328571428571429, 0.07666666666666666, 0.07666666666666666, 7.346197604257194, 0.021673206757571957], 'Artificial neural network', 'Bernoulli Naive Bayes', OrderedDict([(u'Attribute 4_A48', [5, 1, 1, 1, 1, 1]), (u'Attribute 4_A410', [5, 2, 3, 4, 4, 3]), (u'Attribute 4_A44', [5, 3, 2, 3, 3, 2]), (u'Attribute 6_A64', [5, 4, 4, 2, 2, 4]), (u'Attribute 6_A63', [5, 5, 9, 8, 8, 8]), (u'Attribute 17_A171', [5, 6, 6, 5, 5, 5]), (u'Attribute 10_A103', [5, 7, 7, 6, 7, 7]), (u'Attribute 4_A45', [5, 8, 5, 7, 6, 6]), (u'Attribute 1_A13', [5, 9, 10, 9, 9, 9]), (u'Attribute 4_A41', [5, 10, 11, 10, 12, 10]), (u'Attribute 10_A102', [5, 11, 12, 12, 10, 11]), (u'Attribute 9_A91', [5, 12, 13, 15, 11, 15]), (u'Attribute 14_A142', [5, 13, 8, 11, 15, 14]), (u'Attribute 7_A71', [2, 14, 13]), (u'Attribute 4_A46', [5, 15, 15, 14, 14, 13]), (u'Attribute 3_A30', [2, 14, 12]), (u'Attribute 9_A94', [1, 13])]), None), ([0.12941415573316653, 0.28429754101621163, 0.5604761904761905, 0.32666666666666666, 0.7942857142857143, 0.20571428571428568, 0.6733333333333333, 0.09, 0.06428571428571428, 0.04142857142857143, 0.03, 0.03, 0.01203968977234604, 0.036002015564639646], 'Bernoulli Naive Bayes', 'Bernoulli Naive Bayes', OrderedDict([(u'Attribute 4_A48', [5, 1, 1, 1, 1, 1]), (u'Attribute 4_A410', [5, 2, 3, 4, 4, 3]), (u'Attribute 4_A44', [5, 3, 2, 3, 3, 2]), (u'Attribute 6_A64', [5, 4, 4, 2, 2, 4]), (u'Attribute 6_A63', [5, 5, 9, 8, 8, 8]), (u'Attribute 17_A171', [5, 6, 6, 5, 5, 5]), (u'Attribute 10_A103', [5, 7, 7, 6, 7, 7]), (u'Attribute 4_A45', [5, 8, 5, 7, 6, 6]), (u'Attribute 1_A13', [5, 9, 10, 9, 9, 9]), (u'Attribute 4_A41', [5, 10, 11, 10, 12, 10]), (u'Attribute 10_A102', [5, 11, 12, 12, 10, 11]), (u'Attribute 9_A91', [5, 12, 13, 15, 11, 15]), (u'Attribute 14_A142', [5, 13, 8, 11, 15, 14]), (u'Attribute 7_A71', [2, 14, 13]), (u'Attribute 4_A46', [5, 15, 15, 14, 14, 13]), (u'Attribute 3_A30', [2, 14, 12]), (u'Attribute 9_A94', [1, 13])]), None), ([0.13533143127188843, 0.28607122393171647, 0.5645238095238094, 0.8333333333333334, 0.2957142857142857, 0.7042857142857144, 0.16666666666666669, 0.07333333333333333, 0.10428571428571429, 0.024285714285714285, 0.07333333333333333, 0.07333333333333333, 0.01907212433737962, 0.01893418604959147], 'Decision Tree', 'Bernoulli Naive Bayes', OrderedDict([(u'Attribute 4_A48', [5, 1, 1, 1, 1, 1]), (u'Attribute 4_A410', [5, 2, 3, 4, 4, 3]), (u'Attribute 4_A44', [5, 3, 2, 3, 3, 2]), (u'Attribute 6_A64', [5, 4, 4, 2, 2, 4]), (u'Attribute 6_A63', [5, 5, 9, 8, 8, 8]), (u'Attribute 17_A171', [5, 6, 6, 5, 5, 5]), (u'Attribute 10_A103', [5, 7, 7, 6, 7, 7]), (u'Attribute 4_A45', [5, 8, 5, 7, 6, 6]), (u'Attribute 1_A13', [5, 9, 10, 9, 9, 9]), (u'Attribute 4_A41', [5, 10, 11, 10, 12, 10]), (u'Attribute 10_A102', [5, 11, 12, 12, 10, 11]), (u'Attribute 9_A91', [5, 12, 13, 15, 11, 15]), (u'Attribute 14_A142', [5, 13, 8, 11, 15, 14]), (u'Attribute 7_A71', [2, 14, 13]), (u'Attribute 4_A46', [5, 15, 15, 14, 14, 13]), (u'Attribute 3_A30', [2, 14, 12]), (u'Attribute 9_A94', [1, 13])]), None), ([0.11710410639766941, 0.35236748825199021, 0.5580952380952381, 0.3733333333333333, 0.7428571428571429, 0.2571428571428571, 0.6266666666666667, 0.14666666666666667, 0.19714285714285712, 0.07428571428571427, 0.1, 0.1, 0.0072920342442166115, 0.03271016124274041], 'Extreme Learning Machine', 'Bernoulli Naive Bayes', OrderedDict([(u'Attribute 4_A48', [5, 1, 1, 1, 1, 1]), (u'Attribute 4_A410', [5, 2, 3, 4, 4, 3]), (u'Attribute 4_A44', [5, 3, 2, 3, 3, 2]), (u'Attribute 6_A64', [5, 4, 4, 2, 2, 4]), (u'Attribute 6_A63', [5, 5, 9, 8, 8, 8]), (u'Attribute 17_A171', [5, 6, 6, 5, 5, 5]), (u'Attribute 10_A103', [5, 7, 7, 6, 7, 7]), (u'Attribute 4_A45', [5, 8, 5, 7, 6, 6]), (u'Attribute 1_A13', [5, 9, 10, 9, 9, 9]), (u'Attribute 4_A41', [5, 10, 11, 10, 12, 10]), (u'Attribute 10_A102', [5, 11, 12, 12, 10, 11]), (u'Attribute 9_A91', [5, 12, 13, 15, 11, 15]), (u'Attribute 14_A142', [5, 13, 8, 11, 15, 14]), (u'Attribute 7_A71', [2, 14, 13]), (u'Attribute 4_A46', [5, 15, 15, 14, 14, 13]), (u'Attribute 3_A30', [2, 14, 12]), (u'Attribute 9_A94', [1, 13])]), None), ([0.047879519136583767, 0.61006235429379085, 0.5228571428571428, 0.29, 0.7557142857142857, 0.24428571428571427, 0.71, 0.2733333333333333, 0.7557142857142857, 0.23999999999999994, 0.71, 0.71, 0.0048702107255107485, 0.02384996565360219], 'Gaussian Naive Bayes', 'Bernoulli Naive Bayes', OrderedDict([(u'Attribute 4_A48', [5, 1, 1, 1, 1, 1]), (u'Attribute 4_A410', [5, 2, 3, 4, 4, 3]), (u'Attribute 4_A44', [5, 3, 2, 3, 3, 2]), (u'Attribute 6_A64', [5, 4, 4, 2, 2, 4]), (u'Attribute 6_A63', [5, 5, 9, 8, 8, 8]), (u'Attribute 17_A171', [5, 6, 6, 5, 5, 5]), (u'Attribute 10_A103', [5, 7, 7, 6, 7, 7]), (u'Attribute 4_A45', [5, 8, 5, 7, 6, 6]), (u'Attribute 1_A13', [5, 9, 10, 9, 9, 9]), (u'Attribute 4_A41', [5, 10, 11, 10, 12, 10]), (u'Attribute 10_A102', [5, 11, 12, 12, 10, 11]), (u'Attribute 9_A91', [5, 12, 13, 15, 11, 15]), (u'Attribute 14_A142', [5, 13, 8, 11, 15, 14]), (u'Attribute 7_A71', [2, 14, 13]), (u'Attribute 4_A46', [5, 15, 15, 14, 14, 13]), (u'Attribute 3_A30', [2, 14, 12]), (u'Attribute 9_A94', [1, 13])]), None), ([0.08467938106612373, 0.34317248509824538, 0.5461904761904761, 0.5566666666666666, 0.5357142857142858, 0.4642857142857143, 0.44333333333333336, 0.42000000000000004, 0.23857142857142857, 0.35428571428571426, 0.2066666666666667, 0.2066666666666667, 0.005131319705154791, 0.02301532566398966], 'K-nearest neighbours', 'Bernoulli Naive Bayes', OrderedDict([(u'Attribute 4_A48', [5, 1, 1, 1, 1, 1]), (u'Attribute 4_A410', [5, 2, 3, 4, 4, 3]), (u'Attribute 4_A44', [5, 3, 2, 3, 3, 2]), (u'Attribute 6_A64', [5, 4, 4, 2, 2, 4]), (u'Attribute 6_A63', [5, 5, 9, 8, 8, 8]), (u'Attribute 17_A171', [5, 6, 6, 5, 5, 5]), (u'Attribute 10_A103', [5, 7, 7, 6, 7, 7]), (u'Attribute 4_A45', [5, 8, 5, 7, 6, 6]), (u'Attribute 1_A13', [5, 9, 10, 9, 9, 9]), (u'Attribute 4_A41', [5, 10, 11, 10, 12, 10]), (u'Attribute 10_A102', [5, 11, 12, 12, 10, 11]), (u'Attribute 9_A91', [5, 12, 13, 15, 11, 15]), (u'Attribute 14_A142', [5, 13, 8, 11, 15, 14]), (u'Attribute 7_A71', [2, 14, 13]), (u'Attribute 4_A46', [5, 15, 15, 14, 14, 13]), (u'Attribute 3_A30', [2, 14, 12]), (u'Attribute 9_A94', [1, 13])]), None), ([0.10000036523209582, 0.28892692089615646, 0.544047619047619, 0.8566666666666667, 0.2314285714285714, 0.7685714285714285, 0.14333333333333334, 0.8333333333333333, 0.09285714285714285, 0.7242857142857142, 0.03333333333333334, 0.03333333333333334, 0.005295531595243127, 0.021041477233605426], 'Logistic regression', 'Bernoulli Naive Bayes', OrderedDict([(u'Attribute 4_A48', [5, 1, 1, 1, 1, 1]), (u'Attribute 4_A410', [5, 2, 3, 4, 4, 3]), (u'Attribute 4_A44', [5, 3, 2, 3, 3, 2]), (u'Attribute 6_A64', [5, 4, 4, 2, 2, 4]), (u'Attribute 6_A63', [5, 5, 9, 8, 8, 8]), (u'Attribute 17_A171', [5, 6, 6, 5, 5, 5]), (u'Attribute 10_A103', [5, 7, 7, 6, 7, 7]), (u'Attribute 4_A45', [5, 8, 5, 7, 6, 6]), (u'Attribute 1_A13', [5, 9, 10, 9, 9, 9]), (u'Attribute 4_A41', [5, 10, 11, 10, 12, 10]), (u'Attribute 10_A102', [5, 11, 12, 12, 10, 11]), (u'Attribute 9_A91', [5, 12, 13, 15, 11, 15]), (u'Attribute 14_A142', [5, 13, 8, 11, 15, 14]), (u'Attribute 7_A71', [2, 14, 13]), (u'Attribute 4_A46', [5, 15, 15, 14, 14, 13]), (u'Attribute 3_A30', [2, 14, 12]), (u'Attribute 9_A94', [1, 13])]), None), ([0.11171887798536212, 0.38451160772719734, 0.5533333333333333, 0.8166666666666667, 0.2899999999999999, 0.7100000000000001, 0.18333333333333332, 0.7866666666666667, 0.2414285714285714, 0.7014285714285714, 0.12666666666666665, 0.12666666666666665, 2.0831389102790308, 0.03578089027460798], 'Random forest', 'Bernoulli Naive Bayes', OrderedDict([(u'Attribute 4_A48', [5, 1, 1, 1, 1, 1]), (u'Attribute 4_A410', [5, 2, 3, 4, 4, 3]), (u'Attribute 4_A44', [5, 3, 2, 3, 3, 2]), (u'Attribute 6_A64', [5, 4, 4, 2, 2, 4]), (u'Attribute 6_A63', [5, 5, 9, 8, 8, 8]), (u'Attribute 17_A171', [5, 6, 6, 5, 5, 5]), (u'Attribute 10_A103', [5, 7, 7, 6, 7, 7]), (u'Attribute 4_A45', [5, 8, 5, 7, 6, 6]), (u'Attribute 1_A13', [5, 9, 10, 9, 9, 9]), (u'Attribute 4_A41', [5, 10, 11, 10, 12, 10]), (u'Attribute 10_A102', [5, 11, 12, 12, 10, 11]), (u'Attribute 9_A91', [5, 12, 13, 15, 11, 15]), (u'Attribute 14_A142', [5, 13, 8, 11, 15, 14]), (u'Attribute 7_A71', [2, 14, 13]), (u'Attribute 4_A46', [5, 15, 15, 14, 14, 13]), (u'Attribute 3_A30', [2, 14, 12]), (u'Attribute 9_A94', [1, 13])]), None), ([0.12074082899852386, 0.37059368584374858, 0.5578571428571428, 0.82, 0.2957142857142857, 0.7042857142857143, 0.18, 0.0, 0.33, 0.0, 0.3, 0.3, 1.117827162759641, 0.023876097403279374], 'SVM (RDF)', 'Bernoulli Naive Bayes', OrderedDict([(u'Attribute 4_A48', [5, 1, 1, 1, 1, 1]), (u'Attribute 4_A410', [5, 2, 3, 4, 4, 3]), (u'Attribute 4_A44', [5, 3, 2, 3, 3, 2]), (u'Attribute 6_A64', [5, 4, 4, 2, 2, 4]), (u'Attribute 6_A63', [5, 5, 9, 8, 8, 8]), (u'Attribute 17_A171', [5, 6, 6, 5, 5, 5]), (u'Attribute 10_A103', [5, 7, 7, 6, 7, 7]), (u'Attribute 4_A45', [5, 8, 5, 7, 6, 6]), (u'Attribute 1_A13', [5, 9, 10, 9, 9, 9]), (u'Attribute 4_A41', [5, 10, 11, 10, 12, 10]), (u'Attribute 10_A102', [5, 11, 12, 12, 10, 11]), (u'Attribute 9_A91', [5, 12, 13, 15, 11, 15]), (u'Attribute 14_A142', [5, 13, 8, 11, 15, 14]), (u'Attribute 7_A71', [2, 14, 13]), (u'Attribute 4_A46', [5, 15, 15, 14, 14, 13]), (u'Attribute 3_A30', [2, 14, 12]), (u'Attribute 9_A94', [1, 13])]), None), ([0.15551351839770322, 0.38169268142147678, 0.5773809523809523, 0.8133333333333332, 0.34142857142857147, 0.6585714285714285, 0.18666666666666668, 0.0, 0.34142857142857147, 0.0, 0.18666666666666668, 0.18666666666666668, 0.7078142220174941, 0.015521910488577722], 'SVM (linear)', 'Bernoulli Naive Bayes', OrderedDict([(u'Attribute 4_A48', [5, 1, 1, 1, 1, 1]), (u'Attribute 4_A410', [5, 2, 3, 4, 4, 3]), (u'Attribute 4_A44', [5, 3, 2, 3, 3, 2]), (u'Attribute 6_A64', [5, 4, 4, 2, 2, 4]), (u'Attribute 6_A63', [5, 5, 9, 8, 8, 8]), (u'Attribute 17_A171', [5, 6, 6, 5, 5, 5]), (u'Attribute 10_A103', [5, 7, 7, 6, 7, 7]), (u'Attribute 4_A45', [5, 8, 5, 7, 6, 6]), (u'Attribute 1_A13', [5, 9, 10, 9, 9, 9]), (u'Attribute 4_A41', [5, 10, 11, 10, 12, 10]), (u'Attribute 10_A102', [5, 11, 12, 12, 10, 11]), (u'Attribute 9_A91', [5, 12, 13, 15, 11, 15]), (u'Attribute 14_A142', [5, 13, 8, 11, 15, 14]), (u'Attribute 7_A71', [2, 14, 13]), (u'Attribute 4_A46', [5, 15, 15, 14, 14, 13]), (u'Attribute 3_A30', [2, 14, 12]), (u'Attribute 9_A94', [1, 13])]), None), ([3.263915427971962e-17, 0.22672348311091678, 0.5, 0.4, 0.6, 0.4, 0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.21856029036525992, 0.0], 'SVM (polynomial)', 'Bernoulli Naive Bayes', OrderedDict([(u'Attribute 4_A48', [5, 1, 1, 1, 1, 1]), (u'Attribute 4_A410', [5, 2, 3, 4, 4, 3]), (u'Attribute 4_A44', [5, 3, 2, 3, 3, 2]), (u'Attribute 6_A64', [5, 4, 4, 2, 2, 4]), (u'Attribute 6_A63', [5, 5, 9, 8, 8, 8]), (u'Attribute 17_A171', [5, 6, 6, 5, 5, 5]), (u'Attribute 10_A103', [5, 7, 7, 6, 7, 7]), (u'Attribute 4_A45', [5, 8, 5, 7, 6, 6]), (u'Attribute 1_A13', [5, 9, 10, 9, 9, 9]), (u'Attribute 4_A41', [5, 10, 11, 10, 12, 10]), (u'Attribute 10_A102', [5, 11, 12, 12, 10, 11]), (u'Attribute 9_A91', [5, 12, 13, 15, 11, 15]), (u'Attribute 14_A142', [5, 13, 8, 11, 15, 14]), (u'Attribute 7_A71', [2, 14, 13]), (u'Attribute 4_A46', [5, 15, 15, 14, 14, 13]), (u'Attribute 3_A30', [2, 14, 12]), (u'Attribute 9_A94', [1, 13])]), None)], 'Bernoulli Naive Bayes'), ('SVM (linear)', [([0.29338501926309551, 0.2633855559796649, 0.659047619047619, 0.6666666666666666, 0.6514285714285715, 0.3485714285714286, 0.33333333333333337, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4007717958834138, 0.0467758683448039], 'AdaBoost', 'SVM (linear)', OrderedDict([(u'Attribute 20', [5, 1, 2, 1, 2, 13]), (u'Attribute 4_A410', [4, 2, 1, 3, 1]), (u'Attribute 4_A45', [4, 3, 6, 2, 11]), (u'Attribute 1_A14', [5, 4, 3, 9, 4, 3]), (u'Attribute 10_A103', [5, 5, 8, 4, 14, 2]), (u'Attribute 3_A30', [2, 6, 5]), (u'Attribute 3_A34', [4, 7, 7, 10, 9]), (u'Attribute 10_A102', [4, 8, 11, 5, 7]), (u'Attribute 4_A46', [4, 9, 10, 12, 4]), (u'Attribute 4_A41', [5, 10, 4, 8, 7, 6]), (u'Attribute 1_A11', [5, 11, 5, 11, 8, 8]), (u'Attribute 9_A91', [2, 12, 13]), (u'Attribute 4_A48', [3, 13, 12, 1]), (u'Attribute 3_A31', [3, 14, 6, 5]), (u'Attribute 4_A40', [5, 15, 7, 14, 6, 14]), (u'Attribute 6_A64', [4, 9, 10, 3, 15]), (u'Attribute 9_A93', [2, 14, 13]), (u'Attribute 6_A63', [2, 15, 15]), (u'Attribute 6_A61', [2, 15, 10]), (u'Attribute 7_A74', [1, 9]), (u'Attribute 14_A143', [1, 12]), (u'Attribute 7_A71', [2, 13, 12]), (u'Attribute 1_A12', [1, 11])]), None), ([0.32255765396795921, 0.44444483232553433, 0.675952380952381, 0.7533333333333333, 0.5985714285714285, 0.4014285714285714, 0.24666666666666667, 0.49333333333333335, 0.49428571428571433, 0.21142857142857144, 0.16999999999999998, 0.16999999999999998, 5.580650224749933, 0.028044748822336363], 'Artificial neural network', 'SVM (linear)', OrderedDict([(u'Attribute 20', [5, 1, 2, 1, 2, 13]), (u'Attribute 4_A410', [4, 2, 1, 3, 1]), (u'Attribute 4_A45', [4, 3, 6, 2, 11]), (u'Attribute 1_A14', [5, 4, 3, 9, 4, 3]), (u'Attribute 10_A103', [5, 5, 8, 4, 14, 2]), (u'Attribute 3_A30', [2, 6, 5]), (u'Attribute 3_A34', [4, 7, 7, 10, 9]), (u'Attribute 10_A102', [4, 8, 11, 5, 7]), (u'Attribute 4_A46', [4, 9, 10, 12, 4]), (u'Attribute 4_A41', [5, 10, 4, 8, 7, 6]), (u'Attribute 1_A11', [5, 11, 5, 11, 8, 8]), (u'Attribute 9_A91', [2, 12, 13]), (u'Attribute 4_A48', [3, 13, 12, 1]), (u'Attribute 3_A31', [3, 14, 6, 5]), (u'Attribute 4_A40', [5, 15, 7, 14, 6, 14]), (u'Attribute 6_A64', [4, 9, 10, 3, 15]), (u'Attribute 9_A93', [2, 14, 13]), (u'Attribute 6_A63', [2, 15, 15]), (u'Attribute 6_A61', [2, 15, 10]), (u'Attribute 7_A74', [1, 9]), (u'Attribute 14_A143', [1, 12]), (u'Attribute 7_A71', [2, 13, 12]), (u'Attribute 1_A12', [1, 11])]), None), ([0.31467586193679442, 0.4197649301944581, 0.6716666666666666, 0.7433333333333334, 0.6, 0.4, 0.25666666666666665, 0.45, 0.44857142857142857, 0.18285714285714283, 0.15666666666666668, 0.15666666666666668, 0.007557671125240972, 0.023478653401182943], 'Bernoulli Naive Bayes', 'SVM (linear)', OrderedDict([(u'Attribute 20', [5, 1, 2, 1, 2, 13]), (u'Attribute 4_A410', [4, 2, 1, 3, 1]), (u'Attribute 4_A45', [4, 3, 6, 2, 11]), (u'Attribute 1_A14', [5, 4, 3, 9, 4, 3]), (u'Attribute 10_A103', [5, 5, 8, 4, 14, 2]), (u'Attribute 3_A30', [2, 6, 5]), (u'Attribute 3_A34', [4, 7, 7, 10, 9]), (u'Attribute 10_A102', [4, 8, 11, 5, 7]), (u'Attribute 4_A46', [4, 9, 10, 12, 4]), (u'Attribute 4_A41', [5, 10, 4, 8, 7, 6]), (u'Attribute 1_A11', [5, 11, 5, 11, 8, 8]), (u'Attribute 9_A91', [2, 12, 13]), (u'Attribute 4_A48', [3, 13, 12, 1]), (u'Attribute 3_A31', [3, 14, 6, 5]), (u'Attribute 4_A40', [5, 15, 7, 14, 6, 14]), (u'Attribute 6_A64', [4, 9, 10, 3, 15]), (u'Attribute 9_A93', [2, 14, 13]), (u'Attribute 6_A63', [2, 15, 15]), (u'Attribute 6_A61', [2, 15, 10]), (u'Attribute 7_A74', [1, 9]), (u'Attribute 14_A143', [1, 12]), (u'Attribute 7_A71', [2, 13, 12]), (u'Attribute 1_A12', [1, 11])]), None), ([0.27004676021114127, 0.4049526588612764, 0.6464285714285714, 0.6499999999999999, 0.6428571428571428, 0.3571428571428571, 0.35, 0.39, 0.3742857142857143, 0.12999999999999998, 0.13, 0.13, 0.006198093270542205, 0.0411911643212545], 'Decision Tree', 'SVM (linear)', OrderedDict([(u'Attribute 20', [5, 1, 2, 1, 2, 13]), (u'Attribute 4_A410', [4, 2, 1, 3, 1]), (u'Attribute 4_A45', [4, 3, 6, 2, 11]), (u'Attribute 1_A14', [5, 4, 3, 9, 4, 3]), (u'Attribute 10_A103', [5, 5, 8, 4, 14, 2]), (u'Attribute 3_A30', [2, 6, 5]), (u'Attribute 3_A34', [4, 7, 7, 10, 9]), (u'Attribute 10_A102', [4, 8, 11, 5, 7]), (u'Attribute 4_A46', [4, 9, 10, 12, 4]), (u'Attribute 4_A41', [5, 10, 4, 8, 7, 6]), (u'Attribute 1_A11', [5, 11, 5, 11, 8, 8]), (u'Attribute 9_A91', [2, 12, 13]), (u'Attribute 4_A48', [3, 13, 12, 1]), (u'Attribute 3_A31', [3, 14, 6, 5]), (u'Attribute 4_A40', [5, 15, 7, 14, 6, 14]), (u'Attribute 6_A64', [4, 9, 10, 3, 15]), (u'Attribute 9_A93', [2, 14, 13]), (u'Attribute 6_A63', [2, 15, 15]), (u'Attribute 6_A61', [2, 15, 10]), (u'Attribute 7_A74', [1, 9]), (u'Attribute 14_A143', [1, 12]), (u'Attribute 7_A71', [2, 13, 12]), (u'Attribute 1_A12', [1, 11])]), None), ([0.30782577801424899, 0.44733572339875982, 0.6678571428571428, 0.72, 0.6157142857142858, 0.3842857142857143, 0.27999999999999997, 0.44666666666666666, 0.44142857142857145, 0.19142857142857142, 0.16333333333333333, 0.16333333333333333, 0.032411623666194204, 0.035315230890931706], 'Extreme Learning Machine', 'SVM (linear)', OrderedDict([(u'Attribute 20', [5, 1, 2, 1, 2, 13]), (u'Attribute 4_A410', [4, 2, 1, 3, 1]), (u'Attribute 4_A45', [4, 3, 6, 2, 11]), (u'Attribute 1_A14', [5, 4, 3, 9, 4, 3]), (u'Attribute 10_A103', [5, 5, 8, 4, 14, 2]), (u'Attribute 3_A30', [2, 6, 5]), (u'Attribute 3_A34', [4, 7, 7, 10, 9]), (u'Attribute 10_A102', [4, 8, 11, 5, 7]), (u'Attribute 4_A46', [4, 9, 10, 12, 4]), (u'Attribute 4_A41', [5, 10, 4, 8, 7, 6]), (u'Attribute 1_A11', [5, 11, 5, 11, 8, 8]), (u'Attribute 9_A91', [2, 12, 13]), (u'Attribute 4_A48', [3, 13, 12, 1]), (u'Attribute 3_A31', [3, 14, 6, 5]), (u'Attribute 4_A40', [5, 15, 7, 14, 6, 14]), (u'Attribute 6_A64', [4, 9, 10, 3, 15]), (u'Attribute 9_A93', [2, 14, 13]), (u'Attribute 6_A63', [2, 15, 15]), (u'Attribute 6_A61', [2, 15, 10]), (u'Attribute 7_A74', [1, 9]), (u'Attribute 14_A143', [1, 12]), (u'Attribute 7_A71', [2, 13, 12]), (u'Attribute 1_A12', [1, 11])]), None), ([0.23121188090194056, 0.5487445469860911, 0.6259523809523809, 0.7033333333333334, 0.5485714285714286, 0.4514285714285714, 0.2966666666666667, 0.6266666666666667, 0.5114285714285713, 0.40857142857142853, 0.25666666666666665, 0.25666666666666665, 0.004907339516837084, 0.05682650526541527], 'Gaussian Naive Bayes', 'SVM (linear)', OrderedDict([(u'Attribute 20', [5, 1, 2, 1, 2, 13]), (u'Attribute 4_A410', [4, 2, 1, 3, 1]), (u'Attribute 4_A45', [4, 3, 6, 2, 11]), (u'Attribute 1_A14', [5, 4, 3, 9, 4, 3]), (u'Attribute 10_A103', [5, 5, 8, 4, 14, 2]), (u'Attribute 3_A30', [2, 6, 5]), (u'Attribute 3_A34', [4, 7, 7, 10, 9]), (u'Attribute 10_A102', [4, 8, 11, 5, 7]), (u'Attribute 4_A46', [4, 9, 10, 12, 4]), (u'Attribute 4_A41', [5, 10, 4, 8, 7, 6]), (u'Attribute 1_A11', [5, 11, 5, 11, 8, 8]), (u'Attribute 9_A91', [2, 12, 13]), (u'Attribute 4_A48', [3, 13, 12, 1]), (u'Attribute 3_A31', [3, 14, 6, 5]), (u'Attribute 4_A40', [5, 15, 7, 14, 6, 14]), (u'Attribute 6_A64', [4, 9, 10, 3, 15]), (u'Attribute 9_A93', [2, 14, 13]), (u'Attribute 6_A63', [2, 15, 15]), (u'Attribute 6_A61', [2, 15, 10]), (u'Attribute 7_A74', [1, 9]), (u'Attribute 14_A143', [1, 12]), (u'Attribute 7_A71', [2, 13, 12]), (u'Attribute 1_A12', [1, 11])]), None), ([0.29022865527156483, 0.50944184742629695, 0.6569047619047619, 0.7866666666666667, 0.5271428571428571, 0.47285714285714286, 0.21333333333333332, 0.7533333333333333, 0.42428571428571427, 0.4371428571428571, 0.14333333333333334, 0.14333333333333334, 0.004769389454758688, 0.022730302828309776], 'K-nearest neighbours', 'SVM (linear)', OrderedDict([(u'Attribute 20', [5, 1, 2, 1, 2, 13]), (u'Attribute 4_A410', [4, 2, 1, 3, 1]), (u'Attribute 4_A45', [4, 3, 6, 2, 11]), (u'Attribute 1_A14', [5, 4, 3, 9, 4, 3]), (u'Attribute 10_A103', [5, 5, 8, 4, 14, 2]), (u'Attribute 3_A30', [2, 6, 5]), (u'Attribute 3_A34', [4, 7, 7, 10, 9]), (u'Attribute 10_A102', [4, 8, 11, 5, 7]), (u'Attribute 4_A46', [4, 9, 10, 12, 4]), (u'Attribute 4_A41', [5, 10, 4, 8, 7, 6]), (u'Attribute 1_A11', [5, 11, 5, 11, 8, 8]), (u'Attribute 9_A91', [2, 12, 13]), (u'Attribute 4_A48', [3, 13, 12, 1]), (u'Attribute 3_A31', [3, 14, 6, 5]), (u'Attribute 4_A40', [5, 15, 7, 14, 6, 14]), (u'Attribute 6_A64', [4, 9, 10, 3, 15]), (u'Attribute 9_A93', [2, 14, 13]), (u'Attribute 6_A63', [2, 15, 15]), (u'Attribute 6_A61', [2, 15, 10]), (u'Attribute 7_A74', [1, 9]), (u'Attribute 14_A143', [1, 12]), (u'Attribute 7_A71', [2, 13, 12]), (u'Attribute 1_A12', [1, 11])]), None), ([0.32302708942898878, 0.45727411643506699, 0.6761904761904761, 0.7366666666666666, 0.6157142857142857, 0.38428571428571423, 0.2633333333333333, 0.5133333333333333, 0.48, 0.2314285714285714, 0.17, 0.17, 0.007763237847943221, 0.022936370626271064], 'Logistic regression', 'SVM (linear)', OrderedDict([(u'Attribute 20', [5, 1, 2, 1, 2, 13]), (u'Attribute 4_A410', [4, 2, 1, 3, 1]), (u'Attribute 4_A45', [4, 3, 6, 2, 11]), (u'Attribute 1_A14', [5, 4, 3, 9, 4, 3]), (u'Attribute 10_A103', [5, 5, 8, 4, 14, 2]), (u'Attribute 3_A30', [2, 6, 5]), (u'Attribute 3_A34', [4, 7, 7, 10, 9]), (u'Attribute 10_A102', [4, 8, 11, 5, 7]), (u'Attribute 4_A46', [4, 9, 10, 12, 4]), (u'Attribute 4_A41', [5, 10, 4, 8, 7, 6]), (u'Attribute 1_A11', [5, 11, 5, 11, 8, 8]), (u'Attribute 9_A91', [2, 12, 13]), (u'Attribute 4_A48', [3, 13, 12, 1]), (u'Attribute 3_A31', [3, 14, 6, 5]), (u'Attribute 4_A40', [5, 15, 7, 14, 6, 14]), (u'Attribute 6_A64', [4, 9, 10, 3, 15]), (u'Attribute 9_A93', [2, 14, 13]), (u'Attribute 6_A63', [2, 15, 15]), (u'Attribute 6_A61', [2, 15, 10]), (u'Attribute 7_A74', [1, 9]), (u'Attribute 14_A143', [1, 12]), (u'Attribute 7_A71', [2, 13, 12]), (u'Attribute 1_A12', [1, 11])]), None), ([0.24223397016326731, 0.50265723385610828, 0.6321428571428572, 0.6900000000000001, 0.5742857142857143, 0.4257142857142857, 0.30999999999999994, 0.64, 0.49142857142857144, 0.3657142857142857, 0.22666666666666666, 0.22666666666666666, 1.8046566748963766, 0.027251245576808514], 'Random forest', 'SVM (linear)', OrderedDict([(u'Attribute 20', [5, 1, 2, 1, 2, 13]), (u'Attribute 4_A410', [4, 2, 1, 3, 1]), (u'Attribute 4_A45', [4, 3, 6, 2, 11]), (u'Attribute 1_A14', [5, 4, 3, 9, 4, 3]), (u'Attribute 10_A103', [5, 5, 8, 4, 14, 2]), (u'Attribute 3_A30', [2, 6, 5]), (u'Attribute 3_A34', [4, 7, 7, 10, 9]), (u'Attribute 10_A102', [4, 8, 11, 5, 7]), (u'Attribute 4_A46', [4, 9, 10, 12, 4]), (u'Attribute 4_A41', [5, 10, 4, 8, 7, 6]), (u'Attribute 1_A11', [5, 11, 5, 11, 8, 8]), (u'Attribute 9_A91', [2, 12, 13]), (u'Attribute 4_A48', [3, 13, 12, 1]), (u'Attribute 3_A31', [3, 14, 6, 5]), (u'Attribute 4_A40', [5, 15, 7, 14, 6, 14]), (u'Attribute 6_A64', [4, 9, 10, 3, 15]), (u'Attribute 9_A93', [2, 14, 13]), (u'Attribute 6_A63', [2, 15, 15]), (u'Attribute 6_A61', [2, 15, 10]), (u'Attribute 7_A74', [1, 9]), (u'Attribute 14_A143', [1, 12]), (u'Attribute 7_A71', [2, 13, 12]), (u'Attribute 1_A12', [1, 11])]), None), ([0.30614100896229529, 0.45415772039092211, 0.6642857142857143, 0.82, 0.5085714285714287, 0.4914285714285714, 0.18, 0.0, 0.5314285714285714, 0.0, 0.2033333333333333, 0.2033333333333333, 0.9371753683372306, 0.02257514536406392], 'SVM (RDF)', 'SVM (linear)', OrderedDict([(u'Attribute 20', [5, 1, 2, 1, 2, 13]), (u'Attribute 4_A410', [4, 2, 1, 3, 1]), (u'Attribute 4_A45', [4, 3, 6, 2, 11]), (u'Attribute 1_A14', [5, 4, 3, 9, 4, 3]), (u'Attribute 10_A103', [5, 5, 8, 4, 14, 2]), (u'Attribute 3_A30', [2, 6, 5]), (u'Attribute 3_A34', [4, 7, 7, 10, 9]), (u'Attribute 10_A102', [4, 8, 11, 5, 7]), (u'Attribute 4_A46', [4, 9, 10, 12, 4]), (u'Attribute 4_A41', [5, 10, 4, 8, 7, 6]), (u'Attribute 1_A11', [5, 11, 5, 11, 8, 8]), (u'Attribute 9_A91', [2, 12, 13]), (u'Attribute 4_A48', [3, 13, 12, 1]), (u'Attribute 3_A31', [3, 14, 6, 5]), (u'Attribute 4_A40', [5, 15, 7, 14, 6, 14]), (u'Attribute 6_A64', [4, 9, 10, 3, 15]), (u'Attribute 9_A93', [2, 14, 13]), (u'Attribute 6_A63', [2, 15, 15]), (u'Attribute 6_A61', [2, 15, 10]), (u'Attribute 7_A74', [1, 9]), (u'Attribute 14_A143', [1, 12]), (u'Attribute 7_A71', [2, 13, 12]), (u'Attribute 1_A12', [1, 11])]), None), ([0.31535779661373964, 0.44262065185024868, 0.6716666666666666, 0.7733333333333333, 0.5700000000000001, 0.43, 0.22666666666666666, 0.0, 0.5828571428571429, 0.0, 0.2333333333333333, 0.2333333333333333, 0.5357421969920846, 0.022879453397209946], 'SVM (linear)', 'SVM (linear)', OrderedDict([(u'Attribute 20', [5, 1, 2, 1, 2, 13]), (u'Attribute 4_A410', [4, 2, 1, 3, 1]), (u'Attribute 4_A45', [4, 3, 6, 2, 11]), (u'Attribute 1_A14', [5, 4, 3, 9, 4, 3]), (u'Attribute 10_A103', [5, 5, 8, 4, 14, 2]), (u'Attribute 3_A30', [2, 6, 5]), (u'Attribute 3_A34', [4, 7, 7, 10, 9]), (u'Attribute 10_A102', [4, 8, 11, 5, 7]), (u'Attribute 4_A46', [4, 9, 10, 12, 4]), (u'Attribute 4_A41', [5, 10, 4, 8, 7, 6]), (u'Attribute 1_A11', [5, 11, 5, 11, 8, 8]), (u'Attribute 9_A91', [2, 12, 13]), (u'Attribute 4_A48', [3, 13, 12, 1]), (u'Attribute 3_A31', [3, 14, 6, 5]), (u'Attribute 4_A40', [5, 15, 7, 14, 6, 14]), (u'Attribute 6_A64', [4, 9, 10, 3, 15]), (u'Attribute 9_A93', [2, 14, 13]), (u'Attribute 6_A63', [2, 15, 15]), (u'Attribute 6_A61', [2, 15, 10]), (u'Attribute 7_A74', [1, 9]), (u'Attribute 14_A143', [1, 12]), (u'Attribute 7_A71', [2, 13, 12]), (u'Attribute 1_A12', [1, 11])]), None), ([0.07455426991642819, 0.29174329790043174, 0.5395238095238095, 0.6733333333333333, 0.4057142857142857, 0.5942857142857143, 0.3266666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.43929578455400087, 0.05193751696927992], 'SVM (polynomial)', 'SVM (linear)', OrderedDict([(u'Attribute 20', [5, 1, 2, 1, 2, 13]), (u'Attribute 4_A410', [4, 2, 1, 3, 1]), (u'Attribute 4_A45', [4, 3, 6, 2, 11]), (u'Attribute 1_A14', [5, 4, 3, 9, 4, 3]), (u'Attribute 10_A103', [5, 5, 8, 4, 14, 2]), (u'Attribute 3_A30', [2, 6, 5]), (u'Attribute 3_A34', [4, 7, 7, 10, 9]), (u'Attribute 10_A102', [4, 8, 11, 5, 7]), (u'Attribute 4_A46', [4, 9, 10, 12, 4]), (u'Attribute 4_A41', [5, 10, 4, 8, 7, 6]), (u'Attribute 1_A11', [5, 11, 5, 11, 8, 8]), (u'Attribute 9_A91', [2, 12, 13]), (u'Attribute 4_A48', [3, 13, 12, 1]), (u'Attribute 3_A31', [3, 14, 6, 5]), (u'Attribute 4_A40', [5, 15, 7, 14, 6, 14]), (u'Attribute 6_A64', [4, 9, 10, 3, 15]), (u'Attribute 9_A93', [2, 14, 13]), (u'Attribute 6_A63', [2, 15, 15]), (u'Attribute 6_A61', [2, 15, 10]), (u'Attribute 7_A74', [1, 9]), (u'Attribute 14_A143', [1, 12]), (u'Attribute 7_A71', [2, 13, 12]), (u'Attribute 1_A12', [1, 11])]), None)], 'SVM (linear)'), ('Random forest', [([0.36031250788813313, 0.27304098225840551, 0.695, 0.71, 0.6799999999999999, 0.32, 0.29, 0.0, 0.0, 0.0, 0.0, 0.0, 0.22302781972794575, 0.035390596647496074], 'AdaBoost', 'Random forest', OrderedDict([(u'Attribute 5', [5, 1, 1, 1, 1, 1]), (u'Attribute 13', [5, 2, 2, 2, 3, 2]), (u'Attribute 2', [5, 3, 3, 3, 2, 3]), (u'Attribute 1_A14', [5, 4, 4, 4, 4, 4]), (u'Attribute 11', [5, 5, 6, 6, 6, 6]), (u'Attribute 8', [5, 6, 5, 5, 5, 5]), (u'Attribute 1_A11', [5, 7, 7, 7, 7, 7]), (u'Attribute 6_A61', [5, 8, 10, 10, 8, 9]), (u'Attribute 3_A34', [5, 9, 9, 8, 10, 8]), (u'Attribute 16', [5, 10, 8, 9, 11, 15]), (u'Attribute 19', [5, 11, 12, 12, 12, 13]), (u'Attribute 4_A40', [3, 12, 13, 15]), (u'Attribute 14_A141', [2, 13, 11]), (u'Attribute 12_A121', [3, 14, 13, 11]), (u'Attribute 7_A73', [1, 15]), (u'Attribute 9_A93', [2, 14, 14]), (u'Attribute 9_A92', [3, 15, 14, 12]), (u'Attribute 14_A143', [2, 11, 9]), (u'Attribute 17_A173', [2, 13, 14]), (u'Attribute 4_A43', [1, 15]), (u'Attribute 1_A12', [1, 10])]), None), ([0.33093899412820188, 0.46881833169894116, 0.6802380952380952, 0.7233333333333334, 0.6371428571428571, 0.3628571428571429, 0.27666666666666667, 0.5966666666666667, 0.4800000000000001, 0.20571428571428568, 0.14666666666666667, 0.14666666666666667, 4.164276488147616, 0.025338971803597156], 'Artificial neural network', 'Random forest', OrderedDict([(u'Attribute 5', [5, 1, 1, 1, 1, 1]), (u'Attribute 13', [5, 2, 2, 2, 3, 2]), (u'Attribute 2', [5, 3, 3, 3, 2, 3]), (u'Attribute 1_A14', [5, 4, 4, 4, 4, 4]), (u'Attribute 11', [5, 5, 6, 6, 6, 6]), (u'Attribute 8', [5, 6, 5, 5, 5, 5]), (u'Attribute 1_A11', [5, 7, 7, 7, 7, 7]), (u'Attribute 6_A61', [5, 8, 10, 10, 8, 9]), (u'Attribute 3_A34', [5, 9, 9, 8, 10, 8]), (u'Attribute 16', [5, 10, 8, 9, 11, 15]), (u'Attribute 19', [5, 11, 12, 12, 12, 13]), (u'Attribute 4_A40', [3, 12, 13, 15]), (u'Attribute 14_A141', [2, 13, 11]), (u'Attribute 12_A121', [3, 14, 13, 11]), (u'Attribute 7_A73', [1, 15]), (u'Attribute 9_A93', [2, 14, 14]), (u'Attribute 9_A92', [3, 15, 14, 12]), (u'Attribute 14_A143', [2, 11, 9]), (u'Attribute 17_A173', [2, 13, 14]), (u'Attribute 4_A43', [1, 15]), (u'Attribute 1_A12', [1, 10])]), None), ([0.32624993770506033, 0.44301299835296304, 0.6776190476190477, 0.7166666666666667, 0.6385714285714286, 0.36142857142857143, 0.2833333333333333, 0.5066666666666666, 0.4685714285714286, 0.18285714285714283, 0.14666666666666667, 0.14666666666666667, 0.00666929687426876, 0.019363452963188053], 'Bernoulli Naive Bayes', 'Random forest', OrderedDict([(u'Attribute 5', [5, 1, 1, 1, 1, 1]), (u'Attribute 13', [5, 2, 2, 2, 3, 2]), (u'Attribute 2', [5, 3, 3, 3, 2, 3]), (u'Attribute 1_A14', [5, 4, 4, 4, 4, 4]), (u'Attribute 11', [5, 5, 6, 6, 6, 6]), (u'Attribute 8', [5, 6, 5, 5, 5, 5]), (u'Attribute 1_A11', [5, 7, 7, 7, 7, 7]), (u'Attribute 6_A61', [5, 8, 10, 10, 8, 9]), (u'Attribute 3_A34', [5, 9, 9, 8, 10, 8]), (u'Attribute 16', [5, 10, 8, 9, 11, 15]), (u'Attribute 19', [5, 11, 12, 12, 12, 13]), (u'Attribute 4_A40', [3, 12, 13, 15]), (u'Attribute 14_A141', [2, 13, 11]), (u'Attribute 12_A121', [3, 14, 13, 11]), (u'Attribute 7_A73', [1, 15]), (u'Attribute 9_A93', [2, 14, 14]), (u'Attribute 9_A92', [3, 15, 14, 12]), (u'Attribute 14_A143', [2, 11, 9]), (u'Attribute 17_A173', [2, 13, 14]), (u'Attribute 4_A43', [1, 15]), (u'Attribute 1_A12', [1, 10])]), None), ([0.22366652200885215, 0.43625834514781503, 0.6209523809523809, 0.6033333333333334, 0.6385714285714286, 0.36142857142857143, 0.3966666666666667, 0.31333333333333335, 0.41571428571428565, 0.14285714285714285, 0.16999999999999998, 0.16999999999999998, 0.006737517255077125, 0.030384907937749107], 'Decision Tree', 'Random forest', OrderedDict([(u'Attribute 5', [5, 1, 1, 1, 1, 1]), (u'Attribute 13', [5, 2, 2, 2, 3, 2]), (u'Attribute 2', [5, 3, 3, 3, 2, 3]), (u'Attribute 1_A14', [5, 4, 4, 4, 4, 4]), (u'Attribute 11', [5, 5, 6, 6, 6, 6]), (u'Attribute 8', [5, 6, 5, 5, 5, 5]), (u'Attribute 1_A11', [5, 7, 7, 7, 7, 7]), (u'Attribute 6_A61', [5, 8, 10, 10, 8, 9]), (u'Attribute 3_A34', [5, 9, 9, 8, 10, 8]), (u'Attribute 16', [5, 10, 8, 9, 11, 15]), (u'Attribute 19', [5, 11, 12, 12, 12, 13]), (u'Attribute 4_A40', [3, 12, 13, 15]), (u'Attribute 14_A141', [2, 13, 11]), (u'Attribute 12_A121', [3, 14, 13, 11]), (u'Attribute 7_A73', [1, 15]), (u'Attribute 9_A93', [2, 14, 14]), (u'Attribute 9_A92', [3, 15, 14, 12]), (u'Attribute 14_A143', [2, 11, 9]), (u'Attribute 17_A173', [2, 13, 14]), (u'Attribute 4_A43', [1, 15]), (u'Attribute 1_A12', [1, 10])]), None), ([0.34652264604375682, 0.46225823573161517, 0.6869047619047619, 0.6866666666666668, 0.6871428571428572, 0.31285714285714283, 0.31333333333333335, 0.4, 0.39142857142857146, 0.11285714285714285, 0.10999999999999999, 0.10999999999999999, 0.034026877018877216, 0.03248058900530469], 'Extreme Learning Machine', 'Random forest', OrderedDict([(u'Attribute 5', [5, 1, 1, 1, 1, 1]), (u'Attribute 13', [5, 2, 2, 2, 3, 2]), (u'Attribute 2', [5, 3, 3, 3, 2, 3]), (u'Attribute 1_A14', [5, 4, 4, 4, 4, 4]), (u'Attribute 11', [5, 5, 6, 6, 6, 6]), (u'Attribute 8', [5, 6, 5, 5, 5, 5]), (u'Attribute 1_A11', [5, 7, 7, 7, 7, 7]), (u'Attribute 6_A61', [5, 8, 10, 10, 8, 9]), (u'Attribute 3_A34', [5, 9, 9, 8, 10, 8]), (u'Attribute 16', [5, 10, 8, 9, 11, 15]), (u'Attribute 19', [5, 11, 12, 12, 12, 13]), (u'Attribute 4_A40', [3, 12, 13, 15]), (u'Attribute 14_A141', [2, 13, 11]), (u'Attribute 12_A121', [3, 14, 13, 11]), (u'Attribute 7_A73', [1, 15]), (u'Attribute 9_A93', [2, 14, 14]), (u'Attribute 9_A92', [3, 15, 14, 12]), (u'Attribute 14_A143', [2, 11, 9]), (u'Attribute 17_A173', [2, 13, 14]), (u'Attribute 4_A43', [1, 15]), (u'Attribute 1_A12', [1, 10])]), None), ([0.32624993770506033, 0.5859724155448075, 0.6776190476190477, 0.7166666666666666, 0.6385714285714286, 0.3614285714285715, 0.2833333333333333, 0.6366666666666666, 0.5885714285714286, 0.2871428571428571, 0.21000000000000002, 0.21000000000000002, 0.004335616502449291, 0.0340933758469881], 'Gaussian Naive Bayes', 'Random forest', OrderedDict([(u'Attribute 5', [5, 1, 1, 1, 1, 1]), (u'Attribute 13', [5, 2, 2, 2, 3, 2]), (u'Attribute 2', [5, 3, 3, 3, 2, 3]), (u'Attribute 1_A14', [5, 4, 4, 4, 4, 4]), (u'Attribute 11', [5, 5, 6, 6, 6, 6]), (u'Attribute 8', [5, 6, 5, 5, 5, 5]), (u'Attribute 1_A11', [5, 7, 7, 7, 7, 7]), (u'Attribute 6_A61', [5, 8, 10, 10, 8, 9]), (u'Attribute 3_A34', [5, 9, 9, 8, 10, 8]), (u'Attribute 16', [5, 10, 8, 9, 11, 15]), (u'Attribute 19', [5, 11, 12, 12, 12, 13]), (u'Attribute 4_A40', [3, 12, 13, 15]), (u'Attribute 14_A141', [2, 13, 11]), (u'Attribute 12_A121', [3, 14, 13, 11]), (u'Attribute 7_A73', [1, 15]), (u'Attribute 9_A93', [2, 14, 14]), (u'Attribute 9_A92', [3, 15, 14, 12]), (u'Attribute 14_A143', [2, 11, 9]), (u'Attribute 17_A173', [2, 13, 14]), (u'Attribute 4_A43', [1, 15]), (u'Attribute 1_A12', [1, 10])]), None), ([0.35793343740399874, 0.42872210042043196, 0.6947619047619047, 0.7366666666666666, 0.6528571428571428, 0.34714285714285714, 0.2633333333333333, 0.4833333333333334, 0.3985714285714286, 0.13999999999999999, 0.10666666666666666, 0.10666666666666666, 0.0032283936847239403, 0.02083299319450224], 'K-nearest neighbours', 'Random forest', OrderedDict([(u'Attribute 5', [5, 1, 1, 1, 1, 1]), (u'Attribute 13', [5, 2, 2, 2, 3, 2]), (u'Attribute 2', [5, 3, 3, 3, 2, 3]), (u'Attribute 1_A14', [5, 4, 4, 4, 4, 4]), (u'Attribute 11', [5, 5, 6, 6, 6, 6]), (u'Attribute 8', [5, 6, 5, 5, 5, 5]), (u'Attribute 1_A11', [5, 7, 7, 7, 7, 7]), (u'Attribute 6_A61', [5, 8, 10, 10, 8, 9]), (u'Attribute 3_A34', [5, 9, 9, 8, 10, 8]), (u'Attribute 16', [5, 10, 8, 9, 11, 15]), (u'Attribute 19', [5, 11, 12, 12, 12, 13]), (u'Attribute 4_A40', [3, 12, 13, 15]), (u'Attribute 14_A141', [2, 13, 11]), (u'Attribute 12_A121', [3, 14, 13, 11]), (u'Attribute 7_A73', [1, 15]), (u'Attribute 9_A93', [2, 14, 14]), (u'Attribute 9_A92', [3, 15, 14, 12]), (u'Attribute 14_A143', [2, 11, 9]), (u'Attribute 17_A173', [2, 13, 14]), (u'Attribute 4_A43', [1, 15]), (u'Attribute 1_A12', [1, 10])]), None), ([0.32589671308486734, 0.48009844077150138, 0.6776190476190477, 0.7266666666666668, 0.6285714285714287, 0.3714285714285714, 0.2733333333333333, 0.6233333333333334, 0.4757142857142857, 0.21285714285714286, 0.15, 0.15, 0.012273027623518685, 0.017615829821994177], 'Logistic regression', 'Random forest', OrderedDict([(u'Attribute 5', [5, 1, 1, 1, 1, 1]), (u'Attribute 13', [5, 2, 2, 2, 3, 2]), (u'Attribute 2', [5, 3, 3, 3, 2, 3]), (u'Attribute 1_A14', [5, 4, 4, 4, 4, 4]), (u'Attribute 11', [5, 5, 6, 6, 6, 6]), (u'Attribute 8', [5, 6, 5, 5, 5, 5]), (u'Attribute 1_A11', [5, 7, 7, 7, 7, 7]), (u'Attribute 6_A61', [5, 8, 10, 10, 8, 9]), (u'Attribute 3_A34', [5, 9, 9, 8, 10, 8]), (u'Attribute 16', [5, 10, 8, 9, 11, 15]), (u'Attribute 19', [5, 11, 12, 12, 12, 13]), (u'Attribute 4_A40', [3, 12, 13, 15]), (u'Attribute 14_A141', [2, 13, 11]), (u'Attribute 12_A121', [3, 14, 13, 11]), (u'Attribute 7_A73', [1, 15]), (u'Attribute 9_A93', [2, 14, 14]), (u'Attribute 9_A92', [3, 15, 14, 12]), (u'Attribute 14_A143', [2, 11, 9]), (u'Attribute 17_A173', [2, 13, 14]), (u'Attribute 4_A43', [1, 15]), (u'Attribute 1_A12', [1, 10])]), None), ([0.33626725463953655, 0.45843404844290658, 0.6814285714285713, 0.6799999999999999, 0.6828571428571429, 0.31714285714285717, 0.32, 0.4533333333333333, 0.4514285714285714, 0.13857142857142857, 0.15333333333333332, 0.15333333333333332, 1.6545926654638556, 0.01930774755496504], 'Random forest', 'Random forest', OrderedDict([(u'Attribute 5', [5, 1, 1, 1, 1, 1]), (u'Attribute 13', [5, 2, 2, 2, 3, 2]), (u'Attribute 2', [5, 3, 3, 3, 2, 3]), (u'Attribute 1_A14', [5, 4, 4, 4, 4, 4]), (u'Attribute 11', [5, 5, 6, 6, 6, 6]), (u'Attribute 8', [5, 6, 5, 5, 5, 5]), (u'Attribute 1_A11', [5, 7, 7, 7, 7, 7]), (u'Attribute 6_A61', [5, 8, 10, 10, 8, 9]), (u'Attribute 3_A34', [5, 9, 9, 8, 10, 8]), (u'Attribute 16', [5, 10, 8, 9, 11, 15]), (u'Attribute 19', [5, 11, 12, 12, 12, 13]), (u'Attribute 4_A40', [3, 12, 13, 15]), (u'Attribute 14_A141', [2, 13, 11]), (u'Attribute 12_A121', [3, 14, 13, 11]), (u'Attribute 7_A73', [1, 15]), (u'Attribute 9_A93', [2, 14, 14]), (u'Attribute 9_A92', [3, 15, 14, 12]), (u'Attribute 14_A143', [2, 11, 9]), (u'Attribute 17_A173', [2, 13, 14]), (u'Attribute 4_A43', [1, 15]), (u'Attribute 1_A12', [1, 10])]), None), ([0.34124774914901834, 0.49195041158052266, 0.6854761904761905, 0.7166666666666667, 0.6542857142857141, 0.34571428571428575, 0.2833333333333333, 0.2, 0.6271428571428571, 0.03285714285714285, 0.2633333333333333, 0.2633333333333333, 0.6761717378659032, 0.020748466599080313], 'SVM (RDF)', 'Random forest', OrderedDict([(u'Attribute 5', [5, 1, 1, 1, 1, 1]), (u'Attribute 13', [5, 2, 2, 2, 3, 2]), (u'Attribute 2', [5, 3, 3, 3, 2, 3]), (u'Attribute 1_A14', [5, 4, 4, 4, 4, 4]), (u'Attribute 11', [5, 5, 6, 6, 6, 6]), (u'Attribute 8', [5, 6, 5, 5, 5, 5]), (u'Attribute 1_A11', [5, 7, 7, 7, 7, 7]), (u'Attribute 6_A61', [5, 8, 10, 10, 8, 9]), (u'Attribute 3_A34', [5, 9, 9, 8, 10, 8]), (u'Attribute 16', [5, 10, 8, 9, 11, 15]), (u'Attribute 19', [5, 11, 12, 12, 12, 13]), (u'Attribute 4_A40', [3, 12, 13, 15]), (u'Attribute 14_A141', [2, 13, 11]), (u'Attribute 12_A121', [3, 14, 13, 11]), (u'Attribute 7_A73', [1, 15]), (u'Attribute 9_A93', [2, 14, 14]), (u'Attribute 9_A92', [3, 15, 14, 12]), (u'Attribute 14_A143', [2, 11, 9]), (u'Attribute 17_A173', [2, 13, 14]), (u'Attribute 4_A43', [1, 15]), (u'Attribute 1_A12', [1, 10])]), None), ([0.31885691224884355, 0.47825966175205264, 0.6735714285714286, 0.71, 0.6371428571428571, 0.3628571428571429, 0.29, 0.12666666666666665, 0.62, 0.02, 0.27666666666666667, 0.27666666666666667, 0.5014502868123671, 0.03839465665771669], 'SVM (linear)', 'Random forest', OrderedDict([(u'Attribute 5', [5, 1, 1, 1, 1, 1]), (u'Attribute 13', [5, 2, 2, 2, 3, 2]), (u'Attribute 2', [5, 3, 3, 3, 2, 3]), (u'Attribute 1_A14', [5, 4, 4, 4, 4, 4]), (u'Attribute 11', [5, 5, 6, 6, 6, 6]), (u'Attribute 8', [5, 6, 5, 5, 5, 5]), (u'Attribute 1_A11', [5, 7, 7, 7, 7, 7]), (u'Attribute 6_A61', [5, 8, 10, 10, 8, 9]), (u'Attribute 3_A34', [5, 9, 9, 8, 10, 8]), (u'Attribute 16', [5, 10, 8, 9, 11, 15]), (u'Attribute 19', [5, 11, 12, 12, 12, 13]), (u'Attribute 4_A40', [3, 12, 13, 15]), (u'Attribute 14_A141', [2, 13, 11]), (u'Attribute 12_A121', [3, 14, 13, 11]), (u'Attribute 7_A73', [1, 15]), (u'Attribute 9_A93', [2, 14, 14]), (u'Attribute 9_A92', [3, 15, 14, 12]), (u'Attribute 14_A143', [2, 11, 9]), (u'Attribute 17_A173', [2, 13, 14]), (u'Attribute 4_A43', [1, 15]), (u'Attribute 1_A12', [1, 10])]), None), ([0.30895096470949857, 0.41748920664286399, 0.6623809523809524, 0.5933333333333334, 0.7314285714285714, 0.26857142857142857, 0.4066666666666666, 0.32666666666666666, 0.36428571428571427, 0.09571428571428571, 0.11000000000000001, 0.11000000000000001, 0.3942407509313135, 0.035183355165839786], 'SVM (polynomial)', 'Random forest', OrderedDict([(u'Attribute 5', [5, 1, 1, 1, 1, 1]), (u'Attribute 13', [5, 2, 2, 2, 3, 2]), (u'Attribute 2', [5, 3, 3, 3, 2, 3]), (u'Attribute 1_A14', [5, 4, 4, 4, 4, 4]), (u'Attribute 11', [5, 5, 6, 6, 6, 6]), (u'Attribute 8', [5, 6, 5, 5, 5, 5]), (u'Attribute 1_A11', [5, 7, 7, 7, 7, 7]), (u'Attribute 6_A61', [5, 8, 10, 10, 8, 9]), (u'Attribute 3_A34', [5, 9, 9, 8, 10, 8]), (u'Attribute 16', [5, 10, 8, 9, 11, 15]), (u'Attribute 19', [5, 11, 12, 12, 12, 13]), (u'Attribute 4_A40', [3, 12, 13, 15]), (u'Attribute 14_A141', [2, 13, 11]), (u'Attribute 12_A121', [3, 14, 13, 11]), (u'Attribute 7_A73', [1, 15]), (u'Attribute 9_A93', [2, 14, 14]), (u'Attribute 9_A92', [3, 15, 14, 12]), (u'Attribute 14_A143', [2, 11, 9]), (u'Attribute 17_A173', [2, 13, 14]), (u'Attribute 4_A43', [1, 15]), (u'Attribute 1_A12', [1, 10])]), None)], 'Random forest')], [(None, [([0.68819952964261144, 0.41781142937503868, 0.8424284022637719, 0.8077207826546801, 0.8771360218728639, 0.12286397812713601, 0.19227921734531997, 0.31295610787942885, 0.4073820915926179, 0.010492139439507862, 0.03918561607615019, 0.03918561607615019, 0.2427006456485508, 0.0401915580544261], 'AdaBoost', None, OrderedDict([(u'A2', [5, 1, 1, 1, 1, 1]), (u'A3', [5, 2, 2, 2, 2, 2]), (u'A7', [5, 3, 3, 3, 3, 3]), (u'A10', [5, 4, 4, 4, 4, 4]), (u'A13', [5, 5, 5, 5, 5, 5]), (u'A14', [5, 6, 6, 6, 6, 6]), (u'A1_a', [5, 7, 7, 7, 7, 7]), (u'A1_b', [5, 8, 8, 8, 8, 8]), (u'A4_g', [5, 9, 9, 9, 9, 9]), (u'A4_gg', [5, 10, 10, 10, 10, 10]), (u'A4_p', [5, 11, 11, 11, 11, 11]), (u'A5_aa', [5, 12, 12, 12, 12, 12]), (u'A5_c', [5, 13, 13, 13, 13, 13]), (u'A5_cc', [5, 14, 14, 14, 14, 14]), (u'A5_d', [5, 15, 15, 15, 15, 15]), (u'A5_e', [5, 16, 16, 16, 16, 16]), (u'A5_ff', [5, 17, 17, 17, 17, 17]), (u'A5_i', [5, 18, 18, 18, 18, 18]), (u'A5_j', [5, 19, 19, 19, 19, 19]), (u'A5_k', [5, 20, 20, 20, 20, 20]), (u'A5_m', [5, 21, 21, 21, 21, 21]), (u'A5_q', [5, 22, 22, 22, 22, 22]), (u'A5_r', [5, 23, 23, 23, 23, 23]), (u'A5_w', [5, 24, 24, 24, 24, 24]), (u'A5_x', [5, 25, 25, 25, 25, 25]), (u'A6_bb', [5, 26, 26, 26, 26, 26]), (u'A6_dd', [5, 27, 27, 27, 27, 27]), (u'A6_ff', [5, 28, 28, 28, 28, 28]), (u'A6_h', [5, 29, 29, 29, 29, 29]), (u'A6_j', [5, 30, 30, 30, 30, 30]), (u'A6_o', [5, 31, 31, 31, 31, 31]), (u'A6_v', [5, 32, 32, 32, 32, 32]), (u'A6_z', [5, 33, 33, 33, 33, 33]), (u'A12_g', [5, 34, 34, 34, 34, 34]), (u'A12_p', [5, 35, 35, 35, 35, 35]), (u'A12_s', [5, 36, 36, 36, 36, 36]), (u'A8', [5, 37, 37, 37, 37, 37]), (u'A9', [5, 38, 38, 38, 38, 38]), (u'A11', [5, 39, 39, 39, 39, 39])]), None), ([0.76328797146350624, 0.719253727600764, 0.8825269299155296, 0.8826546800634585, 0.8823991797676008, 0.11760082023239918, 0.11734531993654151, 0.7719725013220518, 0.8092276144907725, 0.06797676008202323, 0.08164992067689053, 0.08164992067689053, 8.220114567979344, 0.039944488719374414], 'Artificial neural network', None, OrderedDict([(u'A2', [5, 1, 1, 1, 1, 1]), (u'A3', [5, 2, 2, 2, 2, 2]), (u'A7', [5, 3, 3, 3, 3, 3]), (u'A10', [5, 4, 4, 4, 4, 4]), (u'A13', [5, 5, 5, 5, 5, 5]), (u'A14', [5, 6, 6, 6, 6, 6]), (u'A1_a', [5, 7, 7, 7, 7, 7]), (u'A1_b', [5, 8, 8, 8, 8, 8]), (u'A4_g', [5, 9, 9, 9, 9, 9]), (u'A4_gg', [5, 10, 10, 10, 10, 10]), (u'A4_p', [5, 11, 11, 11, 11, 11]), (u'A5_aa', [5, 12, 12, 12, 12, 12]), (u'A5_c', [5, 13, 13, 13, 13, 13]), (u'A5_cc', [5, 14, 14, 14, 14, 14]), (u'A5_d', [5, 15, 15, 15, 15, 15]), (u'A5_e', [5, 16, 16, 16, 16, 16]), (u'A5_ff', [5, 17, 17, 17, 17, 17]), (u'A5_i', [5, 18, 18, 18, 18, 18]), (u'A5_j', [5, 19, 19, 19, 19, 19]), (u'A5_k', [5, 20, 20, 20, 20, 20]), (u'A5_m', [5, 21, 21, 21, 21, 21]), (u'A5_q', [5, 22, 22, 22, 22, 22]), (u'A5_r', [5, 23, 23, 23, 23, 23]), (u'A5_w', [5, 24, 24, 24, 24, 24]), (u'A5_x', [5, 25, 25, 25, 25, 25]), (u'A6_bb', [5, 26, 26, 26, 26, 26]), (u'A6_dd', [5, 27, 27, 27, 27, 27]), (u'A6_ff', [5, 28, 28, 28, 28, 28]), (u'A6_h', [5, 29, 29, 29, 29, 29]), (u'A6_j', [5, 30, 30, 30, 30, 30]), (u'A6_o', [5, 31, 31, 31, 31, 31]), (u'A6_v', [5, 32, 32, 32, 32, 32]), (u'A6_z', [5, 33, 33, 33, 33, 33]), (u'A12_g', [5, 34, 34, 34, 34, 34]), (u'A12_p', [5, 35, 35, 35, 35, 35]), (u'A12_s', [5, 36, 36, 36, 36, 36]), (u'A8', [5, 37, 37, 37, 37, 37]), (u'A9', [5, 38, 38, 38, 38, 38]), (u'A11', [5, 39, 39, 39, 39, 39])]), None), ([0.68879107624407898, 0.76023700451979803, 0.8440539115203036, 0.8240613432046537, 0.8640464798359535, 0.13595352016404647, 0.17593865679534637, 0.7815970386039133, 0.8014012303485988, 0.08632946001367053, 0.12390269698572183, 0.12390269698572183, 0.09157197567128339, 0.039438186017082766], 'Bernoulli Naive Bayes', None, OrderedDict([(u'A2', [5, 1, 1, 1, 1, 1]), (u'A3', [5, 2, 2, 2, 2, 2]), (u'A7', [5, 3, 3, 3, 3, 3]), (u'A10', [5, 4, 4, 4, 4, 4]), (u'A13', [5, 5, 5, 5, 5, 5]), (u'A14', [5, 6, 6, 6, 6, 6]), (u'A1_a', [5, 7, 7, 7, 7, 7]), (u'A1_b', [5, 8, 8, 8, 8, 8]), (u'A4_g', [5, 9, 9, 9, 9, 9]), (u'A4_gg', [5, 10, 10, 10, 10, 10]), (u'A4_p', [5, 11, 11, 11, 11, 11]), (u'A5_aa', [5, 12, 12, 12, 12, 12]), (u'A5_c', [5, 13, 13, 13, 13, 13]), (u'A5_cc', [5, 14, 14, 14, 14, 14]), (u'A5_d', [5, 15, 15, 15, 15, 15]), (u'A5_e', [5, 16, 16, 16, 16, 16]), (u'A5_ff', [5, 17, 17, 17, 17, 17]), (u'A5_i', [5, 18, 18, 18, 18, 18]), (u'A5_j', [5, 19, 19, 19, 19, 19]), (u'A5_k', [5, 20, 20, 20, 20, 20]), (u'A5_m', [5, 21, 21, 21, 21, 21]), (u'A5_q', [5, 22, 22, 22, 22, 22]), (u'A5_r', [5, 23, 23, 23, 23, 23]), (u'A5_w', [5, 24, 24, 24, 24, 24]), (u'A5_x', [5, 25, 25, 25, 25, 25]), (u'A6_bb', [5, 26, 26, 26, 26, 26]), (u'A6_dd', [5, 27, 27, 27, 27, 27]), (u'A6_ff', [5, 28, 28, 28, 28, 28]), (u'A6_h', [5, 29, 29, 29, 29, 29]), (u'A6_j', [5, 30, 30, 30, 30, 30]), (u'A6_o', [5, 31, 31, 31, 31, 31]), (u'A6_v', [5, 32, 32, 32, 32, 32]), (u'A6_z', [5, 33, 33, 33, 33, 33]), (u'A12_g', [5, 34, 34, 34, 34, 34]), (u'A12_p', [5, 35, 35, 35, 35, 35]), (u'A12_s', [5, 36, 36, 36, 36, 36]), (u'A8', [5, 37, 37, 37, 37, 37]), (u'A9', [5, 38, 38, 38, 38, 38]), (u'A11', [5, 39, 39, 39, 39, 39])]), None), ([0.66120797801737441, 0.73863376873871123, 0.8322199843631, 0.8888418826017979, 0.7755980861244018, 0.22440191387559807, 0.111158117398202, 0.8496033844526705, 0.7258031442241968, 0.16698564593301435, 0.07514542570068747, 0.07514542570068747, 0.006200206291186893, 0.045581292794685764], 'Decision Tree', None, OrderedDict([(u'A2', [5, 1, 1, 1, 1, 1]), (u'A3', [5, 2, 2, 2, 2, 2]), (u'A7', [5, 3, 3, 3, 3, 3]), (u'A10', [5, 4, 4, 4, 4, 4]), (u'A13', [5, 5, 5, 5, 5, 5]), (u'A14', [5, 6, 6, 6, 6, 6]), (u'A1_a', [5, 7, 7, 7, 7, 7]), (u'A1_b', [5, 8, 8, 8, 8, 8]), (u'A4_g', [5, 9, 9, 9, 9, 9]), (u'A4_gg', [5, 10, 10, 10, 10, 10]), (u'A4_p', [5, 11, 11, 11, 11, 11]), (u'A5_aa', [5, 12, 12, 12, 12, 12]), (u'A5_c', [5, 13, 13, 13, 13, 13]), (u'A5_cc', [5, 14, 14, 14, 14, 14]), (u'A5_d', [5, 15, 15, 15, 15, 15]), (u'A5_e', [5, 16, 16, 16, 16, 16]), (u'A5_ff', [5, 17, 17, 17, 17, 17]), (u'A5_i', [5, 18, 18, 18, 18, 18]), (u'A5_j', [5, 19, 19, 19, 19, 19]), (u'A5_k', [5, 20, 20, 20, 20, 20]), (u'A5_m', [5, 21, 21, 21, 21, 21]), (u'A5_q', [5, 22, 22, 22, 22, 22]), (u'A5_r', [5, 23, 23, 23, 23, 23]), (u'A5_w', [5, 24, 24, 24, 24, 24]), (u'A5_x', [5, 25, 25, 25, 25, 25]), (u'A6_bb', [5, 26, 26, 26, 26, 26]), (u'A6_dd', [5, 27, 27, 27, 27, 27]), (u'A6_ff', [5, 28, 28, 28, 28, 28]), (u'A6_h', [5, 29, 29, 29, 29, 29]), (u'A6_j', [5, 30, 30, 30, 30, 30]), (u'A6_o', [5, 31, 31, 31, 31, 31]), (u'A6_v', [5, 32, 32, 32, 32, 32]), (u'A6_z', [5, 33, 33, 33, 33, 33]), (u'A12_g', [5, 34, 34, 34, 34, 34]), (u'A12_p', [5, 35, 35, 35, 35, 35]), (u'A12_s', [5, 36, 36, 36, 36, 36]), (u'A8', [5, 37, 37, 37, 37, 37]), (u'A9', [5, 38, 38, 38, 38, 38]), (u'A11', [5, 39, 39, 39, 39, 39])]), None), ([0.72541935451790374, 0.67741587730392927, 0.8644701328341284, 0.9249074563722898, 0.8040328092959672, 0.19596719070403285, 0.0750925436277102, 0.7295081967213115, 0.777922077922078, 0.07060833902939165, 0.058751983077736644, 0.058751983077736644, 0.13123458060917167, 0.02562211228400611], 'Extreme Learning Machine', None, OrderedDict([(u'A2', [5, 1, 1, 1, 1, 1]), (u'A3', [5, 2, 2, 2, 2, 2]), (u'A7', [5, 3, 3, 3, 3, 3]), (u'A10', [5, 4, 4, 4, 4, 4]), (u'A13', [5, 5, 5, 5, 5, 5]), (u'A14', [5, 6, 6, 6, 6, 6]), (u'A1_a', [5, 7, 7, 7, 7, 7]), (u'A1_b', [5, 8, 8, 8, 8, 8]), (u'A4_g', [5, 9, 9, 9, 9, 9]), (u'A4_gg', [5, 10, 10, 10, 10, 10]), (u'A4_p', [5, 11, 11, 11, 11, 11]), (u'A5_aa', [5, 12, 12, 12, 12, 12]), (u'A5_c', [5, 13, 13, 13, 13, 13]), (u'A5_cc', [5, 14, 14, 14, 14, 14]), (u'A5_d', [5, 15, 15, 15, 15, 15]), (u'A5_e', [5, 16, 16, 16, 16, 16]), (u'A5_ff', [5, 17, 17, 17, 17, 17]), (u'A5_i', [5, 18, 18, 18, 18, 18]), (u'A5_j', [5, 19, 19, 19, 19, 19]), (u'A5_k', [5, 20, 20, 20, 20, 20]), (u'A5_m', [5, 21, 21, 21, 21, 21]), (u'A5_q', [5, 22, 22, 22, 22, 22]), (u'A5_r', [5, 23, 23, 23, 23, 23]), (u'A5_w', [5, 24, 24, 24, 24, 24]), (u'A5_x', [5, 25, 25, 25, 25, 25]), (u'A6_bb', [5, 26, 26, 26, 26, 26]), (u'A6_dd', [5, 27, 27, 27, 27, 27]), (u'A6_ff', [5, 28, 28, 28, 28, 28]), (u'A6_h', [5, 29, 29, 29, 29, 29]), (u'A6_j', [5, 30, 30, 30, 30, 30]), (u'A6_o', [5, 31, 31, 31, 31, 31]), (u'A6_v', [5, 32, 32, 32, 32, 32]), (u'A6_z', [5, 33, 33, 33, 33, 33]), (u'A12_g', [5, 34, 34, 34, 34, 34]), (u'A12_p', [5, 35, 35, 35, 35, 35]), (u'A12_s', [5, 36, 36, 36, 36, 36]), (u'A8', [5, 37, 37, 37, 37, 37]), (u'A9', [5, 38, 38, 38, 38, 38]), (u'A11', [5, 39, 39, 39, 39, 39])]), None), ([0.68887471707606962, 0.83556964493090147, 0.8454967643617481, 0.9184029613960869, 0.7725905673274095, 0.22740943267259056, 0.08159703860391328, 0.9151771549444738, 0.7725905673274095, 0.22740943267259056, 0.08159703860391328, 0.08159703860391328, 0.005605240049710414, 0.025203931982984443], 'Gaussian Naive Bayes', None, OrderedDict([(u'A2', [5, 1, 1, 1, 1, 1]), (u'A3', [5, 2, 2, 2, 2, 2]), (u'A7', [5, 3, 3, 3, 3, 3]), (u'A10', [5, 4, 4, 4, 4, 4]), (u'A13', [5, 5, 5, 5, 5, 5]), (u'A14', [5, 6, 6, 6, 6, 6]), (u'A1_a', [5, 7, 7, 7, 7, 7]), (u'A1_b', [5, 8, 8, 8, 8, 8]), (u'A4_g', [5, 9, 9, 9, 9, 9]), (u'A4_gg', [5, 10, 10, 10, 10, 10]), (u'A4_p', [5, 11, 11, 11, 11, 11]), (u'A5_aa', [5, 12, 12, 12, 12, 12]), (u'A5_c', [5, 13, 13, 13, 13, 13]), (u'A5_cc', [5, 14, 14, 14, 14, 14]), (u'A5_d', [5, 15, 15, 15, 15, 15]), (u'A5_e', [5, 16, 16, 16, 16, 16]), (u'A5_ff', [5, 17, 17, 17, 17, 17]), (u'A5_i', [5, 18, 18, 18, 18, 18]), (u'A5_j', [5, 19, 19, 19, 19, 19]), (u'A5_k', [5, 20, 20, 20, 20, 20]), (u'A5_m', [5, 21, 21, 21, 21, 21]), (u'A5_q', [5, 22, 22, 22, 22, 22]), (u'A5_r', [5, 23, 23, 23, 23, 23]), (u'A5_w', [5, 24, 24, 24, 24, 24]), (u'A5_x', [5, 25, 25, 25, 25, 25]), (u'A6_bb', [5, 26, 26, 26, 26, 26]), (u'A6_dd', [5, 27, 27, 27, 27, 27]), (u'A6_ff', [5, 28, 28, 28, 28, 28]), (u'A6_h', [5, 29, 29, 29, 29, 29]), (u'A6_j', [5, 30, 30, 30, 30, 30]), (u'A6_o', [5, 31, 31, 31, 31, 31]), (u'A6_v', [5, 32, 32, 32, 32, 32]), (u'A6_z', [5, 33, 33, 33, 33, 33]), (u'A12_g', [5, 34, 34, 34, 34, 34]), (u'A12_p', [5, 35, 35, 35, 35, 35]), (u'A12_s', [5, 36, 36, 36, 36, 36]), (u'A8', [5, 37, 37, 37, 37, 37]), (u'A9', [5, 38, 38, 38, 38, 38]), (u'A11', [5, 39, 39, 39, 39, 39])]), None), ([0.71600446655005712, 0.56335598347234583, 0.8518953596432791, 0.7848228450555261, 0.9189678742310321, 0.08103212576896787, 0.21517715494447381, 0.5437334743521947, 0.7362611073137388, 0.020950102529049896, 0.07170809095716552, 0.07170809095716552, 0.005069740246371968, 0.048832189767667414], 'K-nearest neighbours', None, OrderedDict([(u'A2', [5, 1, 1, 1, 1, 1]), (u'A3', [5, 2, 2, 2, 2, 2]), (u'A7', [5, 3, 3, 3, 3, 3]), (u'A10', [5, 4, 4, 4, 4, 4]), (u'A13', [5, 5, 5, 5, 5, 5]), (u'A14', [5, 6, 6, 6, 6, 6]), (u'A1_a', [5, 7, 7, 7, 7, 7]), (u'A1_b', [5, 8, 8, 8, 8, 8]), (u'A4_g', [5, 9, 9, 9, 9, 9]), (u'A4_gg', [5, 10, 10, 10, 10, 10]), (u'A4_p', [5, 11, 11, 11, 11, 11]), (u'A5_aa', [5, 12, 12, 12, 12, 12]), (u'A5_c', [5, 13, 13, 13, 13, 13]), (u'A5_cc', [5, 14, 14, 14, 14, 14]), (u'A5_d', [5, 15, 15, 15, 15, 15]), (u'A5_e', [5, 16, 16, 16, 16, 16]), (u'A5_ff', [5, 17, 17, 17, 17, 17]), (u'A5_i', [5, 18, 18, 18, 18, 18]), (u'A5_j', [5, 19, 19, 19, 19, 19]), (u'A5_k', [5, 20, 20, 20, 20, 20]), (u'A5_m', [5, 21, 21, 21, 21, 21]), (u'A5_q', [5, 22, 22, 22, 22, 22]), (u'A5_r', [5, 23, 23, 23, 23, 23]), (u'A5_w', [5, 24, 24, 24, 24, 24]), (u'A5_x', [5, 25, 25, 25, 25, 25]), (u'A6_bb', [5, 26, 26, 26, 26, 26]), (u'A6_dd', [5, 27, 27, 27, 27, 27]), (u'A6_ff', [5, 28, 28, 28, 28, 28]), (u'A6_h', [5, 29, 29, 29, 29, 29]), (u'A6_j', [5, 30, 30, 30, 30, 30]), (u'A6_o', [5, 31, 31, 31, 31, 31]), (u'A6_v', [5, 32, 32, 32, 32, 32]), (u'A6_z', [5, 33, 33, 33, 33, 33]), (u'A12_g', [5, 34, 34, 34, 34, 34]), (u'A12_p', [5, 35, 35, 35, 35, 35]), (u'A12_s', [5, 36, 36, 36, 36, 36]), (u'A8', [5, 37, 37, 37, 37, 37]), (u'A9', [5, 38, 38, 38, 38, 38]), (u'A11', [5, 39, 39, 39, 39, 39])]), None), ([0.72697485273384965, 0.72714192667793365, 0.8655368018382574, 0.8957694341618192, 0.8353041695146958, 0.16469583048530417, 0.10423056583818084, 0.7816499206768905, 0.7675324675324676, 0.09155844155844156, 0.06853516657852987, 0.06853516657852987, 0.027407387059801103, 0.034212163227380146], 'Logistic regression', None, OrderedDict([(u'A2', [5, 1, 1, 1, 1, 1]), (u'A3', [5, 2, 2, 2, 2, 2]), (u'A7', [5, 3, 3, 3, 3, 3]), (u'A10', [5, 4, 4, 4, 4, 4]), (u'A13', [5, 5, 5, 5, 5, 5]), (u'A14', [5, 6, 6, 6, 6, 6]), (u'A1_a', [5, 7, 7, 7, 7, 7]), (u'A1_b', [5, 8, 8, 8, 8, 8]), (u'A4_g', [5, 9, 9, 9, 9, 9]), (u'A4_gg', [5, 10, 10, 10, 10, 10]), (u'A4_p', [5, 11, 11, 11, 11, 11]), (u'A5_aa', [5, 12, 12, 12, 12, 12]), (u'A5_c', [5, 13, 13, 13, 13, 13]), (u'A5_cc', [5, 14, 14, 14, 14, 14]), (u'A5_d', [5, 15, 15, 15, 15, 15]), (u'A5_e', [5, 16, 16, 16, 16, 16]), (u'A5_ff', [5, 17, 17, 17, 17, 17]), (u'A5_i', [5, 18, 18, 18, 18, 18]), (u'A5_j', [5, 19, 19, 19, 19, 19]), (u'A5_k', [5, 20, 20, 20, 20, 20]), (u'A5_m', [5, 21, 21, 21, 21, 21]), (u'A5_q', [5, 22, 22, 22, 22, 22]), (u'A5_r', [5, 23, 23, 23, 23, 23]), (u'A5_w', [5, 24, 24, 24, 24, 24]), (u'A5_x', [5, 25, 25, 25, 25, 25]), (u'A6_bb', [5, 26, 26, 26, 26, 26]), (u'A6_dd', [5, 27, 27, 27, 27, 27]), (u'A6_ff', [5, 28, 28, 28, 28, 28]), (u'A6_h', [5, 29, 29, 29, 29, 29]), (u'A6_j', [5, 30, 30, 30, 30, 30]), (u'A6_o', [5, 31, 31, 31, 31, 31]), (u'A6_v', [5, 32, 32, 32, 32, 32]), (u'A6_z', [5, 33, 33, 33, 33, 33]), (u'A12_g', [5, 34, 34, 34, 34, 34]), (u'A12_p', [5, 35, 35, 35, 35, 35]), (u'A12_s', [5, 36, 36, 36, 36, 36]), (u'A8', [5, 37, 37, 37, 37, 37]), (u'A9', [5, 38, 38, 38, 38, 38]), (u'A11', [5, 39, 39, 39, 39, 39])]), None), ([0.71832183771187519, 0.5770311963691197, 0.859066076565868, 0.8436277102062402, 0.8745044429254956, 0.12549555707450444, 0.15637228979375992, 0.6415653093601269, 0.7491797676008203, 0.034005468215994525, 0.06197778952934955, 0.06197778952934955, 2.561467015898669, 0.03658591106365353], 'Random forest', None, OrderedDict([(u'A2', [5, 1, 1, 1, 1, 1]), (u'A3', [5, 2, 2, 2, 2, 2]), (u'A7', [5, 3, 3, 3, 3, 3]), (u'A10', [5, 4, 4, 4, 4, 4]), (u'A13', [5, 5, 5, 5, 5, 5]), (u'A14', [5, 6, 6, 6, 6, 6]), (u'A1_a', [5, 7, 7, 7, 7, 7]), (u'A1_b', [5, 8, 8, 8, 8, 8]), (u'A4_g', [5, 9, 9, 9, 9, 9]), (u'A4_gg', [5, 10, 10, 10, 10, 10]), (u'A4_p', [5, 11, 11, 11, 11, 11]), (u'A5_aa', [5, 12, 12, 12, 12, 12]), (u'A5_c', [5, 13, 13, 13, 13, 13]), (u'A5_cc', [5, 14, 14, 14, 14, 14]), (u'A5_d', [5, 15, 15, 15, 15, 15]), (u'A5_e', [5, 16, 16, 16, 16, 16]), (u'A5_ff', [5, 17, 17, 17, 17, 17]), (u'A5_i', [5, 18, 18, 18, 18, 18]), (u'A5_j', [5, 19, 19, 19, 19, 19]), (u'A5_k', [5, 20, 20, 20, 20, 20]), (u'A5_m', [5, 21, 21, 21, 21, 21]), (u'A5_q', [5, 22, 22, 22, 22, 22]), (u'A5_r', [5, 23, 23, 23, 23, 23]), (u'A5_w', [5, 24, 24, 24, 24, 24]), (u'A5_x', [5, 25, 25, 25, 25, 25]), (u'A6_bb', [5, 26, 26, 26, 26, 26]), (u'A6_dd', [5, 27, 27, 27, 27, 27]), (u'A6_ff', [5, 28, 28, 28, 28, 28]), (u'A6_h', [5, 29, 29, 29, 29, 29]), (u'A6_j', [5, 30, 30, 30, 30, 30]), (u'A6_o', [5, 31, 31, 31, 31, 31]), (u'A6_v', [5, 32, 32, 32, 32, 32]), (u'A6_z', [5, 33, 33, 33, 33, 33]), (u'A12_g', [5, 34, 34, 34, 34, 34]), (u'A12_p', [5, 35, 35, 35, 35, 35]), (u'A12_s', [5, 36, 36, 36, 36, 36]), (u'A8', [5, 37, 37, 37, 37, 37]), (u'A9', [5, 38, 38, 38, 38, 38]), (u'A11', [5, 39, 39, 39, 39, 39])]), None), ([0.73198999785101548, 0.68879623091823228, 0.8680829579838736, 0.9086197778952936, 0.8275461380724538, 0.17245386192754614, 0.09138022210470649, 0.8370174510840824, 0.7962064251537936, 0.11233766233766233, 0.07837123215230038, 0.07837123215230038, 0.5556610388877301, 0.02899021163434182], 'SVM (RDF)', None, OrderedDict([(u'A2', [5, 1, 1, 1, 1, 1]), (u'A3', [5, 2, 2, 2, 2, 2]), (u'A7', [5, 3, 3, 3, 3, 3]), (u'A10', [5, 4, 4, 4, 4, 4]), (u'A13', [5, 5, 5, 5, 5, 5]), (u'A14', [5, 6, 6, 6, 6, 6]), (u'A1_a', [5, 7, 7, 7, 7, 7]), (u'A1_b', [5, 8, 8, 8, 8, 8]), (u'A4_g', [5, 9, 9, 9, 9, 9]), (u'A4_gg', [5, 10, 10, 10, 10, 10]), (u'A4_p', [5, 11, 11, 11, 11, 11]), (u'A5_aa', [5, 12, 12, 12, 12, 12]), (u'A5_c', [5, 13, 13, 13, 13, 13]), (u'A5_cc', [5, 14, 14, 14, 14, 14]), (u'A5_d', [5, 15, 15, 15, 15, 15]), (u'A5_e', [5, 16, 16, 16, 16, 16]), (u'A5_ff', [5, 17, 17, 17, 17, 17]), (u'A5_i', [5, 18, 18, 18, 18, 18]), (u'A5_j', [5, 19, 19, 19, 19, 19]), (u'A5_k', [5, 20, 20, 20, 20, 20]), (u'A5_m', [5, 21, 21, 21, 21, 21]), (u'A5_q', [5, 22, 22, 22, 22, 22]), (u'A5_r', [5, 23, 23, 23, 23, 23]), (u'A5_w', [5, 24, 24, 24, 24, 24]), (u'A5_x', [5, 25, 25, 25, 25, 25]), (u'A6_bb', [5, 26, 26, 26, 26, 26]), (u'A6_dd', [5, 27, 27, 27, 27, 27]), (u'A6_ff', [5, 28, 28, 28, 28, 28]), (u'A6_h', [5, 29, 29, 29, 29, 29]), (u'A6_j', [5, 30, 30, 30, 30, 30]), (u'A6_o', [5, 31, 31, 31, 31, 31]), (u'A6_v', [5, 32, 32, 32, 32, 32]), (u'A6_z', [5, 33, 33, 33, 33, 33]), (u'A12_g', [5, 34, 34, 34, 34, 34]), (u'A12_p', [5, 35, 35, 35, 35, 35]), (u'A12_s', [5, 36, 36, 36, 36, 36]), (u'A8', [5, 37, 37, 37, 37, 37]), (u'A9', [5, 38, 38, 38, 38, 38]), (u'A11', [5, 39, 39, 39, 39, 39])]), None), ([0.72303051398904727, 0.66214682303384453, 0.8628340417410527, 0.934690639873083, 0.7909774436090226, 0.20902255639097742, 0.06530936012691699, 0.934690639873083, 0.7909774436090226, 0.20902255639097742, 0.062030671602326816, 0.062030671602326816, 0.6180512938780061, 0.02078881217011743], 'SVM (linear)', None, OrderedDict([(u'A2', [5, 1, 1, 1, 1, 1]), (u'A3', [5, 2, 2, 2, 2, 2]), (u'A7', [5, 3, 3, 3, 3, 3]), (u'A10', [5, 4, 4, 4, 4, 4]), (u'A13', [5, 5, 5, 5, 5, 5]), (u'A14', [5, 6, 6, 6, 6, 6]), (u'A1_a', [5, 7, 7, 7, 7, 7]), (u'A1_b', [5, 8, 8, 8, 8, 8]), (u'A4_g', [5, 9, 9, 9, 9, 9]), (u'A4_gg', [5, 10, 10, 10, 10, 10]), (u'A4_p', [5, 11, 11, 11, 11, 11]), (u'A5_aa', [5, 12, 12, 12, 12, 12]), (u'A5_c', [5, 13, 13, 13, 13, 13]), (u'A5_cc', [5, 14, 14, 14, 14, 14]), (u'A5_d', [5, 15, 15, 15, 15, 15]), (u'A5_e', [5, 16, 16, 16, 16, 16]), (u'A5_ff', [5, 17, 17, 17, 17, 17]), (u'A5_i', [5, 18, 18, 18, 18, 18]), (u'A5_j', [5, 19, 19, 19, 19, 19]), (u'A5_k', [5, 20, 20, 20, 20, 20]), (u'A5_m', [5, 21, 21, 21, 21, 21]), (u'A5_q', [5, 22, 22, 22, 22, 22]), (u'A5_r', [5, 23, 23, 23, 23, 23]), (u'A5_w', [5, 24, 24, 24, 24, 24]), (u'A5_x', [5, 25, 25, 25, 25, 25]), (u'A6_bb', [5, 26, 26, 26, 26, 26]), (u'A6_dd', [5, 27, 27, 27, 27, 27]), (u'A6_ff', [5, 28, 28, 28, 28, 28]), (u'A6_h', [5, 29, 29, 29, 29, 29]), (u'A6_j', [5, 30, 30, 30, 30, 30]), (u'A6_o', [5, 31, 31, 31, 31, 31]), (u'A6_v', [5, 32, 32, 32, 32, 32]), (u'A6_z', [5, 33, 33, 33, 33, 33]), (u'A12_g', [5, 34, 34, 34, 34, 34]), (u'A12_p', [5, 35, 35, 35, 35, 35]), (u'A12_s', [5, 36, 36, 36, 36, 36]), (u'A8', [5, 37, 37, 37, 37, 37]), (u'A9', [5, 38, 38, 38, 38, 38]), (u'A11', [5, 39, 39, 39, 39, 39])]), None), ([0.58695222337233877, 0.70166664943113333, 0.7741336629637168, 0.6187731359069275, 0.9294941900205057, 0.0705058099794942, 0.38122686409307244, 0.8435219460602854, 0.7022898154477101, 0.1411483253588517, 0.06853516657852987, 0.06853516657852987, 0.36768792979217185, 0.027386600446196847], 'SVM (polynomial)', None, OrderedDict([(u'A2', [5, 1, 1, 1, 1, 1]), (u'A3', [5, 2, 2, 2, 2, 2]), (u'A7', [5, 3, 3, 3, 3, 3]), (u'A10', [5, 4, 4, 4, 4, 4]), (u'A13', [5, 5, 5, 5, 5, 5]), (u'A14', [5, 6, 6, 6, 6, 6]), (u'A1_a', [5, 7, 7, 7, 7, 7]), (u'A1_b', [5, 8, 8, 8, 8, 8]), (u'A4_g', [5, 9, 9, 9, 9, 9]), (u'A4_gg', [5, 10, 10, 10, 10, 10]), (u'A4_p', [5, 11, 11, 11, 11, 11]), (u'A5_aa', [5, 12, 12, 12, 12, 12]), (u'A5_c', [5, 13, 13, 13, 13, 13]), (u'A5_cc', [5, 14, 14, 14, 14, 14]), (u'A5_d', [5, 15, 15, 15, 15, 15]), (u'A5_e', [5, 16, 16, 16, 16, 16]), (u'A5_ff', [5, 17, 17, 17, 17, 17]), (u'A5_i', [5, 18, 18, 18, 18, 18]), (u'A5_j', [5, 19, 19, 19, 19, 19]), (u'A5_k', [5, 20, 20, 20, 20, 20]), (u'A5_m', [5, 21, 21, 21, 21, 21]), (u'A5_q', [5, 22, 22, 22, 22, 22]), (u'A5_r', [5, 23, 23, 23, 23, 23]), (u'A5_w', [5, 24, 24, 24, 24, 24]), (u'A5_x', [5, 25, 25, 25, 25, 25]), (u'A6_bb', [5, 26, 26, 26, 26, 26]), (u'A6_dd', [5, 27, 27, 27, 27, 27]), (u'A6_ff', [5, 28, 28, 28, 28, 28]), (u'A6_h', [5, 29, 29, 29, 29, 29]), (u'A6_j', [5, 30, 30, 30, 30, 30]), (u'A6_o', [5, 31, 31, 31, 31, 31]), (u'A6_v', [5, 32, 32, 32, 32, 32]), (u'A6_z', [5, 33, 33, 33, 33, 33]), (u'A12_g', [5, 34, 34, 34, 34, 34]), (u'A12_p', [5, 35, 35, 35, 35, 35]), (u'A12_s', [5, 36, 36, 36, 36, 36]), (u'A8', [5, 37, 37, 37, 37, 37]), (u'A9', [5, 38, 38, 38, 38, 38]), (u'A11', [5, 39, 39, 39, 39, 39])]), None)], None), ('Logistic regression', [([0.71541589731831379, 0.34587595034617091, 0.859284680500829, 0.9249603384452671, 0.793609022556391, 0.206390977443609, 0.07503966155473293, 0.003278688524590164, 0.0, 0.0, 0.0, 0.0, 0.14581744165723606, 0.021318635413860223], 'AdaBoost', 'Logistic regression', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A6_z', [5, 2, 3, 4, 3, 12]), (u'A6_j', [5, 3, 9, 7, 6, 13]), (u'A5_x', [5, 4, 4, 6, 4, 3]), (u'A12_p', [5, 5, 6, 10, 7, 5]), (u'A5_ff', [5, 6, 5, 3, 9, 6]), (u'A4_gg', [4, 7, 10, 8, 4]), (u'A5_cc', [5, 8, 15, 13, 12, 10]), (u'A5_j', [5, 9, 7, 5, 5, 11]), (u'A6_o', [4, 10, 8, 8, 7]), (u'A12_g', [4, 11, 12, 11, 10]), (u'A4_p', [5, 12, 11, 9, 14, 8]), (u'A5_e', [4, 13, 13, 12, 11]), (u'A14', [5, 14, 2, 2, 2, 2]), (u'A12_s', [5, 15, 14, 14, 13, 9]), (u'A9', [1, 15]), (u'A5_i', [1, 15]), (u'A10', [1, 14]), (u'A4_g', [1, 15])]), None), ([0.71217102169629398, 0.65523331492473347, 0.8579127557849482, 0.9117927022739292, 0.8040328092959672, 0.19596719070403285, 0.08820729772607086, 0.7323638286620835, 0.7883116883116884, 0.08629528366370472, 0.07181385510312004, 0.07181385510312004, 5.617957717249462, 0.030899656788170332], 'Artificial neural network', 'Logistic regression', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A6_z', [5, 2, 3, 4, 3, 12]), (u'A6_j', [5, 3, 9, 7, 6, 13]), (u'A5_x', [5, 4, 4, 6, 4, 3]), (u'A12_p', [5, 5, 6, 10, 7, 5]), (u'A5_ff', [5, 6, 5, 3, 9, 6]), (u'A4_gg', [4, 7, 10, 8, 4]), (u'A5_cc', [5, 8, 15, 13, 12, 10]), (u'A5_j', [5, 9, 7, 5, 5, 11]), (u'A6_o', [4, 10, 8, 8, 7]), (u'A12_g', [4, 11, 12, 11, 10]), (u'A4_p', [5, 12, 11, 9, 14, 8]), (u'A5_e', [4, 13, 13, 12, 11]), (u'A14', [5, 14, 2, 2, 2, 2]), (u'A12_s', [5, 15, 14, 14, 13, 9]), (u'A9', [1, 15]), (u'A5_i', [1, 15]), (u'A10', [1, 14]), (u'A4_g', [1, 15])]), None), ([0.69636373117584127, 0.67942863798773145, 0.8501669237272788, 0.8857747223691168, 0.8145591250854409, 0.18544087491455916, 0.11422527763088312, 0.7977260708619778, 0.7622693096377307, 0.10977443609022557, 0.07514542570068747, 0.07514542570068747, 0.07586498764033855, 0.02691230887980083], 'Bernoulli Naive Bayes', 'Logistic regression', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A6_z', [5, 2, 3, 4, 3, 12]), (u'A6_j', [5, 3, 9, 7, 6, 13]), (u'A5_x', [5, 4, 4, 6, 4, 3]), (u'A12_p', [5, 5, 6, 10, 7, 5]), (u'A5_ff', [5, 6, 5, 3, 9, 6]), (u'A4_gg', [4, 7, 10, 8, 4]), (u'A5_cc', [5, 8, 15, 13, 12, 10]), (u'A5_j', [5, 9, 7, 5, 5, 11]), (u'A6_o', [4, 10, 8, 8, 7]), (u'A12_g', [4, 11, 12, 11, 10]), (u'A4_p', [5, 12, 11, 9, 14, 8]), (u'A5_e', [4, 13, 13, 12, 11]), (u'A14', [5, 14, 2, 2, 2, 2]), (u'A12_s', [5, 15, 14, 14, 13, 9]), (u'A9', [1, 15]), (u'A5_i', [1, 15]), (u'A10', [1, 14]), (u'A4_g', [1, 15])]), None), ([0.46196422142035592, 0.52893980281026143, 0.7279591279048541, 0.843204653622422, 0.6127136021872863, 0.3872863978127136, 0.15679534637757803, 0.4747223691168694, 0.3619617224880383, 0.0913533834586466, 0.05531464833421471, 0.05531464833421471, 0.004757918771260215, 0.097254320512221], 'Decision Tree', 'Logistic regression', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A6_z', [5, 2, 3, 4, 3, 12]), (u'A6_j', [5, 3, 9, 7, 6, 13]), (u'A5_x', [5, 4, 4, 6, 4, 3]), (u'A12_p', [5, 5, 6, 10, 7, 5]), (u'A5_ff', [5, 6, 5, 3, 9, 6]), (u'A4_gg', [4, 7, 10, 8, 4]), (u'A5_cc', [5, 8, 15, 13, 12, 10]), (u'A5_j', [5, 9, 7, 5, 5, 11]), (u'A6_o', [4, 10, 8, 8, 7]), (u'A12_g', [4, 11, 12, 11, 10]), (u'A4_p', [5, 12, 11, 9, 14, 8]), (u'A5_e', [4, 13, 13, 12, 11]), (u'A14', [5, 14, 2, 2, 2, 2]), (u'A12_s', [5, 15, 14, 14, 13, 9]), (u'A9', [1, 15]), (u'A5_i', [1, 15]), (u'A10', [1, 14]), (u'A4_g', [1, 15])]), None), ([0.72549931292830905, 0.66647818045879048, 0.8641327430397542, 0.934690639873083, 0.7935748462064252, 0.2064251537935749, 0.06530936012691699, 0.7749338974087785, 0.7883458646616541, 0.11510594668489404, 0.058751983077736644, 0.058751983077736644, 0.044577490957026324, 0.019716679165182674], 'Extreme Learning Machine', 'Logistic regression', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A6_z', [5, 2, 3, 4, 3, 12]), (u'A6_j', [5, 3, 9, 7, 6, 13]), (u'A5_x', [5, 4, 4, 6, 4, 3]), (u'A12_p', [5, 5, 6, 10, 7, 5]), (u'A5_ff', [5, 6, 5, 3, 9, 6]), (u'A4_gg', [4, 7, 10, 8, 4]), (u'A5_cc', [5, 8, 15, 13, 12, 10]), (u'A5_j', [5, 9, 7, 5, 5, 11]), (u'A6_o', [4, 10, 8, 8, 7]), (u'A12_g', [4, 11, 12, 11, 10]), (u'A4_p', [5, 12, 11, 9, 14, 8]), (u'A5_e', [4, 13, 13, 12, 11]), (u'A14', [5, 14, 2, 2, 2, 2]), (u'A12_s', [5, 15, 14, 14, 13, 9]), (u'A9', [1, 15]), (u'A5_i', [1, 15]), (u'A10', [1, 14]), (u'A4_g', [1, 15])]), None), ([0.6849175758665913, 0.83447148735583832, 0.843162299166502, 0.9216287678476996, 0.7646958304853041, 0.23530416951469585, 0.07837123215230037, 0.9216287678476996, 0.7646958304853041, 0.23530416951469585, 0.0750925436277102, 0.0750925436277102, 0.004895265113153968, 0.027159667305111605], 'Gaussian Naive Bayes', 'Logistic regression', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A6_z', [5, 2, 3, 4, 3, 12]), (u'A6_j', [5, 3, 9, 7, 6, 13]), (u'A5_x', [5, 4, 4, 6, 4, 3]), (u'A12_p', [5, 5, 6, 10, 7, 5]), (u'A5_ff', [5, 6, 5, 3, 9, 6]), (u'A4_gg', [4, 7, 10, 8, 4]), (u'A5_cc', [5, 8, 15, 13, 12, 10]), (u'A5_j', [5, 9, 7, 5, 5, 11]), (u'A6_o', [4, 10, 8, 8, 7]), (u'A12_g', [4, 11, 12, 11, 10]), (u'A4_p', [5, 12, 11, 9, 14, 8]), (u'A5_e', [4, 13, 13, 12, 11]), (u'A14', [5, 14, 2, 2, 2, 2]), (u'A12_s', [5, 15, 14, 14, 13, 9]), (u'A9', [1, 15]), (u'A5_i', [1, 15]), (u'A10', [1, 14]), (u'A4_g', [1, 15])]), None), ([0.69965257536825121, 0.80233400389607812, 0.8511099180815844, 0.9217345319936541, 0.7804853041695148, 0.2195146958304853, 0.07826546800634585, 0.8955579058699101, 0.7673957621326043, 0.19333561175666442, 0.06520359598096245, 0.06520359598096245, 0.003935953740545228, 0.017839889421372], 'K-nearest neighbours', 'Logistic regression', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A6_z', [5, 2, 3, 4, 3, 12]), (u'A6_j', [5, 3, 9, 7, 6, 13]), (u'A5_x', [5, 4, 4, 6, 4, 3]), (u'A12_p', [5, 5, 6, 10, 7, 5]), (u'A5_ff', [5, 6, 5, 3, 9, 6]), (u'A4_gg', [4, 7, 10, 8, 4]), (u'A5_cc', [5, 8, 15, 13, 12, 10]), (u'A5_j', [5, 9, 7, 5, 5, 11]), (u'A6_o', [4, 10, 8, 8, 7]), (u'A12_g', [4, 11, 12, 11, 10]), (u'A4_p', [5, 12, 11, 9, 14, 8]), (u'A5_e', [4, 13, 13, 12, 11]), (u'A14', [5, 14, 2, 2, 2, 2]), (u'A12_s', [5, 15, 14, 14, 13, 9]), (u'A9', [1, 15]), (u'A5_i', [1, 15]), (u'A10', [1, 14]), (u'A4_g', [1, 15])]), None), ([0.7012733801980231, 0.70154116206056605, 0.8523960133495606, 0.9086197778952935, 0.7961722488038279, 0.20382775119617222, 0.0913802221047065, 0.7715494447382337, 0.7778879015721121, 0.09675324675324676, 0.06530936012691697, 0.06530936012691697, 0.008426424470228119, 0.02779141998447157], 'Logistic regression', 'Logistic regression', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A6_z', [5, 2, 3, 4, 3, 12]), (u'A6_j', [5, 3, 9, 7, 6, 13]), (u'A5_x', [5, 4, 4, 6, 4, 3]), (u'A12_p', [5, 5, 6, 10, 7, 5]), (u'A5_ff', [5, 6, 5, 3, 9, 6]), (u'A4_gg', [4, 7, 10, 8, 4]), (u'A5_cc', [5, 8, 15, 13, 12, 10]), (u'A5_j', [5, 9, 7, 5, 5, 11]), (u'A6_o', [4, 10, 8, 8, 7]), (u'A12_g', [4, 11, 12, 11, 10]), (u'A4_p', [5, 12, 11, 9, 14, 8]), (u'A5_e', [4, 13, 13, 12, 11]), (u'A14', [5, 14, 2, 2, 2, 2]), (u'A12_s', [5, 15, 14, 14, 13, 9]), (u'A9', [1, 15]), (u'A5_i', [1, 15]), (u'A10', [1, 14]), (u'A4_g', [1, 15])]), None), ([0.71004443151153773, 0.58099890930616116, 0.8570088084978564, 0.8890005288207299, 0.825017088174983, 0.1749829118250171, 0.11099947117927023, 0.6191433104177684, 0.7700273410799727, 0.03920027341079972, 0.05547329455314648, 0.05547329455314648, 2.4167528728779617, 0.021009233833393], 'Random forest', 'Logistic regression', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A6_z', [5, 2, 3, 4, 3, 12]), (u'A6_j', [5, 3, 9, 7, 6, 13]), (u'A5_x', [5, 4, 4, 6, 4, 3]), (u'A12_p', [5, 5, 6, 10, 7, 5]), (u'A5_ff', [5, 6, 5, 3, 9, 6]), (u'A4_gg', [4, 7, 10, 8, 4]), (u'A5_cc', [5, 8, 15, 13, 12, 10]), (u'A5_j', [5, 9, 7, 5, 5, 11]), (u'A6_o', [4, 10, 8, 8, 7]), (u'A12_g', [4, 11, 12, 11, 10]), (u'A4_p', [5, 12, 11, 9, 14, 8]), (u'A5_e', [4, 13, 13, 12, 11]), (u'A14', [5, 14, 2, 2, 2, 2]), (u'A12_s', [5, 15, 14, 14, 13, 9]), (u'A9', [1, 15]), (u'A5_i', [1, 15]), (u'A10', [1, 14]), (u'A4_g', [1, 15])]), None), ([0.72980199463215933, 0.63120641662266974, 0.8661127302656428, 0.9412480169222632, 0.7909774436090226, 0.20902255639097742, 0.058751983077736644, 0.9215758857747224, 0.7909774436090226, 0.20379357484620644, 0.058751983077736644, 0.058751983077736644, 0.3215646133036384, 0.018668307043899213], 'SVM (RDF)', 'Logistic regression', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A6_z', [5, 2, 3, 4, 3, 12]), (u'A6_j', [5, 3, 9, 7, 6, 13]), (u'A5_x', [5, 4, 4, 6, 4, 3]), (u'A12_p', [5, 5, 6, 10, 7, 5]), (u'A5_ff', [5, 6, 5, 3, 9, 6]), (u'A4_gg', [4, 7, 10, 8, 4]), (u'A5_cc', [5, 8, 15, 13, 12, 10]), (u'A5_j', [5, 9, 7, 5, 5, 11]), (u'A6_o', [4, 10, 8, 8, 7]), (u'A12_g', [4, 11, 12, 11, 10]), (u'A4_p', [5, 12, 11, 9, 14, 8]), (u'A5_e', [4, 13, 13, 12, 11]), (u'A14', [5, 14, 2, 2, 2, 2]), (u'A12_s', [5, 15, 14, 14, 13, 9]), (u'A9', [1, 15]), (u'A5_i', [1, 15]), (u'A10', [1, 14]), (u'A4_g', [1, 15])]), None), ([0.72549931292830905, 0.64732970885831898, 0.8641327430397542, 0.934690639873083, 0.7935748462064252, 0.2064251537935749, 0.06530936012691699, 0.9215758857747224, 0.7935748462064252, 0.20379357484620644, 0.06530936012691699, 0.06530936012691699, 0.1553341847800333, 0.019716679165182674], 'SVM (linear)', 'Logistic regression', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A6_z', [5, 2, 3, 4, 3, 12]), (u'A6_j', [5, 3, 9, 7, 6, 13]), (u'A5_x', [5, 4, 4, 6, 4, 3]), (u'A12_p', [5, 5, 6, 10, 7, 5]), (u'A5_ff', [5, 6, 5, 3, 9, 6]), (u'A4_gg', [4, 7, 10, 8, 4]), (u'A5_cc', [5, 8, 15, 13, 12, 10]), (u'A5_j', [5, 9, 7, 5, 5, 11]), (u'A6_o', [4, 10, 8, 8, 7]), (u'A12_g', [4, 11, 12, 11, 10]), (u'A4_p', [5, 12, 11, 9, 14, 8]), (u'A5_e', [4, 13, 13, 12, 11]), (u'A14', [5, 14, 2, 2, 2, 2]), (u'A12_s', [5, 15, 14, 14, 13, 9]), (u'A9', [1, 15]), (u'A5_i', [1, 15]), (u'A10', [1, 14]), (u'A4_g', [1, 15])]), None), ([0.71091615714669676, 0.78349596038429059, 0.8563303690937356, 0.85637228979376, 0.8562884483937114, 0.14371155160628843, 0.14362771020624007, 0.8957165520888418, 0.8118250170881749, 0.18034859876965142, 0.10105764145954521, 0.10105764145954521, 0.22983627410466, 0.03159104233536487], 'SVM (polynomial)', 'Logistic regression', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A6_z', [5, 2, 3, 4, 3, 12]), (u'A6_j', [5, 3, 9, 7, 6, 13]), (u'A5_x', [5, 4, 4, 6, 4, 3]), (u'A12_p', [5, 5, 6, 10, 7, 5]), (u'A5_ff', [5, 6, 5, 3, 9, 6]), (u'A4_gg', [4, 7, 10, 8, 4]), (u'A5_cc', [5, 8, 15, 13, 12, 10]), (u'A5_j', [5, 9, 7, 5, 5, 11]), (u'A6_o', [4, 10, 8, 8, 7]), (u'A12_g', [4, 11, 12, 11, 10]), (u'A4_p', [5, 12, 11, 9, 14, 8]), (u'A5_e', [4, 13, 13, 12, 11]), (u'A14', [5, 14, 2, 2, 2, 2]), (u'A12_s', [5, 15, 14, 14, 13, 9]), (u'A9', [1, 15]), (u'A5_i', [1, 15]), (u'A10', [1, 14]), (u'A4_g', [1, 15])]), None)], 'Logistic regression'), ('Decision Tree', [([0.68517416263337982, 0.39558965107649613, 0.8402228890817497, 0.7981491274457959, 0.8822966507177034, 0.11770334928229664, 0.20185087255420409, 0.19566367001586463, 0.3525290498974709, 0.005263157894736842, 0.02596509783183501, 0.02596509783183501, 0.3162038799285073, 0.02963903323539348], 'AdaBoost', 'Decision Tree', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A13', [5, 2, 2, 3, 2, 3]), (u'A3', [5, 3, 3, 2, 3, 7]), (u'A2', [5, 4, 5, 4, 5, 2]), (u'A10', [4, 5, 11, 8, 5]), (u'A7', [5, 6, 6, 6, 6, 6]), (u'A14', [5, 7, 4, 7, 4, 4]), (u'A6_v', [1, 8]), (u'A4_gg', [4, 9, 10, 10, 10]), (u'A5_q', [2, 10, 14]), (u'A5_i', [2, 11, 9]), (u'A5_k', [3, 12, 8, 12]), (u'A4_g', [1, 13]), (u'A5_x', [4, 14, 12, 15, 11]), (u'A6_h', [3, 15, 7, 8]), (u'A4_p', [4, 8, 12, 10, 11]), (u'A9', [3, 9, 5, 7]), (u'A6_bb', [2, 13, 14]), (u'A1_a', [2, 15, 9]), (u'A12_s', [1, 11]), (u'A5_w', [2, 13, 15]), (u'A5_c', [2, 14, 9]), (u'A11', [1, 12]), (u'A5_aa', [2, 13, 13]), (u'A1_b', [1, 14]), (u'A5_cc', [1, 15])]), None), ([0.71587763377065139, 0.67992364821298712, 0.8599578244683869, 0.8924378635642517, 0.827477785372522, 0.17252221462747777, 0.10756213643574827, 0.7099947117927023, 0.7909432672590567, 0.07580314422419686, 0.08154415653093601, 0.08154415653093601, 7.644141967216184, 0.0330410703065936], 'Artificial neural network', 'Decision Tree', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A13', [5, 2, 2, 3, 2, 3]), (u'A3', [5, 3, 3, 2, 3, 7]), (u'A2', [5, 4, 5, 4, 5, 2]), (u'A10', [4, 5, 11, 8, 5]), (u'A7', [5, 6, 6, 6, 6, 6]), (u'A14', [5, 7, 4, 7, 4, 4]), (u'A6_v', [1, 8]), (u'A4_gg', [4, 9, 10, 10, 10]), (u'A5_q', [2, 10, 14]), (u'A5_i', [2, 11, 9]), (u'A5_k', [3, 12, 8, 12]), (u'A4_g', [1, 13]), (u'A5_x', [4, 14, 12, 15, 11]), (u'A6_h', [3, 15, 7, 8]), (u'A4_p', [4, 8, 12, 10, 11]), (u'A9', [3, 9, 5, 7]), (u'A6_bb', [2, 13, 14]), (u'A1_a', [2, 15, 9]), (u'A12_s', [1, 11]), (u'A5_w', [2, 13, 15]), (u'A5_c', [2, 14, 9]), (u'A11', [1, 12]), (u'A5_aa', [2, 13, 13]), (u'A1_b', [1, 14]), (u'A5_cc', [1, 15])]), None), ([0.69612946600014503, 0.72858806143928312, 0.8489316682649367, 0.8469063987308303, 0.8509569377990431, 0.14904306220095692, 0.15309360126916977, 0.755579058699101, 0.7882775119617225, 0.08892686261107313, 0.08794288736118455, 0.08794288736118455, 0.12823831733525193, 0.023143258704996637], 'Bernoulli Naive Bayes', 'Decision Tree', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A13', [5, 2, 2, 3, 2, 3]), (u'A3', [5, 3, 3, 2, 3, 7]), (u'A2', [5, 4, 5, 4, 5, 2]), (u'A10', [4, 5, 11, 8, 5]), (u'A7', [5, 6, 6, 6, 6, 6]), (u'A14', [5, 7, 4, 7, 4, 4]), (u'A6_v', [1, 8]), (u'A4_gg', [4, 9, 10, 10, 10]), (u'A5_q', [2, 10, 14]), (u'A5_i', [2, 11, 9]), (u'A5_k', [3, 12, 8, 12]), (u'A4_g', [1, 13]), (u'A5_x', [4, 14, 12, 15, 11]), (u'A6_h', [3, 15, 7, 8]), (u'A4_p', [4, 8, 12, 10, 11]), (u'A9', [3, 9, 5, 7]), (u'A6_bb', [2, 13, 14]), (u'A1_a', [2, 15, 9]), (u'A12_s', [1, 11]), (u'A5_w', [2, 13, 15]), (u'A5_c', [2, 14, 9]), (u'A11', [1, 12]), (u'A5_aa', [2, 13, 13]), (u'A1_b', [1, 14]), (u'A5_cc', [1, 15])]), None), ([0.5668359262477477, 0.65367094845481322, 0.7847570768178077, 0.8072448439978848, 0.7622693096377308, 0.2377306903622693, 0.1927551560021153, 0.7747223691168694, 0.6446684894053314, 0.20389610389610388, 0.12416710735060814, 0.12416710735060814, 0.005230631675447342, 0.06560951017514545], 'Decision Tree', 'Decision Tree', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A13', [5, 2, 2, 3, 2, 3]), (u'A3', [5, 3, 3, 2, 3, 7]), (u'A2', [5, 4, 5, 4, 5, 2]), (u'A10', [4, 5, 11, 8, 5]), (u'A7', [5, 6, 6, 6, 6, 6]), (u'A14', [5, 7, 4, 7, 4, 4]), (u'A6_v', [1, 8]), (u'A4_gg', [4, 9, 10, 10, 10]), (u'A5_q', [2, 10, 14]), (u'A5_i', [2, 11, 9]), (u'A5_k', [3, 12, 8, 12]), (u'A4_g', [1, 13]), (u'A5_x', [4, 14, 12, 15, 11]), (u'A6_h', [3, 15, 7, 8]), (u'A4_p', [4, 8, 12, 10, 11]), (u'A9', [3, 9, 5, 7]), (u'A6_bb', [2, 13, 14]), (u'A1_a', [2, 15, 9]), (u'A12_s', [1, 11]), (u'A5_w', [2, 13, 15]), (u'A5_c', [2, 14, 9]), (u'A11', [1, 12]), (u'A5_aa', [2, 13, 13]), (u'A1_b', [1, 14]), (u'A5_cc', [1, 15])]), None), ([0.72230477699766582, 0.49363189369764882, 0.8633064832409373, 0.8991010047593866, 0.8275119617224881, 0.17248803827751197, 0.10089899524061344, 0.742570068746695, 0.3606288448393712, 0.07057416267942584, 0.04547858276044421, 0.04547858276044421, 0.08826419278234414, 0.01681885074567861], 'Extreme Learning Machine', 'Decision Tree', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A13', [5, 2, 2, 3, 2, 3]), (u'A3', [5, 3, 3, 2, 3, 7]), (u'A2', [5, 4, 5, 4, 5, 2]), (u'A10', [4, 5, 11, 8, 5]), (u'A7', [5, 6, 6, 6, 6, 6]), (u'A14', [5, 7, 4, 7, 4, 4]), (u'A6_v', [1, 8]), (u'A4_gg', [4, 9, 10, 10, 10]), (u'A5_q', [2, 10, 14]), (u'A5_i', [2, 11, 9]), (u'A5_k', [3, 12, 8, 12]), (u'A4_g', [1, 13]), (u'A5_x', [4, 14, 12, 15, 11]), (u'A6_h', [3, 15, 7, 8]), (u'A4_p', [4, 8, 12, 10, 11]), (u'A9', [3, 9, 5, 7]), (u'A6_bb', [2, 13, 14]), (u'A1_a', [2, 15, 9]), (u'A12_s', [1, 11]), (u'A5_w', [2, 13, 15]), (u'A5_c', [2, 14, 9]), (u'A11', [1, 12]), (u'A5_aa', [2, 13, 13]), (u'A1_b', [1, 14]), (u'A5_cc', [1, 15])]), None), ([0.70003834249607133, 0.84155558305374412, 0.8507289990757385, 0.9314648334214702, 0.7699931647300069, 0.2300068352699932, 0.06853516657852987, 0.9314648334214702, 0.7699931647300069, 0.2300068352699932, 0.0652564780539397, 0.0652564780539397, 0.005041969117901779, 0.021898535403047707], 'Gaussian Naive Bayes', 'Decision Tree', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A13', [5, 2, 2, 3, 2, 3]), (u'A3', [5, 3, 3, 2, 3, 7]), (u'A2', [5, 4, 5, 4, 5, 2]), (u'A10', [4, 5, 11, 8, 5]), (u'A7', [5, 6, 6, 6, 6, 6]), (u'A14', [5, 7, 4, 7, 4, 4]), (u'A6_v', [1, 8]), (u'A4_gg', [4, 9, 10, 10, 10]), (u'A5_q', [2, 10, 14]), (u'A5_i', [2, 11, 9]), (u'A5_k', [3, 12, 8, 12]), (u'A4_g', [1, 13]), (u'A5_x', [4, 14, 12, 15, 11]), (u'A6_h', [3, 15, 7, 8]), (u'A4_p', [4, 8, 12, 10, 11]), (u'A9', [3, 9, 5, 7]), (u'A6_bb', [2, 13, 14]), (u'A1_a', [2, 15, 9]), (u'A12_s', [1, 11]), (u'A5_w', [2, 13, 15]), (u'A5_c', [2, 14, 9]), (u'A11', [1, 12]), (u'A5_aa', [2, 13, 13]), (u'A1_b', [1, 14]), (u'A5_cc', [1, 15])]), None), ([0.71177883200514125, 0.60500587523866078, 0.8542054079962178, 0.8207826546800636, 0.887628161312372, 0.11237183868762816, 0.17921734531993655, 0.608937070333157, 0.7753246753246754, 0.033937115516062884, 0.07821258593336858, 0.07821258593336858, 0.0037934757770863303, 0.03206815544933324], 'K-nearest neighbours', 'Decision Tree', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A13', [5, 2, 2, 3, 2, 3]), (u'A3', [5, 3, 3, 2, 3, 7]), (u'A2', [5, 4, 5, 4, 5, 2]), (u'A10', [4, 5, 11, 8, 5]), (u'A7', [5, 6, 6, 6, 6, 6]), (u'A14', [5, 7, 4, 7, 4, 4]), (u'A6_v', [1, 8]), (u'A4_gg', [4, 9, 10, 10, 10]), (u'A5_q', [2, 10, 14]), (u'A5_i', [2, 11, 9]), (u'A5_k', [3, 12, 8, 12]), (u'A4_g', [1, 13]), (u'A5_x', [4, 14, 12, 15, 11]), (u'A6_h', [3, 15, 7, 8]), (u'A4_p', [4, 8, 12, 10, 11]), (u'A9', [3, 9, 5, 7]), (u'A6_bb', [2, 13, 14]), (u'A1_a', [2, 15, 9]), (u'A12_s', [1, 11]), (u'A5_w', [2, 13, 15]), (u'A5_c', [2, 14, 9]), (u'A11', [1, 12]), (u'A5_aa', [2, 13, 13]), (u'A1_b', [1, 14]), (u'A5_cc', [1, 15])]), None), ([0.69764861308917747, 0.67535005567170581, 0.8508762682389837, 0.8924907456372291, 0.8092617908407382, 0.1907382091592618, 0.107509254362771, 0.7785298783712321, 0.733526999316473, 0.11756664388243336, 0.06848228450555262, 0.06848228450555262, 0.013220264592444748, 0.03309098335620559], 'Logistic regression', 'Decision Tree', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A13', [5, 2, 2, 3, 2, 3]), (u'A3', [5, 3, 3, 2, 3, 7]), (u'A2', [5, 4, 5, 4, 5, 2]), (u'A10', [4, 5, 11, 8, 5]), (u'A7', [5, 6, 6, 6, 6, 6]), (u'A14', [5, 7, 4, 7, 4, 4]), (u'A6_v', [1, 8]), (u'A4_gg', [4, 9, 10, 10, 10]), (u'A5_q', [2, 10, 14]), (u'A5_i', [2, 11, 9]), (u'A5_k', [3, 12, 8, 12]), (u'A4_g', [1, 13]), (u'A5_x', [4, 14, 12, 15, 11]), (u'A6_h', [3, 15, 7, 8]), (u'A4_p', [4, 8, 12, 10, 11]), (u'A9', [3, 9, 5, 7]), (u'A6_bb', [2, 13, 14]), (u'A1_a', [2, 15, 9]), (u'A12_s', [1, 11]), (u'A5_w', [2, 13, 15]), (u'A5_c', [2, 14, 9]), (u'A11', [1, 12]), (u'A5_aa', [2, 13, 13]), (u'A1_b', [1, 14]), (u'A5_cc', [1, 15])]), None), ([0.72879187636047937, 0.59941005073106046, 0.8655286779517901, 0.869539925965098, 0.8615174299384826, 0.13848257006151743, 0.13046007403490217, 0.6579058699101006, 0.7752563226247438, 0.036637047163362954, 0.062030671602326816, 0.062030671602326816, 2.411294034972906, 0.03057110821570218], 'Random forest', 'Decision Tree', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A13', [5, 2, 2, 3, 2, 3]), (u'A3', [5, 3, 3, 2, 3, 7]), (u'A2', [5, 4, 5, 4, 5, 2]), (u'A10', [4, 5, 11, 8, 5]), (u'A7', [5, 6, 6, 6, 6, 6]), (u'A14', [5, 7, 4, 7, 4, 4]), (u'A6_v', [1, 8]), (u'A4_gg', [4, 9, 10, 10, 10]), (u'A5_q', [2, 10, 14]), (u'A5_i', [2, 11, 9]), (u'A5_k', [3, 12, 8, 12]), (u'A4_g', [1, 13]), (u'A5_x', [4, 14, 12, 15, 11]), (u'A6_h', [3, 15, 7, 8]), (u'A4_p', [4, 8, 12, 10, 11]), (u'A9', [3, 9, 5, 7]), (u'A6_bb', [2, 13, 14]), (u'A1_a', [2, 15, 9]), (u'A12_s', [1, 11]), (u'A5_w', [2, 13, 15]), (u'A5_c', [2, 14, 9]), (u'A11', [1, 12]), (u'A5_aa', [2, 13, 13]), (u'A1_b', [1, 14]), (u'A5_cc', [1, 15])]), None), ([0.72291035332551234, 0.64937655046960574, 0.8631978725719158, 0.9249603384452671, 0.8014354066985646, 0.1985645933014354, 0.07503966155473293, 0.8989423585404547, 0.793609022556391, 0.16708817498291184, 0.07181385510312004, 0.07181385510312004, 0.3621125738915771, 0.018873011305405384], 'SVM (RDF)', 'Decision Tree', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A13', [5, 2, 2, 3, 2, 3]), (u'A3', [5, 3, 3, 2, 3, 7]), (u'A2', [5, 4, 5, 4, 5, 2]), (u'A10', [4, 5, 11, 8, 5]), (u'A7', [5, 6, 6, 6, 6, 6]), (u'A14', [5, 7, 4, 7, 4, 4]), (u'A6_v', [1, 8]), (u'A4_gg', [4, 9, 10, 10, 10]), (u'A5_q', [2, 10, 14]), (u'A5_i', [2, 11, 9]), (u'A5_k', [3, 12, 8, 12]), (u'A4_g', [1, 13]), (u'A5_x', [4, 14, 12, 15, 11]), (u'A6_h', [3, 15, 7, 8]), (u'A4_p', [4, 8, 12, 10, 11]), (u'A9', [3, 9, 5, 7]), (u'A6_bb', [2, 13, 14]), (u'A1_a', [2, 15, 9]), (u'A12_s', [1, 11]), (u'A5_w', [2, 13, 15]), (u'A5_c', [2, 14, 9]), (u'A11', [1, 12]), (u'A5_aa', [2, 13, 13]), (u'A1_b', [1, 14]), (u'A5_cc', [1, 15])]), None), ([0.72374836687903976, 0.67457793827751167, 0.8634949863240381, 0.9281861448968799, 0.7988038277511962, 0.20119617224880382, 0.07181385510312004, 0.9249603384452671, 0.7988038277511962, 0.20119617224880382, 0.07181385510312004, 0.07181385510312004, 1.1270486867123906, 0.01981677201063601], 'SVM (linear)', 'Decision Tree', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A13', [5, 2, 2, 3, 2, 3]), (u'A3', [5, 3, 3, 2, 3, 7]), (u'A2', [5, 4, 5, 4, 5, 2]), (u'A10', [4, 5, 11, 8, 5]), (u'A7', [5, 6, 6, 6, 6, 6]), (u'A14', [5, 7, 4, 7, 4, 4]), (u'A6_v', [1, 8]), (u'A4_gg', [4, 9, 10, 10, 10]), (u'A5_q', [2, 10, 14]), (u'A5_i', [2, 11, 9]), (u'A5_k', [3, 12, 8, 12]), (u'A4_g', [1, 13]), (u'A5_x', [4, 14, 12, 15, 11]), (u'A6_h', [3, 15, 7, 8]), (u'A4_p', [4, 8, 12, 10, 11]), (u'A9', [3, 9, 5, 7]), (u'A6_bb', [2, 13, 14]), (u'A1_a', [2, 15, 9]), (u'A12_s', [1, 11]), (u'A5_w', [2, 13, 15]), (u'A5_c', [2, 14, 9]), (u'A11', [1, 12]), (u'A5_aa', [2, 13, 13]), (u'A1_b', [1, 14]), (u'A5_cc', [1, 15])]), None), ([0.70506562343610069, 0.72517546542131872, 0.8533504118692964, 0.853146483342147, 0.8535543403964457, 0.14644565960355435, 0.14685351665785298, 0.8824431517715494, 0.7830827067669174, 0.16209842788790157, 0.06853516657852987, 0.06853516657852987, 0.18992976621237734, 0.02994649103303179], 'SVM (polynomial)', 'Decision Tree', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A13', [5, 2, 2, 3, 2, 3]), (u'A3', [5, 3, 3, 2, 3, 7]), (u'A2', [5, 4, 5, 4, 5, 2]), (u'A10', [4, 5, 11, 8, 5]), (u'A7', [5, 6, 6, 6, 6, 6]), (u'A14', [5, 7, 4, 7, 4, 4]), (u'A6_v', [1, 8]), (u'A4_gg', [4, 9, 10, 10, 10]), (u'A5_q', [2, 10, 14]), (u'A5_i', [2, 11, 9]), (u'A5_k', [3, 12, 8, 12]), (u'A4_g', [1, 13]), (u'A5_x', [4, 14, 12, 15, 11]), (u'A6_h', [3, 15, 7, 8]), (u'A4_p', [4, 8, 12, 10, 11]), (u'A9', [3, 9, 5, 7]), (u'A6_bb', [2, 13, 14]), (u'A1_a', [2, 15, 9]), (u'A12_s', [1, 11]), (u'A5_w', [2, 13, 15]), (u'A5_c', [2, 14, 9]), (u'A11', [1, 12]), (u'A5_aa', [2, 13, 13]), (u'A1_b', [1, 14]), (u'A5_cc', [1, 15])]), None)], 'Decision Tree'), ('Bernoulli Naive Bayes', [([0.080127308770379768, 0.25591159390682805, 0.5289462298118258, 0.1904283447911158, 0.867464114832536, 0.13253588516746412, 0.8095716552088842, 0.0, 0.0, 0.0, 0.0, 0.0, 0.32993881597793795, 0.05628863618856405], 'AdaBoost', 'Bernoulli Naive Bayes', OrderedDict([(u'A5_r', [5, 1, 2, 1, 1, 4]), (u'A4_gg', [5, 2, 3, 2, 2, 5]), (u'A6_o', [5, 3, 5, 4, 4, 7]), (u'A6_dd', [5, 4, 1, 3, 3, 3]), (u'A6_j', [5, 5, 4, 5, 5, 1]), (u'A5_j', [5, 6, 6, 6, 6, 2]), (u'A12_p', [5, 7, 7, 8, 7, 8]), (u'A6_z', [5, 8, 8, 10, 10, 6]), (u'A5_ff', [5, 9, 10, 9, 9, 11]), (u'A5_d', [5, 10, 9, 7, 11, 10]), (u'A6_ff', [5, 11, 11, 11, 8, 12]), (u'A5_k', [4, 12, 13, 15, 12]), (u'A5_e', [5, 13, 14, 14, 15, 9]), (u'A5_m', [3, 14, 12, 15]), (u'A5_i', [4, 15, 12, 13, 14]), (u'A12_s', [4, 15, 13, 14, 13])]), None), ([-0.034108309081233232, 0.26511600051216822, 0.4987012987012987, 0.0, 0.9974025974025974, 0.0025974025974025974, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.231133065060208, 0.0025974025974025983], 'Artificial neural network', 'Bernoulli Naive Bayes', OrderedDict([(u'A5_r', [5, 1, 2, 1, 1, 4]), (u'A4_gg', [5, 2, 3, 2, 2, 5]), (u'A6_o', [5, 3, 5, 4, 4, 7]), (u'A6_dd', [5, 4, 1, 3, 3, 3]), (u'A6_j', [5, 5, 4, 5, 5, 1]), (u'A5_j', [5, 6, 6, 6, 6, 2]), (u'A12_p', [5, 7, 7, 8, 7, 8]), (u'A6_z', [5, 8, 8, 10, 10, 6]), (u'A5_ff', [5, 9, 10, 9, 9, 11]), (u'A5_d', [5, 10, 9, 7, 11, 10]), (u'A6_ff', [5, 11, 11, 11, 8, 12]), (u'A5_k', [4, 12, 13, 15, 12]), (u'A5_e', [5, 13, 14, 14, 15, 9]), (u'A5_m', [3, 14, 12, 15]), (u'A5_i', [4, 15, 12, 13, 14]), (u'A12_s', [4, 15, 13, 14, 13])]), None), ([0.22477237029995439, 0.31295396420159893, 0.6064408141887336, 0.7848228450555262, 0.42805878332194114, 0.5719412166780588, 0.21517715494447381, 0.03262823902696986, 0.18277511961722487, 0.021018455228981544, 0.0686409307244844, 0.0686409307244844, 0.014210063834353637, 0.029286636753575984], 'Bernoulli Naive Bayes', 'Bernoulli Naive Bayes', OrderedDict([(u'A5_r', [5, 1, 2, 1, 1, 4]), (u'A4_gg', [5, 2, 3, 2, 2, 5]), (u'A6_o', [5, 3, 5, 4, 4, 7]), (u'A6_dd', [5, 4, 1, 3, 3, 3]), (u'A6_j', [5, 5, 4, 5, 5, 1]), (u'A5_j', [5, 6, 6, 6, 6, 2]), (u'A12_p', [5, 7, 7, 8, 7, 8]), (u'A6_z', [5, 8, 8, 10, 10, 6]), (u'A5_ff', [5, 9, 10, 9, 9, 11]), (u'A5_d', [5, 10, 9, 7, 11, 10]), (u'A6_ff', [5, 11, 11, 11, 8, 12]), (u'A5_k', [4, 12, 13, 15, 12]), (u'A5_e', [5, 13, 14, 14, 15, 9]), (u'A5_m', [3, 14, 12, 15]), (u'A5_i', [4, 15, 12, 13, 14]), (u'A12_s', [4, 15, 13, 14, 13])]), None), ([0.19304629963624981, 0.35281787657332014, 0.5704553497102691, 0.9218402961396087, 0.21907040328092958, 0.7809295967190704, 0.07815970386039132, 0.3866737176097303, 0.21387559808612439, 0.31442241968557766, 0.07815970386039132, 0.07815970386039132, 0.008568600573594416, 0.01919301560936765], 'Decision Tree', 'Bernoulli Naive Bayes', OrderedDict([(u'A5_r', [5, 1, 2, 1, 1, 4]), (u'A4_gg', [5, 2, 3, 2, 2, 5]), (u'A6_o', [5, 3, 5, 4, 4, 7]), (u'A6_dd', [5, 4, 1, 3, 3, 3]), (u'A6_j', [5, 5, 4, 5, 5, 1]), (u'A5_j', [5, 6, 6, 6, 6, 2]), (u'A12_p', [5, 7, 7, 8, 7, 8]), (u'A6_z', [5, 8, 8, 10, 10, 6]), (u'A5_ff', [5, 9, 10, 9, 9, 11]), (u'A5_d', [5, 10, 9, 7, 11, 10]), (u'A6_ff', [5, 11, 11, 11, 8, 12]), (u'A5_k', [4, 12, 13, 15, 12]), (u'A5_e', [5, 13, 14, 14, 15, 9]), (u'A5_m', [3, 14, 12, 15]), (u'A5_i', [4, 15, 12, 13, 14]), (u'A12_s', [4, 15, 13, 14, 13])]), None), ([0.060502648271794537, 0.49007070562741112, 0.5114025930650384, 0.04891591750396616, 0.9738892686261108, 0.02611073137388927, 0.9510840824960338, 0.019619249074563725, 0.29524948735475054, 0.007894736842105263, 0.11739820200951878, 0.11739820200951878, 0.03533091261663502, 0.00865851510813353], 'Extreme Learning Machine', 'Bernoulli Naive Bayes', OrderedDict([(u'A5_r', [5, 1, 2, 1, 1, 4]), (u'A4_gg', [5, 2, 3, 2, 2, 5]), (u'A6_o', [5, 3, 5, 4, 4, 7]), (u'A6_dd', [5, 4, 1, 3, 3, 3]), (u'A6_j', [5, 5, 4, 5, 5, 1]), (u'A5_j', [5, 6, 6, 6, 6, 2]), (u'A12_p', [5, 7, 7, 8, 7, 8]), (u'A6_z', [5, 8, 8, 10, 10, 6]), (u'A5_ff', [5, 9, 10, 9, 9, 11]), (u'A5_d', [5, 10, 9, 7, 11, 10]), (u'A6_ff', [5, 11, 11, 11, 8, 12]), (u'A5_k', [4, 12, 13, 15, 12]), (u'A5_e', [5, 13, 14, 14, 15, 9]), (u'A5_m', [3, 14, 12, 15]), (u'A5_i', [4, 15, 12, 13, 14]), (u'A12_s', [4, 15, 13, 14, 13])]), None), ([0.02362673343611621, 0.55507972484126034, 0.5048578220465831, 0.04891591750396616, 0.9607997265892003, 0.03920027341079972, 0.9510840824960338, 0.04891591750396616, 0.9607997265892003, 0.03920027341079972, 0.9510840824960338, 0.9510840824960338, 0.004833383794278667, 0.005675257474132645], 'Gaussian Naive Bayes', 'Bernoulli Naive Bayes', OrderedDict([(u'A5_r', [5, 1, 2, 1, 1, 4]), (u'A4_gg', [5, 2, 3, 2, 2, 5]), (u'A6_o', [5, 3, 5, 4, 4, 7]), (u'A6_dd', [5, 4, 1, 3, 3, 3]), (u'A6_j', [5, 5, 4, 5, 5, 1]), (u'A5_j', [5, 6, 6, 6, 6, 2]), (u'A12_p', [5, 7, 7, 8, 7, 8]), (u'A6_z', [5, 8, 8, 10, 10, 6]), (u'A5_ff', [5, 9, 10, 9, 9, 11]), (u'A5_d', [5, 10, 9, 7, 11, 10]), (u'A6_ff', [5, 11, 11, 11, 8, 12]), (u'A5_k', [4, 12, 13, 15, 12]), (u'A5_e', [5, 13, 14, 14, 15, 9]), (u'A5_m', [3, 14, 12, 15]), (u'A5_i', [4, 15, 12, 13, 14]), (u'A12_s', [4, 15, 13, 14, 13])]), None), ([0.21881538700048841, 0.36432577091657964, 0.6040485962032622, 0.7747752511898466, 0.43332194121667805, 0.566678058783322, 0.2252247488101534, 0.3088841882601798, 0.34747095010252904, 0.22874231032125772, 0.16007403490216815, 0.16007403490216815, 0.0056007121483294675, 0.04236576004845007], 'K-nearest neighbours', 'Bernoulli Naive Bayes', OrderedDict([(u'A5_r', [5, 1, 2, 1, 1, 4]), (u'A4_gg', [5, 2, 3, 2, 2, 5]), (u'A6_o', [5, 3, 5, 4, 4, 7]), (u'A6_dd', [5, 4, 1, 3, 3, 3]), (u'A6_j', [5, 5, 4, 5, 5, 1]), (u'A5_j', [5, 6, 6, 6, 6, 2]), (u'A12_p', [5, 7, 7, 8, 7, 8]), (u'A6_z', [5, 8, 8, 10, 10, 6]), (u'A5_ff', [5, 9, 10, 9, 9, 11]), (u'A5_d', [5, 10, 9, 7, 11, 10]), (u'A6_ff', [5, 11, 11, 11, 8, 12]), (u'A5_k', [4, 12, 13, 15, 12]), (u'A5_e', [5, 13, 14, 14, 15, 9]), (u'A5_m', [3, 14, 12, 15]), (u'A5_i', [4, 15, 12, 13, 14]), (u'A12_s', [4, 15, 13, 14, 13])]), None), ([0.22160911720120766, 0.32144148962327407, 0.6061140062309034, 0.7684822845055526, 0.4437457279562542, 0.5562542720437458, 0.23151771549444736, 0.01639344262295082, 0.33431305536568695, 0.007894736842105263, 0.15658381808566896, 0.15658381808566896, 0.006846790608408368, 0.042400326139234494], 'Logistic regression', 'Bernoulli Naive Bayes', OrderedDict([(u'A5_r', [5, 1, 2, 1, 1, 4]), (u'A4_gg', [5, 2, 3, 2, 2, 5]), (u'A6_o', [5, 3, 5, 4, 4, 7]), (u'A6_dd', [5, 4, 1, 3, 3, 3]), (u'A6_j', [5, 5, 4, 5, 5, 1]), (u'A5_j', [5, 6, 6, 6, 6, 2]), (u'A12_p', [5, 7, 7, 8, 7, 8]), (u'A6_z', [5, 8, 8, 10, 10, 6]), (u'A5_ff', [5, 9, 10, 9, 9, 11]), (u'A5_d', [5, 10, 9, 7, 11, 10]), (u'A6_ff', [5, 11, 11, 11, 8, 12]), (u'A5_k', [4, 12, 13, 15, 12]), (u'A5_e', [5, 13, 14, 14, 15, 9]), (u'A5_m', [3, 14, 12, 15]), (u'A5_i', [4, 15, 12, 13, 14]), (u'A12_s', [4, 15, 13, 14, 13])]), None), ([0.24093408953530418, 0.29247088963390944, 0.611901828028077, 0.8139608672659968, 0.4098427887901572, 0.5901572112098428, 0.18603913273400316, 0.009836065573770491, 0.1437799043062201, 0.005263157894736842, 0.029296668429402435, 0.029296668429402435, 2.978087372196211, 0.02200946358502553], 'Random forest', 'Bernoulli Naive Bayes', OrderedDict([(u'A5_r', [5, 1, 2, 1, 1, 4]), (u'A4_gg', [5, 2, 3, 2, 2, 5]), (u'A6_o', [5, 3, 5, 4, 4, 7]), (u'A6_dd', [5, 4, 1, 3, 3, 3]), (u'A6_j', [5, 5, 4, 5, 5, 1]), (u'A5_j', [5, 6, 6, 6, 6, 2]), (u'A12_p', [5, 7, 7, 8, 7, 8]), (u'A6_z', [5, 8, 8, 10, 10, 6]), (u'A5_ff', [5, 9, 10, 9, 9, 11]), (u'A5_d', [5, 10, 9, 7, 11, 10]), (u'A6_ff', [5, 11, 11, 11, 8, 12]), (u'A5_k', [4, 12, 13, 15, 12]), (u'A5_e', [5, 13, 14, 14, 15, 9]), (u'A5_m', [3, 14, 12, 15]), (u'A5_i', [4, 15, 12, 13, 14]), (u'A12_s', [4, 15, 13, 14, 13])]), None), ([0.15680454166673441, 0.28284743567784282, 0.5787969454909809, 0.6465891062929666, 0.5110047846889952, 0.48899521531100476, 0.3534108937070333, 0.0, 0.15673274094326725, 0.0, 0.07868852459016393, 0.07868852459016393, 0.5259709858116701, 0.047851456180632135], 'SVM (RDF)', 'Bernoulli Naive Bayes', OrderedDict([(u'A5_r', [5, 1, 2, 1, 1, 4]), (u'A4_gg', [5, 2, 3, 2, 2, 5]), (u'A6_o', [5, 3, 5, 4, 4, 7]), (u'A6_dd', [5, 4, 1, 3, 3, 3]), (u'A6_j', [5, 5, 4, 5, 5, 1]), (u'A5_j', [5, 6, 6, 6, 6, 2]), (u'A12_p', [5, 7, 7, 8, 7, 8]), (u'A6_z', [5, 8, 8, 10, 10, 6]), (u'A5_ff', [5, 9, 10, 9, 9, 11]), (u'A5_d', [5, 10, 9, 7, 11, 10]), (u'A6_ff', [5, 11, 11, 11, 8, 12]), (u'A5_k', [4, 12, 13, 15, 12]), (u'A5_e', [5, 13, 14, 14, 15, 9]), (u'A5_m', [3, 14, 12, 15]), (u'A5_i', [4, 15, 12, 13, 14]), (u'A12_s', [4, 15, 13, 14, 13])]), None), ([0.23085456663814222, 0.30933705814047346, 0.6086821212687504, 0.7945002644103648, 0.42286397812713605, 0.5771360218728641, 0.20549973558963514, 0.0, 0.41766917293233086, 0.0, 0.18921205711263883, 0.18921205711263883, 0.31399969753618817, 0.032939545346400936], 'SVM (linear)', 'Bernoulli Naive Bayes', OrderedDict([(u'A5_r', [5, 1, 2, 1, 1, 4]), (u'A4_gg', [5, 2, 3, 2, 2, 5]), (u'A6_o', [5, 3, 5, 4, 4, 7]), (u'A6_dd', [5, 4, 1, 3, 3, 3]), (u'A6_j', [5, 5, 4, 5, 5, 1]), (u'A5_j', [5, 6, 6, 6, 6, 2]), (u'A12_p', [5, 7, 7, 8, 7, 8]), (u'A6_z', [5, 8, 8, 10, 10, 6]), (u'A5_ff', [5, 9, 10, 9, 9, 11]), (u'A5_d', [5, 10, 9, 7, 11, 10]), (u'A6_ff', [5, 11, 11, 11, 8, 12]), (u'A5_k', [4, 12, 13, 15, 12]), (u'A5_e', [5, 13, 14, 14, 15, 9]), (u'A5_m', [3, 14, 12, 15]), (u'A5_i', [4, 15, 12, 13, 14]), (u'A12_s', [4, 15, 13, 14, 13])]), None), ([0.0, 0.25919672076068889, 0.5, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3110490151361703, 0.0], 'SVM (polynomial)', 'Bernoulli Naive Bayes', OrderedDict([(u'A5_r', [5, 1, 2, 1, 1, 4]), (u'A4_gg', [5, 2, 3, 2, 2, 5]), (u'A6_o', [5, 3, 5, 4, 4, 7]), (u'A6_dd', [5, 4, 1, 3, 3, 3]), (u'A6_j', [5, 5, 4, 5, 5, 1]), (u'A5_j', [5, 6, 6, 6, 6, 2]), (u'A12_p', [5, 7, 7, 8, 7, 8]), (u'A6_z', [5, 8, 8, 10, 10, 6]), (u'A5_ff', [5, 9, 10, 9, 9, 11]), (u'A5_d', [5, 10, 9, 7, 11, 10]), (u'A6_ff', [5, 11, 11, 11, 8, 12]), (u'A5_k', [4, 12, 13, 15, 12]), (u'A5_e', [5, 13, 14, 14, 15, 9]), (u'A5_m', [3, 14, 12, 15]), (u'A5_i', [4, 15, 12, 13, 14]), (u'A12_s', [4, 15, 13, 14, 13])]), None)], 'Bernoulli Naive Bayes'), ('SVM (linear)', [([0.72040681589895494, 0.33530155230793895, 0.8618820830982316, 0.9249603384452671, 0.7988038277511962, 0.20119617224880382, 0.07503966155473293, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5674550145451284, 0.019126641291029655], 'AdaBoost', 'SVM (linear)', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 2]), (u'A12_p', [5, 2, 2, 4, 2, 3]), (u'A4_gg', [4, 3, 3, 5, 1]), (u'A12_s', [5, 4, 7, 13, 4, 4]), (u'A12_g', [4, 5, 6, 10, 3]), (u'A5_j', [4, 6, 14, 7, 6]), (u'A5_ff', [5, 7, 9, 2, 8, 14]), (u'A6_j', [4, 8, 12, 3, 5]), (u'A6_ff', [2, 9, 10]), (u'A4_p', [4, 10, 8, 9, 5]), (u'A4_g', [4, 11, 10, 14, 6]), (u'A6_z', [4, 12, 11, 6, 7]), (u'A6_dd', [2, 13, 13]), (u'A6_v', [3, 14, 14, 9]), (u'A6_h', [2, 15, 11]), (u'A6_o', [2, 4, 8]), (u'A5_r', [2, 5, 7]), (u'A5_x', [4, 13, 11, 12, 10]), (u'A5_e', [3, 15, 12, 11]), (u'A14', [3, 8, 9, 13]), (u'A5_cc', [2, 15, 15]), (u'A6_bb', [1, 12]), (u'A5_w', [1, 15])]), None), ([0.71294562229706038, 0.64319087413597198, 0.8582627516100476, 0.9151242728714966, 0.8014012303485988, 0.19859876965140125, 0.08487572712850343, 0.8014806980433633, 0.7962064251537936, 0.1307928913192071, 0.07181385510312004, 0.07181385510312004, 7.111169638428963, 0.024821815718367668], 'Artificial neural network', 'SVM (linear)', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 2]), (u'A12_p', [5, 2, 2, 4, 2, 3]), (u'A4_gg', [4, 3, 3, 5, 1]), (u'A12_s', [5, 4, 7, 13, 4, 4]), (u'A12_g', [4, 5, 6, 10, 3]), (u'A5_j', [4, 6, 14, 7, 6]), (u'A5_ff', [5, 7, 9, 2, 8, 14]), (u'A6_j', [4, 8, 12, 3, 5]), (u'A6_ff', [2, 9, 10]), (u'A4_p', [4, 10, 8, 9, 5]), (u'A4_g', [4, 11, 10, 14, 6]), (u'A6_z', [4, 12, 11, 6, 7]), (u'A6_dd', [2, 13, 13]), (u'A6_v', [3, 14, 14, 9]), (u'A6_h', [2, 15, 11]), (u'A6_o', [2, 4, 8]), (u'A5_r', [2, 5, 7]), (u'A5_x', [4, 13, 11, 12, 10]), (u'A5_e', [3, 15, 12, 11]), (u'A14', [3, 8, 9, 13]), (u'A5_cc', [2, 15, 15]), (u'A6_bb', [1, 12]), (u'A5_w', [1, 15])]), None), ([0.70206976306316593, 0.65381871590739549, 0.852780185524626, 0.9119513484928609, 0.7936090225563911, 0.206390977443609, 0.08804865150713906, 0.8273929138022209, 0.7543745727956255, 0.1280587833219412, 0.07498677948175568, 0.07498677948175568, 0.007196042734936459, 0.032343528343484494], 'Bernoulli Naive Bayes', 'SVM (linear)', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 2]), (u'A12_p', [5, 2, 2, 4, 2, 3]), (u'A4_gg', [4, 3, 3, 5, 1]), (u'A12_s', [5, 4, 7, 13, 4, 4]), (u'A12_g', [4, 5, 6, 10, 3]), (u'A5_j', [4, 6, 14, 7, 6]), (u'A5_ff', [5, 7, 9, 2, 8, 14]), (u'A6_j', [4, 8, 12, 3, 5]), (u'A6_ff', [2, 9, 10]), (u'A4_p', [4, 10, 8, 9, 5]), (u'A4_g', [4, 11, 10, 14, 6]), (u'A6_z', [4, 12, 11, 6, 7]), (u'A6_dd', [2, 13, 13]), (u'A6_v', [3, 14, 14, 9]), (u'A6_h', [2, 15, 11]), (u'A6_o', [2, 4, 8]), (u'A5_r', [2, 5, 7]), (u'A5_x', [4, 13, 11, 12, 10]), (u'A5_e', [3, 15, 12, 11]), (u'A14', [3, 8, 9, 13]), (u'A5_cc', [2, 15, 15]), (u'A6_bb', [1, 12]), (u'A5_w', [1, 15])]), None), ([0.64347020453024883, 0.73025879198905952, 0.8221400937563368, 0.9051824431517715, 0.7390977443609023, 0.26090225563909775, 0.09481755684822844, 0.89227921734532, 0.6790840738209158, 0.2556732740943267, 0.08826017979904813, 0.08826017979904813, 0.004883190709471026, 0.05156341235392518], 'Decision Tree', 'SVM (linear)', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 2]), (u'A12_p', [5, 2, 2, 4, 2, 3]), (u'A4_gg', [4, 3, 3, 5, 1]), (u'A12_s', [5, 4, 7, 13, 4, 4]), (u'A12_g', [4, 5, 6, 10, 3]), (u'A5_j', [4, 6, 14, 7, 6]), (u'A5_ff', [5, 7, 9, 2, 8, 14]), (u'A6_j', [4, 8, 12, 3, 5]), (u'A6_ff', [2, 9, 10]), (u'A4_p', [4, 10, 8, 9, 5]), (u'A4_g', [4, 11, 10, 14, 6]), (u'A6_z', [4, 12, 11, 6, 7]), (u'A6_dd', [2, 13, 13]), (u'A6_v', [3, 14, 14, 9]), (u'A6_h', [2, 15, 11]), (u'A6_o', [2, 4, 8]), (u'A5_r', [2, 5, 7]), (u'A5_x', [4, 13, 11, 12, 10]), (u'A5_e', [3, 15, 12, 11]), (u'A14', [3, 8, 9, 13]), (u'A5_cc', [2, 15, 15]), (u'A6_bb', [1, 12]), (u'A5_w', [1, 15])]), None), ([0.72549931292830905, 0.66232678822248603, 0.8641327430397542, 0.934690639873083, 0.7935748462064252, 0.2064251537935749, 0.06530936012691699, 0.84362771020624, 0.78838004101162, 0.15946684894053315, 0.05547329455314648, 0.05547329455314648, 0.14634237635735142, 0.019716679165182674], 'Extreme Learning Machine', 'SVM (linear)', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 2]), (u'A12_p', [5, 2, 2, 4, 2, 3]), (u'A4_gg', [4, 3, 3, 5, 1]), (u'A12_s', [5, 4, 7, 13, 4, 4]), (u'A12_g', [4, 5, 6, 10, 3]), (u'A5_j', [4, 6, 14, 7, 6]), (u'A5_ff', [5, 7, 9, 2, 8, 14]), (u'A6_j', [4, 8, 12, 3, 5]), (u'A6_ff', [2, 9, 10]), (u'A4_p', [4, 10, 8, 9, 5]), (u'A4_g', [4, 11, 10, 14, 6]), (u'A6_z', [4, 12, 11, 6, 7]), (u'A6_dd', [2, 13, 13]), (u'A6_v', [3, 14, 14, 9]), (u'A6_h', [2, 15, 11]), (u'A6_o', [2, 4, 8]), (u'A5_r', [2, 5, 7]), (u'A5_x', [4, 13, 11, 12, 10]), (u'A5_e', [3, 15, 12, 11]), (u'A14', [3, 8, 9, 13]), (u'A5_cc', [2, 15, 15]), (u'A6_bb', [1, 12]), (u'A5_w', [1, 15])]), None), ([0.69565917676768652, 0.83997924675139179, 0.8487490118498495, 0.9249074563722898, 0.7725905673274094, 0.22740943267259056, 0.0750925436277102, 0.9249074563722898, 0.7725905673274094, 0.22740943267259056, 0.0750925436277102, 0.0750925436277102, 0.00472924206251335, 0.019356624293962375], 'Gaussian Naive Bayes', 'SVM (linear)', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 2]), (u'A12_p', [5, 2, 2, 4, 2, 3]), (u'A4_gg', [4, 3, 3, 5, 1]), (u'A12_s', [5, 4, 7, 13, 4, 4]), (u'A12_g', [4, 5, 6, 10, 3]), (u'A5_j', [4, 6, 14, 7, 6]), (u'A5_ff', [5, 7, 9, 2, 8, 14]), (u'A6_j', [4, 8, 12, 3, 5]), (u'A6_ff', [2, 9, 10]), (u'A4_p', [4, 10, 8, 9, 5]), (u'A4_g', [4, 11, 10, 14, 6]), (u'A6_z', [4, 12, 11, 6, 7]), (u'A6_dd', [2, 13, 13]), (u'A6_v', [3, 14, 14, 9]), (u'A6_h', [2, 15, 11]), (u'A6_o', [2, 4, 8]), (u'A5_r', [2, 5, 7]), (u'A5_x', [4, 13, 11, 12, 10]), (u'A5_e', [3, 15, 12, 11]), (u'A14', [3, 8, 9, 13]), (u'A5_cc', [2, 15, 15]), (u'A6_bb', [1, 12]), (u'A5_w', [1, 15])]), None), ([0.70460371730733584, 0.79736703624416394, 0.8537073206789871, 0.9217345319936541, 0.7856801093643199, 0.2143198906356801, 0.07826546800634585, 0.8955579058699101, 0.7752904989747095, 0.19863294600136705, 0.06842940243257536, 0.06842940243257536, 0.004438248933754885, 0.019196562357586017], 'K-nearest neighbours', 'SVM (linear)', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 2]), (u'A12_p', [5, 2, 2, 4, 2, 3]), (u'A4_gg', [4, 3, 3, 5, 1]), (u'A12_s', [5, 4, 7, 13, 4, 4]), (u'A12_g', [4, 5, 6, 10, 3]), (u'A5_j', [4, 6, 14, 7, 6]), (u'A5_ff', [5, 7, 9, 2, 8, 14]), (u'A6_j', [4, 8, 12, 3, 5]), (u'A6_ff', [2, 9, 10]), (u'A4_p', [4, 10, 8, 9, 5]), (u'A4_g', [4, 11, 10, 14, 6]), (u'A6_z', [4, 12, 11, 6, 7]), (u'A6_dd', [2, 13, 13]), (u'A6_v', [3, 14, 14, 9]), (u'A6_h', [2, 15, 11]), (u'A6_o', [2, 4, 8]), (u'A5_r', [2, 5, 7]), (u'A5_x', [4, 13, 11, 12, 10]), (u'A5_e', [3, 15, 12, 11]), (u'A14', [3, 8, 9, 13]), (u'A5_cc', [2, 15, 15]), (u'A6_bb', [1, 12]), (u'A5_w', [1, 15])]), None), ([0.70539602243384802, 0.68669436832248398, 0.8543589124004667, 0.9151771549444738, 0.7935406698564593, 0.20645933014354068, 0.08482284505552616, 0.8370703331570597, 0.7805194805194805, 0.13591934381408066, 0.058751983077736644, 0.058751983077736644, 0.008863517883549641, 0.021109272610349533], 'Logistic regression', 'SVM (linear)', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 2]), (u'A12_p', [5, 2, 2, 4, 2, 3]), (u'A4_gg', [4, 3, 3, 5, 1]), (u'A12_s', [5, 4, 7, 13, 4, 4]), (u'A12_g', [4, 5, 6, 10, 3]), (u'A5_j', [4, 6, 14, 7, 6]), (u'A5_ff', [5, 7, 9, 2, 8, 14]), (u'A6_j', [4, 8, 12, 3, 5]), (u'A6_ff', [2, 9, 10]), (u'A4_p', [4, 10, 8, 9, 5]), (u'A4_g', [4, 11, 10, 14, 6]), (u'A6_z', [4, 12, 11, 6, 7]), (u'A6_dd', [2, 13, 13]), (u'A6_v', [3, 14, 14, 9]), (u'A6_h', [2, 15, 11]), (u'A6_o', [2, 4, 8]), (u'A5_r', [2, 5, 7]), (u'A5_x', [4, 13, 11, 12, 10]), (u'A5_e', [3, 15, 12, 11]), (u'A14', [3, 8, 9, 13]), (u'A5_cc', [2, 15, 15]), (u'A6_bb', [1, 12]), (u'A5_w', [1, 15])]), None), ([0.70865963935377208, 0.56547463162840872, 0.8563230404264109, 0.8955579058699101, 0.817088174982912, 0.18291182501708816, 0.1044420941300899, 0.6572712850343734, 0.7699589883800411, 0.06267942583732058, 0.058751983077736644, 0.058751983077736644, 2.735142219873079, 0.03125686989651992], 'Random forest', 'SVM (linear)', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 2]), (u'A12_p', [5, 2, 2, 4, 2, 3]), (u'A4_gg', [4, 3, 3, 5, 1]), (u'A12_s', [5, 4, 7, 13, 4, 4]), (u'A12_g', [4, 5, 6, 10, 3]), (u'A5_j', [4, 6, 14, 7, 6]), (u'A5_ff', [5, 7, 9, 2, 8, 14]), (u'A6_j', [4, 8, 12, 3, 5]), (u'A6_ff', [2, 9, 10]), (u'A4_p', [4, 10, 8, 9, 5]), (u'A4_g', [4, 11, 10, 14, 6]), (u'A6_z', [4, 12, 11, 6, 7]), (u'A6_dd', [2, 13, 13]), (u'A6_v', [3, 14, 14, 9]), (u'A6_h', [2, 15, 11]), (u'A6_o', [2, 4, 8]), (u'A5_r', [2, 5, 7]), (u'A5_x', [4, 13, 11, 12, 10]), (u'A5_e', [3, 15, 12, 11]), (u'A14', [3, 8, 9, 13]), (u'A5_cc', [2, 15, 15]), (u'A6_bb', [1, 12]), (u'A5_w', [1, 15])]), None), ([0.72980199463215933, 0.62544933637199795, 0.8661127302656428, 0.9412480169222632, 0.7909774436090226, 0.20902255639097742, 0.058751983077736644, 0.9281861448968799, 0.7909774436090226, 0.20119617224880382, 0.058751983077736644, 0.058751983077736644, 0.43272791267066785, 0.018668307043899213], 'SVM (RDF)', 'SVM (linear)', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 2]), (u'A12_p', [5, 2, 2, 4, 2, 3]), (u'A4_gg', [4, 3, 3, 5, 1]), (u'A12_s', [5, 4, 7, 13, 4, 4]), (u'A12_g', [4, 5, 6, 10, 3]), (u'A5_j', [4, 6, 14, 7, 6]), (u'A5_ff', [5, 7, 9, 2, 8, 14]), (u'A6_j', [4, 8, 12, 3, 5]), (u'A6_ff', [2, 9, 10]), (u'A4_p', [4, 10, 8, 9, 5]), (u'A4_g', [4, 11, 10, 14, 6]), (u'A6_z', [4, 12, 11, 6, 7]), (u'A6_dd', [2, 13, 13]), (u'A6_v', [3, 14, 14, 9]), (u'A6_h', [2, 15, 11]), (u'A6_o', [2, 4, 8]), (u'A5_r', [2, 5, 7]), (u'A5_x', [4, 13, 11, 12, 10]), (u'A5_e', [3, 15, 12, 11]), (u'A14', [3, 8, 9, 13]), (u'A5_cc', [2, 15, 15]), (u'A6_bb', [1, 12]), (u'A5_w', [1, 15])]), None), ([0.72549931292830905, 0.64301230379728835, 0.8641327430397542, 0.934690639873083, 0.7935748462064252, 0.2064251537935749, 0.06530936012691699, 0.9248545742993125, 0.7935748462064252, 0.20379357484620644, 0.06530936012691699, 0.06530936012691699, 0.20597695056708956, 0.019716679165182674], 'SVM (linear)', 'SVM (linear)', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 2]), (u'A12_p', [5, 2, 2, 4, 2, 3]), (u'A4_gg', [4, 3, 3, 5, 1]), (u'A12_s', [5, 4, 7, 13, 4, 4]), (u'A12_g', [4, 5, 6, 10, 3]), (u'A5_j', [4, 6, 14, 7, 6]), (u'A5_ff', [5, 7, 9, 2, 8, 14]), (u'A6_j', [4, 8, 12, 3, 5]), (u'A6_ff', [2, 9, 10]), (u'A4_p', [4, 10, 8, 9, 5]), (u'A4_g', [4, 11, 10, 14, 6]), (u'A6_z', [4, 12, 11, 6, 7]), (u'A6_dd', [2, 13, 13]), (u'A6_v', [3, 14, 14, 9]), (u'A6_h', [2, 15, 11]), (u'A6_o', [2, 4, 8]), (u'A5_r', [2, 5, 7]), (u'A5_x', [4, 13, 11, 12, 10]), (u'A5_e', [3, 15, 12, 11]), (u'A14', [3, 8, 9, 13]), (u'A5_cc', [2, 15, 15]), (u'A6_bb', [1, 12]), (u'A5_w', [1, 15])]), None), ([0.72114106216366958, 0.79088060676283578, 0.862570697692744, 0.8923320994182973, 0.8328092959671907, 0.16719070403280928, 0.10766790058170281, 0.9053939714436806, 0.8093301435406699, 0.18284347231715653, 0.08476996298254892, 0.08476996298254892, 0.2567262729666477, 0.02849049125334551], 'SVM (polynomial)', 'SVM (linear)', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 2]), (u'A12_p', [5, 2, 2, 4, 2, 3]), (u'A4_gg', [4, 3, 3, 5, 1]), (u'A12_s', [5, 4, 7, 13, 4, 4]), (u'A12_g', [4, 5, 6, 10, 3]), (u'A5_j', [4, 6, 14, 7, 6]), (u'A5_ff', [5, 7, 9, 2, 8, 14]), (u'A6_j', [4, 8, 12, 3, 5]), (u'A6_ff', [2, 9, 10]), (u'A4_p', [4, 10, 8, 9, 5]), (u'A4_g', [4, 11, 10, 14, 6]), (u'A6_z', [4, 12, 11, 6, 7]), (u'A6_dd', [2, 13, 13]), (u'A6_v', [3, 14, 14, 9]), (u'A6_h', [2, 15, 11]), (u'A6_o', [2, 4, 8]), (u'A5_r', [2, 5, 7]), (u'A5_x', [4, 13, 11, 12, 10]), (u'A5_e', [3, 15, 12, 11]), (u'A14', [3, 8, 9, 13]), (u'A5_cc', [2, 15, 15]), (u'A6_bb', [1, 12]), (u'A5_w', [1, 15])]), None)], 'SVM (linear)'), ('Random forest', [([0.69999199027493986, 0.41602606220497468, 0.8470102742313212, 0.8011634056054998, 0.8928571428571429, 0.10714285714285714, 0.19883659439450024, 0.3000528820729772, 0.44138755980861244, 0.00786056049213944, 0.04569011105235325, 0.04569011105235325, 0.26191947399067744, 0.04009595300822338], 'AdaBoost', 'Random forest', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A10', [5, 2, 2, 2, 2, 2]), (u'A9', [5, 3, 5, 5, 3, 4]), (u'A7', [5, 4, 4, 3, 4, 3]), (u'A14', [5, 5, 3, 4, 5, 5]), (u'A3', [5, 6, 6, 7, 6, 6]), (u'A13', [5, 7, 7, 6, 7, 8]), (u'A2', [5, 8, 8, 8, 8, 7]), (u'A4_p', [5, 9, 12, 12, 10, 15]), (u'A5_x', [5, 10, 15, 14, 9, 9]), (u'A4_g', [5, 11, 11, 10, 12, 11]), (u'A5_ff', [4, 12, 14, 11, 15]), (u'A6_ff', [5, 13, 10, 13, 13, 12]), (u'A6_h', [5, 14, 9, 9, 11, 10]), (u'A5_q', [3, 15, 13, 14]), (u'A12_g', [1, 15]), (u'A12_p', [2, 14, 13])]), None), ([0.73931122225980528, 0.69221091905397014, 0.8714686396294569, 0.8892120571126387, 0.8537252221462748, 0.14627477785372522, 0.11078794288736118, 0.7361184558434691, 0.7909432672590567, 0.06015037593984962, 0.07831835007932311, 0.07831835007932311, 9.359962122595649, 0.036441332747603174], 'Artificial neural network', 'Random forest', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A10', [5, 2, 2, 2, 2, 2]), (u'A9', [5, 3, 5, 5, 3, 4]), (u'A7', [5, 4, 4, 3, 4, 3]), (u'A14', [5, 5, 3, 4, 5, 5]), (u'A3', [5, 6, 6, 7, 6, 6]), (u'A13', [5, 7, 7, 6, 7, 8]), (u'A2', [5, 8, 8, 8, 8, 7]), (u'A4_p', [5, 9, 12, 12, 10, 15]), (u'A5_x', [5, 10, 15, 14, 9, 9]), (u'A4_g', [5, 11, 11, 10, 12, 11]), (u'A5_ff', [4, 12, 14, 11, 15]), (u'A6_ff', [5, 13, 10, 13, 13, 12]), (u'A6_h', [5, 14, 9, 9, 11, 10]), (u'A5_q', [3, 15, 13, 14]), (u'A12_g', [1, 15]), (u'A12_p', [2, 14, 13])]), None), ([0.70783325449054102, 0.75048582900383642, 0.8547719654889351, 0.8533580116340559, 0.856185919343814, 0.14381408065618592, 0.14664198836594394, 0.7914331041776836, 0.7831168831168831, 0.09155844155844156, 0.09455314648334215, 0.09455314648334215, 0.11286307354549319, 0.028897878345395634], 'Bernoulli Naive Bayes', 'Random forest', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A10', [5, 2, 2, 2, 2, 2]), (u'A9', [5, 3, 5, 5, 3, 4]), (u'A7', [5, 4, 4, 3, 4, 3]), (u'A14', [5, 5, 3, 4, 5, 5]), (u'A3', [5, 6, 6, 7, 6, 6]), (u'A13', [5, 7, 7, 6, 7, 8]), (u'A2', [5, 8, 8, 8, 8, 7]), (u'A4_p', [5, 9, 12, 12, 10, 15]), (u'A5_x', [5, 10, 15, 14, 9, 9]), (u'A4_g', [5, 11, 11, 10, 12, 11]), (u'A5_ff', [4, 12, 14, 11, 15]), (u'A6_ff', [5, 13, 10, 13, 13, 12]), (u'A6_h', [5, 14, 9, 9, 11, 10]), (u'A5_q', [3, 15, 13, 14]), (u'A12_g', [1, 15]), (u'A12_p', [2, 14, 13])]), None), ([0.62626534494310926, 0.69679323421544981, 0.8141682929500569, 0.8113167636171339, 0.8170198222829802, 0.18298017771701983, 0.18868323638286622, 0.7526705446853517, 0.6681818181818182, 0.15164046479835952, 0.12046536224219988, 0.12046536224219988, 0.0048442507575929454, 0.024775030125058713], 'Decision Tree', 'Random forest', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A10', [5, 2, 2, 2, 2, 2]), (u'A9', [5, 3, 5, 5, 3, 4]), (u'A7', [5, 4, 4, 3, 4, 3]), (u'A14', [5, 5, 3, 4, 5, 5]), (u'A3', [5, 6, 6, 7, 6, 6]), (u'A13', [5, 7, 7, 6, 7, 8]), (u'A2', [5, 8, 8, 8, 8, 7]), (u'A4_p', [5, 9, 12, 12, 10, 15]), (u'A5_x', [5, 10, 15, 14, 9, 9]), (u'A4_g', [5, 11, 11, 10, 12, 11]), (u'A5_ff', [4, 12, 14, 11, 15]), (u'A6_ff', [5, 13, 10, 13, 13, 12]), (u'A6_h', [5, 14, 9, 9, 11, 10]), (u'A5_q', [3, 15, 13, 14]), (u'A12_g', [1, 15]), (u'A12_p', [2, 14, 13])]), None), ([0.72874846362273382, 0.67848634888855253, 0.8661359181329121, 0.9282390269698573, 0.8040328092959672, 0.19596719070403285, 0.07176097303014278, 0.7327340031729244, 0.7883116883116884, 0.05748462064251538, 0.06525647805393972, 0.06525647805393972, 0.12017623799615565, 0.023886344236968473], 'Extreme Learning Machine', 'Random forest', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A10', [5, 2, 2, 2, 2, 2]), (u'A9', [5, 3, 5, 5, 3, 4]), (u'A7', [5, 4, 4, 3, 4, 3]), (u'A14', [5, 5, 3, 4, 5, 5]), (u'A3', [5, 6, 6, 7, 6, 6]), (u'A13', [5, 7, 7, 6, 7, 8]), (u'A2', [5, 8, 8, 8, 8, 7]), (u'A4_p', [5, 9, 12, 12, 10, 15]), (u'A5_x', [5, 10, 15, 14, 9, 9]), (u'A4_g', [5, 11, 11, 10, 12, 11]), (u'A5_ff', [4, 12, 14, 11, 15]), (u'A6_ff', [5, 13, 10, 13, 13, 12]), (u'A6_h', [5, 14, 9, 9, 11, 10]), (u'A5_q', [3, 15, 13, 14]), (u'A12_g', [1, 15]), (u'A12_p', [2, 14, 13])]), None), ([0.70103905033148917, 0.83948847142695859, 0.8510354656893664, 0.9347435219460604, 0.7673274094326726, 0.2326725905673274, 0.06525647805393972, 0.9347435219460604, 0.7620984278879016, 0.230041011619959, 0.06525647805393972, 0.06525647805393972, 0.0047941419823072096, 0.024692529786930206], 'Gaussian Naive Bayes', 'Random forest', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A10', [5, 2, 2, 2, 2, 2]), (u'A9', [5, 3, 5, 5, 3, 4]), (u'A7', [5, 4, 4, 3, 4, 3]), (u'A14', [5, 5, 3, 4, 5, 5]), (u'A3', [5, 6, 6, 7, 6, 6]), (u'A13', [5, 7, 7, 6, 7, 8]), (u'A2', [5, 8, 8, 8, 8, 7]), (u'A4_p', [5, 9, 12, 12, 10, 15]), (u'A5_x', [5, 10, 15, 14, 9, 9]), (u'A4_g', [5, 11, 11, 10, 12, 11]), (u'A5_ff', [4, 12, 14, 11, 15]), (u'A6_ff', [5, 13, 10, 13, 13, 12]), (u'A6_h', [5, 14, 9, 9, 11, 10]), (u'A5_q', [3, 15, 13, 14]), (u'A12_g', [1, 15]), (u'A12_p', [2, 14, 13])]), None), ([0.7184077165620758, 0.61997931176453913, 0.8542859600807219, 0.7947646747752511, 0.9138072453861927, 0.08619275461380724, 0.2052353252247488, 0.608937070333157, 0.793609022556391, 0.02874231032125769, 0.08476996298254891, 0.08476996298254891, 0.0035761365107918053, 0.0401853659371575], 'K-nearest neighbours', 'Random forest', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A10', [5, 2, 2, 2, 2, 2]), (u'A9', [5, 3, 5, 5, 3, 4]), (u'A7', [5, 4, 4, 3, 4, 3]), (u'A14', [5, 5, 3, 4, 5, 5]), (u'A3', [5, 6, 6, 7, 6, 6]), (u'A13', [5, 7, 7, 6, 7, 8]), (u'A2', [5, 8, 8, 8, 8, 7]), (u'A4_p', [5, 9, 12, 12, 10, 15]), (u'A5_x', [5, 10, 15, 14, 9, 9]), (u'A4_g', [5, 11, 11, 10, 12, 11]), (u'A5_ff', [4, 12, 14, 11, 15]), (u'A6_ff', [5, 13, 10, 13, 13, 12]), (u'A6_h', [5, 14, 9, 9, 11, 10]), (u'A5_q', [3, 15, 13, 14]), (u'A12_g', [1, 15]), (u'A12_p', [2, 14, 13])]), None), ([0.72423214035177774, 0.72667945205148354, 0.8641713834608155, 0.9087255420412481, 0.819617224880383, 0.18038277511961723, 0.09127445795875197, 0.8271813855103121, 0.7909432672590568, 0.1018796992481203, 0.07181385510312004, 0.07181385510312004, 0.014239344263284002, 0.0262308168351184], 'Logistic regression', 'Random forest', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A10', [5, 2, 2, 2, 2, 2]), (u'A9', [5, 3, 5, 5, 3, 4]), (u'A7', [5, 4, 4, 3, 4, 3]), (u'A14', [5, 5, 3, 4, 5, 5]), (u'A3', [5, 6, 6, 7, 6, 6]), (u'A13', [5, 7, 7, 6, 7, 8]), (u'A2', [5, 8, 8, 8, 8, 7]), (u'A4_p', [5, 9, 12, 12, 10, 15]), (u'A5_x', [5, 10, 15, 14, 9, 9]), (u'A4_g', [5, 11, 11, 10, 12, 11]), (u'A5_ff', [4, 12, 14, 11, 15]), (u'A6_ff', [5, 13, 10, 13, 13, 12]), (u'A6_h', [5, 14, 9, 9, 11, 10]), (u'A5_q', [3, 15, 13, 14]), (u'A12_g', [1, 15]), (u'A12_p', [2, 14, 13])]), None), ([0.72155387865447362, 0.61468856363186519, 0.8609931817187795, 0.850079323109466, 0.8719070403280929, 0.12809295967190704, 0.1499206768905341, 0.6708619777895294, 0.7752221462747778, 0.041866028708133975, 0.06525647805393972, 0.06525647805393972, 2.4196265809545032, 0.032969301719109806], 'Random forest', 'Random forest', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A10', [5, 2, 2, 2, 2, 2]), (u'A9', [5, 3, 5, 5, 3, 4]), (u'A7', [5, 4, 4, 3, 4, 3]), (u'A14', [5, 5, 3, 4, 5, 5]), (u'A3', [5, 6, 6, 7, 6, 6]), (u'A13', [5, 7, 7, 6, 7, 8]), (u'A2', [5, 8, 8, 8, 8, 7]), (u'A4_p', [5, 9, 12, 12, 10, 15]), (u'A5_x', [5, 10, 15, 14, 9, 9]), (u'A4_g', [5, 11, 11, 10, 12, 11]), (u'A5_ff', [4, 12, 14, 11, 15]), (u'A6_ff', [5, 13, 10, 13, 13, 12]), (u'A6_h', [5, 14, 9, 9, 11, 10]), (u'A5_q', [3, 15, 13, 14]), (u'A12_g', [1, 15]), (u'A12_p', [2, 14, 13])]), None), ([0.72874846362273371, 0.65245819919893622, 0.8660923889214406, 0.9281861448968799, 0.8039986329460014, 0.19600136705399862, 0.07181385510312004, 0.8956107879428874, 0.78838004101162, 0.1723855092276145, 0.07181385510312004, 0.07181385510312004, 0.39890086703274275, 0.02341358454923237], 'SVM (RDF)', 'Random forest', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A10', [5, 2, 2, 2, 2, 2]), (u'A9', [5, 3, 5, 5, 3, 4]), (u'A7', [5, 4, 4, 3, 4, 3]), (u'A14', [5, 5, 3, 4, 5, 5]), (u'A3', [5, 6, 6, 7, 6, 6]), (u'A13', [5, 7, 7, 6, 7, 8]), (u'A2', [5, 8, 8, 8, 8, 7]), (u'A4_p', [5, 9, 12, 12, 10, 15]), (u'A5_x', [5, 10, 15, 14, 9, 9]), (u'A4_g', [5, 11, 11, 10, 12, 11]), (u'A5_ff', [4, 12, 14, 11, 15]), (u'A6_ff', [5, 13, 10, 13, 13, 12]), (u'A6_h', [5, 14, 9, 9, 11, 10]), (u'A5_q', [3, 15, 13, 14]), (u'A12_g', [1, 15]), (u'A12_p', [2, 14, 13])]), None), ([0.71456794374632004, 0.66840034271804194, 0.8589269493622524, 0.9216816499206768, 0.7961722488038278, 0.20382775119617227, 0.0783183500793231, 0.9184029613960867, 0.7961722488038278, 0.20119617224880382, 0.0783183500793231, 0.0783183500793231, 0.4637195864637473, 0.021682584851562554], 'SVM (linear)', 'Random forest', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A10', [5, 2, 2, 2, 2, 2]), (u'A9', [5, 3, 5, 5, 3, 4]), (u'A7', [5, 4, 4, 3, 4, 3]), (u'A14', [5, 5, 3, 4, 5, 5]), (u'A3', [5, 6, 6, 7, 6, 6]), (u'A13', [5, 7, 7, 6, 7, 8]), (u'A2', [5, 8, 8, 8, 8, 7]), (u'A4_p', [5, 9, 12, 12, 10, 15]), (u'A5_x', [5, 10, 15, 14, 9, 9]), (u'A4_g', [5, 11, 11, 10, 12, 11]), (u'A5_ff', [4, 12, 14, 11, 15]), (u'A6_ff', [5, 13, 10, 13, 13, 12]), (u'A6_h', [5, 14, 9, 9, 11, 10]), (u'A5_q', [3, 15, 13, 14]), (u'A12_g', [1, 15]), (u'A12_p', [2, 14, 13])]), None), ([0.72367006686685642, 0.74554687258676566, 0.8632283891065098, 0.8727657324167108, 0.8536910457963088, 0.14630895420369106, 0.12723426758328926, 0.9021152829190904, 0.7779220779220779, 0.16729323308270677, 0.0750925436277102, 0.0750925436277102, 0.17573660654318046, 0.03100339815704], 'SVM (polynomial)', 'Random forest', OrderedDict([(u'A8', [5, 1, 1, 1, 1, 1]), (u'A10', [5, 2, 2, 2, 2, 2]), (u'A9', [5, 3, 5, 5, 3, 4]), (u'A7', [5, 4, 4, 3, 4, 3]), (u'A14', [5, 5, 3, 4, 5, 5]), (u'A3', [5, 6, 6, 7, 6, 6]), (u'A13', [5, 7, 7, 6, 7, 8]), (u'A2', [5, 8, 8, 8, 8, 7]), (u'A4_p', [5, 9, 12, 12, 10, 15]), (u'A5_x', [5, 10, 15, 14, 9, 9]), (u'A4_g', [5, 11, 11, 10, 12, 11]), (u'A5_ff', [4, 12, 14, 11, 15]), (u'A6_ff', [5, 13, 10, 13, 13, 12]), (u'A6_h', [5, 14, 9, 9, 11, 10]), (u'A5_q', [3, 15, 13, 14]), (u'A12_g', [1, 15]), (u'A12_p', [2, 14, 13])]), None)], 'Random forest')]]
    plot_percentage_difference_graph(results, ["Lima Peru", "India Attrition", "German Credit", "Australian Credit"], x_label="Feature selection approach", name_suffix="_after", difference_from="no feature selection", figsize=(19.5, 4.5), legend_y=-0.67)
